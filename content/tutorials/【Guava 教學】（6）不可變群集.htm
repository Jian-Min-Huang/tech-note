<!DOCTYPE html>
<!-- saved from url=(0074)https://openhome.cc/Gossip/CodeData/GuavaTutorial/ImmutableCollection.html -->
<html lang="zh-tw"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="【Guava 教學】（5）程式 90% 比率在管理與處理錯誤 &lt;&lt; 前情
      不可變（Immutability）是函數式程式設計（Functional programm...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="【Guava 教學】（6）不可變群集">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/CodeData/GuavaTutorial/ImmutableCollection.html">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="【Guava 教學】（5）程式 90% 比率在管理與處理錯誤 &lt;&lt; 前情
      不可變（Immutability）是函數式程式設計（Functional programm...">


    <title>【Guava 教學】（6）不可變群集</title>

<link rel="stylesheet" href="./【Guava 教學】（6）不可變群集_files/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="./【Guava 教學】（6）不可變群集_files/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="./【Guava 教學】（6）不可變群集_files/caterpillar.css">
     <script async="" src="./【Guava 教學】（6）不可變群集_files/async-ads.js"></script><script src="./【Guava 教學】（6）不可變群集_files/ca-pub-9750319131714390.js"></script><script async="" src="./【Guava 教學】（6）不可變群集_files/analytics.js"></script><script type="text/javascript" async="" src="./【Guava 教學】（6）不可變群集_files/cse.js"></script>
<!-- 網頁層級廣告 --><script async="" src="./【Guava 教學】（6）不可變群集_files/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script><link rel="stylesheet" type="text/css" href="./【Guava 教學】（6）不可變群集_files/prettify.css"><link rel="preload" href="./【Guava 教學】（6）不可變群集_files/integrator.js" as="script"><script type="text/javascript" src="./【Guava 教學】（6）不可變群集_files/integrator.js"></script><link rel="preload" href="./【Guava 教學】（6）不可變群集_files/integrator(1).js" as="script"><script type="text/javascript" src="./【Guava 教學】（6）不可變群集_files/integrator(1).js"></script><script src="./【Guava 教學】（6）不可變群集_files/jsapi" type="text/javascript"></script><link type="text/css" href="./【Guava 教學】（6）不可變群集_files/default+zh_TW.css" rel="stylesheet"><link type="text/css" href="./【Guava 教學】（6）不可變群集_files/default.css" rel="stylesheet"><script type="text/javascript" src="./【Guava 教學】（6）不可變群集_files/default+zh_TW.I.js"></script><style type="text/css">.gsc-control-cse{font-family:Arial, sans-serif;border-color:#FFFFFF;background-color:#FFFFFF}.gsc-control-cse .gsc-table-result{font-family:Arial, sans-serif}input.gsc-input{border-color:#BCCDF0}input.gsc-search-button{border-color:#666666;background-color:#CECECE}.gsc-tabHeader.gsc-tabhInactive{border-color:#E9E9E9;background-color:#E9E9E9}.gsc-tabHeader.gsc-tabhActive{border-top-color:#FF9900;border-left-color:#E9E9E9;border-right-color:#E9E9E9;background-color:#FFFFFF}.gsc-tabsArea{border-color:#E9E9E9;}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#336699;background-color:#FFFFFF}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#0000CC;background-color:#FFFFFF}.gsc-webResult.gsc-result.gsc-promotion:hover{border-color:#0000CC;background-color:#FFFFFF}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#0000FF}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#663399}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#0000CC}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#0000CC}.gsc-cursor-page{color:#0000FF}a.gsc-trailing-more-results:link{color:#0000FF}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#000000}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#008000}.gs-webResult div.gs-visibleUrl-short{color:#008000}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#336699}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#E9E9E9;background-color:#FFFFFF;color:#0000FF}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#FF9900;background-color:#FFFFFF;color:#663399}.gsc-webResult.gsc-result.gsc-promotion{border-color:#336699;background-color:#FFFFFF}.gsc-completion-title{color:#0000FF}.gsc-completion-snippet{color:#000000}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#0000FF}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#663399}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#0000FF}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#0000FF}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#000000}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#008000}</style><style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-webkit-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gsq_a{padding:0}.gscsep_a{display:none}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em;-webkit-appearance:button}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gssb_a{padding:0 7px}.gssb_e{border:0}.gssb_l{margin:5px 0}input.gsc-input::-webkit-input-placeholder{font-size:14px}input.gsc-input:-moz-placeholder{font-size:14px}input.gsc-input::-moz-placeholder{font-size:14px}input.gsc-input:-ms-input-placeholder{font-size:14px}input.gsc-input:focus::-webkit-input-placeholder{color:transparent}input.gsc-input:focus:-moz-placeholder{color:transparent}input.gsc-input:focus::-moz-placeholder{color:transparent}input.gsc-input:focus:-ms-input-placeholder{color:transparent}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="https://openhome.cc/Gossip/CodeData/GuavaTutorial/ImmutableCollection.html#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/CodeData/GuavaTutorial/index.html">回 Guava Tutorial</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="./【Guava 教學】（6）不可變群集_files/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="./【Guava 教學】（6）不可變群集_files/facebook.png"></a> <a href="https://plus.google.com/+JustinSDK/"><img title="Google+" alt="Google+" src="./【Guava 教學】（6）不可變群集_files/google.png"></a></div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><div id="___gcse_0"><div class="gsc-control-searchbox-only gsc-control-searchbox-only-zh_TW" dir="ltr"><form class="gsc-search-box" accept-charset="utf-8"><table cellspacing="0" cellpadding="0" class="gsc-search-box"><tbody><tr><td class="gsc-input"><input autocomplete="off" type="text" size="10" class=" gsc-input" name="search" title="搜尋" id="gsc-i-id1" x-webkit-speech="" x-webkit-grammar="builtin:search" lang="zh_TW" dir="ltr" spellcheck="false" placeholder="自訂搜尋" style="outline: none; background: url(&quot;https://www.google.com/cse/static/images/1x/googlelogo_lightgrey_46x16dp.png&quot;) left center no-repeat rgb(255, 255, 255); text-indent: 48px;"></td><td class="gsc-search-button"><input type="button" value="搜尋" class="gsc-search-button" title="搜尋"></td><td class="gsc-clear-button"><div class="gsc-clear-button" title="清除結果">&nbsp;</div></td></tr></tbody></table></form></div></div></div><br><div class="ad" style="text-align: center;"><script async="" src="./【Guava 教學】（6）不可變群集_files/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent;"><iframe width="160" height="600" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;width:160px;height:600px;" src="./【Guava 教學】（6）不可變群集_files/saved_resource.html"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>【Guava 教學】（6）不可變群集</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="./【Guava 教學】（6）不可變群集_files/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display: block; height: 90px;" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto" data-adsbygoogle-status="done"><ins id="aswift_2_expand" style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><ins id="aswift_2_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><iframe width="800" height="90" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;width:800px;height:90px;" src="./【Guava 教學】（6）不可變群集_files/saved_resource(1).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             <br>
      不可變（Immutability）是函數式程式設計（Functional programming）的基本特性之一。有不少說法是這麼描述：純函數式語言中的變數（Variable）是不可變（Immutable）。是這樣的嗎？基本上沒錯，不過嚴格來說，這樣的說法，是從計算機科學來解釋「變數」這個詞，就如同維基百科上&nbsp;<a href="https://zh.wikipedia.org/wiki/%E8%AE%8A%E6%95%B8#.E8.A8.88.E7.AE.97.E6.A9.9F.E7.A7.91.E5.AD.B8.E4.B8.8A">計算機科學上對變數</a> 的條目說明是：
      <p style="padding-left: 30px;"><strong>可視為在電腦記憶體裏可修改的、存在值的命名空間。</strong></p>
      然而，在純函數式語言中對「變數」這個詞，要從數學上來解釋，就如同維基百科上 <a href="https://zh.wikipedia.org/wiki/%E8%AE%8A%E6%95%B8#.E6.95.B8.E5.AD.B8.E4.B8.8A">數學上對變數</a>的修目說明是：
      <p style="padding-left: 30px;"><strong>用於開放句子，表示尚未清楚的值（即未知數），或一個可代入的值。</strong></p>
      在純函數式語言中，當你說 <code>x = 1</code>，那麼說 <code>x</code> 就是 <code>1</code>，不會再是別的，從計算機科學角度來看，就像是不可變的變數，以 Java 為例的話，就像是變數被加上 <code>final</code> 修飾。<br>
      如果變數不可變，那設計出來的函數或物件方法就不會有副作用（Side effect），若物件的方法不會有副作用，那麼物件狀態也會是不可變，不可變物件（Immutable object）有許多好處，像是在並行（Concurrent）程式設計時，就不用擔心那些執行緒共用競爭的問題；在面對資料處理問題若需要一些群集（Collection）物件，像是有序的清單（List）、收集不重複物件的集合（Set）等，如果這些群集物件不可變，那麼就有可能共用資料結構，達到節省時間及空間之目的。<br>
      Java 在設計群集框架時，並沒有為不可變群集物件設計專用型態，看看 <code>Collection</code> 介面就知道了，那些 <code>add</code>、<code>remove</code> 等方法就直接定義在上頭。有趣的是，在 <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/collections/overview.html">Collections Framework Overview</a> 中談到了，有些方法操作都是選用的（Optional），如果不打算提供實作的方法，可以丟出 <code>UnsupportedOperationException</code>，實作物件必須在文件上指明，支援哪些操作。<br>
      在這樣的聲明下，如果你原本有個群集已收集了一些物件，現在打算傳遞這個群集，而且不希望拿到這個群集的任何一方對它做出修改（Modify）操作，那麼可以使用 <code>Collections</code> 上提供的 <code>unmodifiableXXX</code> 方法，那些方法會將群集包裹，對於查詢方法，會委託原群集，對於會修改群集的 <code>add</code>、<code>remove</code> 等方法，則丟出 <code>UnsupportedOperationException</code>。例如 <code>unmodifiableCollection</code> 方法的實作是這樣的：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln">  </span><span class="typ">Collection</span><span class="pln"> unmodifiableCollection</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> T</span><span class="pun">&gt;</span><span class="pln"> c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnmodifiableCollection</span><span class="pun">&lt;&gt;(</span><span class="pln">c</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UnmodifiableCollection</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Collection</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Serializable</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">long</span><span class="pln"> serialVersionUID </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1820017752578914078L</span><span class="pun">;</span><span class="pln">

        </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Collection</span><span class="pun">&lt;?</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> E</span><span class="pun">&gt;</span><span class="pln"> c</span><span class="pun">;</span><span class="pln">

        </span><span class="typ">UnmodifiableCollection</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> E</span><span class="pun">&gt;</span><span class="pln"> c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">c</span><span class="pun">==</span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
                </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">NullPointerException</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">c </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> size</span><span class="pun">()</span><span class="pln">                   </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">size</span><span class="pun">();}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> isEmpty</span><span class="pun">()</span><span class="pln">            </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">isEmpty</span><span class="pun">();}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> contains</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> o</span><span class="pun">)</span><span class="pln">   </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">contains</span><span class="pun">(</span><span class="pln">o</span><span class="pun">);}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">[]</span><span class="pln"> toArray</span><span class="pun">()</span><span class="pln">           </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">toArray</span><span class="pun">();}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln">  T</span><span class="pun">[]</span><span class="pln"> toArray</span><span class="pun">(</span><span class="pln">T</span><span class="pun">[]</span><span class="pln"> a</span><span class="pun">)</span><span class="pln">       </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">toArray</span><span class="pun">(</span><span class="pln">a</span><span class="pun">);}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> toString</span><span class="pun">()</span><span class="pln">            </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">();}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Iterator</span><span class="pln"> iterator</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Iterator</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Iterator</span><span class="pun">&lt;?</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> E</span><span class="pun">&gt;</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">iterator</span><span class="pun">();</span><span class="pln">

                </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> hasNext</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> i</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">();}</span><span class="pln">
                </span><span class="kwd">public</span><span class="pln"> E </span><span class="kwd">next</span><span class="pun">()</span><span class="pln">          </span><span class="pun">{</span><span class="kwd">return</span><span class="pln"> i</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">();}</span><span class="pln">
                </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> remove</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                    </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
                </span><span class="pun">}</span><span class="pln">
            </span><span class="pun">};</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> add</span><span class="pun">(</span><span class="pln">E e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> remove</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> o</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> containsAll</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?&gt;</span><span class="pln"> coll</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> c</span><span class="pun">.</span><span class="pln">containsAll</span><span class="pun">(</span><span class="pln">coll</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> addAll</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> E</span><span class="pun">&gt;</span><span class="pln"> coll</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> removeAll</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?&gt;</span><span class="pln"> coll</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> retainAll</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;?&gt;</span><span class="pln"> coll</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> clear</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">UnsupportedOperationException</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      那麼，透過&nbsp;<code>unmodifiableXXX</code>&nbsp;方法傳回的群集是不可變嗎？不是！傳回的物件只是無法修改（Unmodifiable），也就是僅僅不支援修改操作罷了，在&nbsp;<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/collections/overview.html">Collections Framework Overview</a>&nbsp;中就講了：
      <p style="padding-left: 30px;"><em><strong>Collections that do not support modification operations (such as add, remove and clear) are referred to as <span style="color: #ff0000;">unmodifiable</span>.&nbsp;</strong></em></p>
      這是什麼意思？簡單來說，如果你有個 <code>List</code> 的實作物件被 <code>list</code> 參考的話，那麼 <code>Collections.unmodifiableList(list)</code> 傳回的物件是無法修改，但卻是可變的（Muttable）！嗯？怎麼變？透過 <code>list.add(...)</code> 等修改操作就可變了！，在&nbsp;<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/collections/overview.html">Collections Framework Overview</a>&nbsp;中也講了：
      <p style="padding-left: 30px;"><em><strong>Collections that additionally guarantee that no change in the Collection object will be visible are referred to as <span style="color: #ff0000;">immutable</span>.&nbsp;</strong></em></p>
      &nbsp;所以，不可變從來也沒在 <code>Collections</code> 上那些&nbsp;&nbsp;<code>unmodifiableXXX</code>&nbsp;方法的保證中，畢竟名稱上也指出了，傳回的物件是 <strong>unmodifiable</strong>，不是 <strong>immutable</strong>。無論這是不是在玩文字遊戲，如果你要的是不可變群集，那麼就不能使用&nbsp;&nbsp;<code>Collections</code>&nbsp;上那些&nbsp;&nbsp;<code>unmodifiableXXX</code>&nbsp;方法。<br>
      Guava 對 JDK 的 <code>Collection</code>、<code>List</code>、<code>Set</code> 等，分別提供了&nbsp;<code>ImmutableCollection</code>、<code>ImmutableList</code>、<code>ImmutableSet</code> 等實作類別，這些類別的實例是不可變。建立它們的方式之一使透過 <code>static</code> 的 <code>of</code> 方法。例如：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> nameList </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ImmutableList</span><span class="pun">.</span><span class="pln">of</span><span class="pun">(</span><span class="str">"Duke"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Java"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Oracle"</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Set</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> nameSet </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ImmutableSet</span><span class="pun">.</span><span class="pln">of</span><span class="pun">(</span><span class="str">"Duke"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Java"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Oracle"</span><span class="pun">);</span></code></pre>
      上例傳回的實例分別會是 <code>ImmutableList</code> 及 <code>ImmutableSet</code> 的實例，有趣的是，<code>ImmutableSet</code> 會保留 <code>of</code> 方法傳入的引數順序。對於 <code>Map</code>，Guava 也有 <code>ImmutableMap</code>。例如以下會建立 <code>ImmutableMap</code> 的實例：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> userDB </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ImmutableMap</span><span class="pun">.</span><span class="pln">of</span><span class="pun">(</span><span class="str">"Duke"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">123</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Java"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">456</span><span class="pun">);</span></code></pre>
      如果你需要收集資料，最後取得一個 <code>ImmutableXXX</code>，那麼可以使用 <code>builder</code> 方法取得 <code>ImmutableCollection.Builder</code> 實例，由它來收集物件，最後呼叫其 <code>build</code> 方法建造出不可變群集。例如：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="typ">ImmutableList</span><span class="pun">.</span><span class="typ">Builder</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ImmutableList</span><span class="pun">.</span><span class="pln">builder</span><span class="pun">();</span><span class="pln">
</span><span class="kwd">for</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> arg </span><span class="pun">:</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    builder</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">parseInt</span><span class="pun">(</span><span class="pln">arg</span><span class="pun">));</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> numbers </span><span class="pun">=</span><span class="pln"> builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></code></pre>
      如果你已經有陣列、<code>Iterable</code>、<code>Iterator</code> 或 <code>Collection</code> 實例，想要用他們來得到不可變群集，則可以使用 <code>copyOf</code> 方法。例如：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> doSome</span><span class="pun">(</span><span class="typ">Collection</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> names</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> immutableNames </span><span class="pun">=</span><span class="pln"> </span><span class="typ">ImmutableList</span><span class="pun">.</span><span class="pln">copyOf</span><span class="pun">(</span><span class="pln">names</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      正如 <code>copyOf</code> 名稱指出的，他會將物件從來源（淺層）複製出來，而不是單純的包裹來源，因此你對來源加以變動，並不會影響 <code>copyOf</code> 傳回的物件。不過對於參數型態為 <code>Collection</code> 的 <code>copyOf</code> 方法來說，如果實際上傳入的是子類型的 <code>ImmutableXXX</code>，那麼不一定會發生複製，因為群集不可變，所以實際上會有許多共用資料結構的機會。<br>
      舉例而言，如果將 <code>ImmutableCollection</code> 傳入 <code>ImmutableList.copyOf</code>，方法內部會呼叫其 <code>asList</code> 方法，如果傳入的物件實際上是 <code>ImmutableList</code>，其 <code>asList</code> 的實作只是直接 <code>return this</code> 罷了；如果傳入的實際上是 <code>ImmutableSet</code>，<code>asList</code> 傳回的 <code>ImmutableList</code>，實際上會與&nbsp;<code>ImmutableSet</code> 共用一組陣列。<br>
      <code>ImmutableCollection</code>&nbsp;既然定義了 <code>asList</code> 方法，其傳回 <code>ImmutableList</code> 實例，這也就表示，即使是 <code>ImmutableSet</code>，也可以透過來以 <code>List</code> 的方式檢視。<br>
      那麼 <code>ImmutableList</code> 實際上內部是什麼資料結構實作呢？既然它是不可變，那麼陣列自然是最理想的結構，畢竟陣列是記憶體的連續空間結構，索引存取是常數時間。<br>
      <code>ImmutableList</code> 有 <code>SingletonImmutableList</code>、<code>RegularImmutableList</code> 與 <code>RegularImmutableAsList&nbsp;</code>等子類別。空的以及兩個元素以上的 <code>ImmutableList</code> 都會是 <code>RegularImmutableList</code>；<code>asList</code> 傳回的則是 <code>RegularImmutableAsList</code>，這兩個類別內部都使用陣列元素；而單一元素的 <code>ImmutableList</code> 則會是 <code>SingletonImmutableList</code>，這個類別內部直接包裹該元素，不使用陣列，呼叫 <code>get</code> 時，就只是傳回包裹的單一元素而已：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
</span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SingletonImmutableList</span><span class="pun">&lt;</span><span class="pln">E</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">ImmutableList</span><span class="pun">&lt;</span><span class="pln">E</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">transient</span><span class="pln"> E element</span><span class="pun">;</span><span class="pln">

  </span><span class="typ">SingletonImmutableList</span><span class="pun">(</span><span class="pln">E element</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">element </span><span class="pun">=</span><span class="pln"> checkNotNull</span><span class="pun">(</span><span class="pln">element</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="lit">@Override</span><span class="pln">
  </span><span class="kwd">public</span><span class="pln"> E </span><span class="kwd">get</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> index</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">Preconditions</span><span class="pun">.</span><span class="pln">checkElementIndex</span><span class="pun">(</span><span class="pln">index</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> element</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      至於 <code>ImmutableSet</code> 也有&nbsp;<code>RegularImmutableSet</code>、<code>SingletonImmutableSet</code> 等子類別，實際上 <code>RegularImmutableSet</code> 內部實作也是使用陣列保存元素，這也就是為什麼 <code>ImmutableSet</code> 可以保有元素順序的原因，先前提到，如果 <code>ImmutableList.copyOf</code> 方法傳入的實際上是 <code>ImmutableSet</code>，<code>asList</code> 傳回的 <code>ImmutableList</code>，實際上會與&nbsp;<code>ImmutableSet</code> 共用一組陣列，指的就是 <code>RegularImmutableSet</code> 中的陣列，不過在呼叫 <code>contains</code> 方法時，並不會因此而成為線性時間，<code>RegularImmutableSet</code> 還保存有另一個陣列，可根據物件的 <code>hashCode</code> 方法傳回值來查找物件，這可從 <code>RegularImmutableSet</code> 的 <code>contains</code> 原始碼略知一二：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
  </span><span class="lit">@Override</span><span class="pln"> </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> contains</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> target</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">target </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Hashing</span><span class="pun">.</span><span class="pln">smear</span><span class="pun">(</span><span class="pln">target</span><span class="pun">.</span><span class="pln">hashCode</span><span class="pun">());</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="typ">Object</span><span class="pln"> candidate </span><span class="pun">=</span><span class="pln"> table</span><span class="pun">[</span><span class="pln">i </span><span class="pun">&amp;</span><span class="pln"> mask</span><span class="pun">];</span><span class="pln">
      </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">candidate </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
      </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">candidate</span><span class="pun">.</span><span class="pln">equals</span><span class="pun">(</span><span class="pln">target</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      這些原始碼的探討，其實在回應本文一開始談到的，群集物件若是不可變，那麼就有可能共用資料結構，達到節省時間及空間之目的。不可變特性並非僅存於函數式程式設計的世界，在命令式程式設計（Imperative programming）世界中，在某些場合若可善用不可變特性，就可避免因狀態可變而帶來的問題。<br>
      Guava 並不特別強調函數式的概念，不過實際上它提出不可變群集程式庫，並非只是單純地令群集不可變，在實作上也確實善用了不可變的益處，你可以查找更多 Guava 不可變群集的相關程式碼，藉此就可以看到更多有趣的設計與概念。<br><br><br><div class="ad336-280" style="text-align: center;"><script async="" src="./【Guava 教學】（6）不可變群集_files/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681" data-adsbygoogle-status="done"><ins id="aswift_3_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent;"><ins id="aswift_3_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent;"><iframe width="336" height="280" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;width:336px;height:280px;" src="./【Guava 教學】（6）不可變群集_files/saved_resource(2).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async="" src="./【Guava 教學】（6）不可變群集_files/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display: block; height: 480px;" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed" data-adsbygoogle-status="done"><ins id="aswift_4_expand" style="display:inline-table;border:none;height:480px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><ins id="aswift_4_anchor" style="display:block;border:none;height:480px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><iframe width="800" height="480" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_4" name="aswift_4" style="left:0;position:absolute;top:0;width:800px;height:480px;" src="./【Guava 教學】（6）不可變群集_files/saved_resource(3).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div>
<script src="./【Guava 教學】（6）不可變群集_files/ui.js"></script>

<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-143766-1', 'auto');
  ga('send', 'pageview');

</script>
</div>
<ins class="adsbygoogle" data-adsbygoogle-status="done" style="display: none;"><ins id="aswift_0_expand" style="display:inline-table;border:none;height:NaNpx;margin:0;padding:0;position:relative;visibility:visible;width:NaNpx;background-color:transparent;"><ins id="aswift_0_anchor" style="display:block;border:none;height:NaNpx;margin:0;padding:0;position:relative;visibility:visible;width:NaNpx;background-color:transparent;"><iframe frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;width:NaNpx;height:NaNpx;" src="./【Guava 教學】（6）不可變群集_files/saved_resource(4).html"></iframe></ins></ins></ins><script id="wappalyzer" src="chrome-extension://gppongmhjkpfnbhagpmjfkannfbllamg/js/inject.js"></script><table cellspacing="0" cellpadding="0" class="gstl_50 gssb_c" style="width: 122px; display: none; top: 148px; left: 0px; position: absolute;"><tbody><tr><td class="gssb_f"></td><td class="gssb_e" style="width: 100%;"></td></tr></tbody></table></body></html>