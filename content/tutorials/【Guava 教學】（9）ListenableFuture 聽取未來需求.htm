<!DOCTYPE html>
<!-- saved from url=(0071)https://openhome.cc/Gossip/CodeData/GuavaTutorial/ListenableFuture.html -->
<html lang="zh-tw"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="【Guava 教學】（8）你需要的其實是範圍（Range）？ &lt;&lt; 前情
      
      在許多語言中，多少都內建了一些非同步處理的方案，像是 Java，在 JDK...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="【Guava 教學】（9）ListenableFuture 聽取未來需求">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/CodeData/GuavaTutorial/ListenableFuture.html">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="【Guava 教學】（8）你需要的其實是範圍（Range）？ &lt;&lt; 前情
      
      在許多語言中，多少都內建了一些非同步處理的方案，像是 Java，在 JDK...">


    <title>【Guava 教學】（9）ListenableFuture 聽取未來需求</title>

<link rel="stylesheet" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/caterpillar.css">
     
<!-- 網頁層級廣告 --><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/async-ads.js"></script><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/analytics.js"></script><script src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/ca-pub-9750319131714390.js"></script><script type="text/javascript" async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/cse.js"></script><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script><link rel="stylesheet" type="text/css" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/prettify.css"><link rel="preload" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/integrator.js" as="script"><script type="text/javascript" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/integrator.js"></script><link rel="preload" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/integrator(1).js" as="script"><script type="text/javascript" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/integrator(1).js"></script><script src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/jsapi" type="text/javascript"></script><link type="text/css" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/default+zh_TW.css" rel="stylesheet"><link type="text/css" href="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/default.css" rel="stylesheet"><script type="text/javascript" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/default+zh_TW.I.js"></script><style type="text/css">.gsc-control-cse{font-family:Arial, sans-serif;border-color:#FFFFFF;background-color:#FFFFFF}.gsc-control-cse .gsc-table-result{font-family:Arial, sans-serif}input.gsc-input{border-color:#BCCDF0}input.gsc-search-button{border-color:#666666;background-color:#CECECE}.gsc-tabHeader.gsc-tabhInactive{border-color:#E9E9E9;background-color:#E9E9E9}.gsc-tabHeader.gsc-tabhActive{border-top-color:#FF9900;border-left-color:#E9E9E9;border-right-color:#E9E9E9;background-color:#FFFFFF}.gsc-tabsArea{border-color:#E9E9E9;}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#336699;background-color:#FFFFFF}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#0000CC;background-color:#FFFFFF}.gsc-webResult.gsc-result.gsc-promotion:hover{border-color:#0000CC;background-color:#FFFFFF}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#0000FF}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#663399}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#0000CC}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#0000CC}.gsc-cursor-page{color:#0000FF}a.gsc-trailing-more-results:link{color:#0000FF}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#000000}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#008000}.gs-webResult div.gs-visibleUrl-short{color:#008000}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#336699}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#E9E9E9;background-color:#FFFFFF;color:#0000FF}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#FF9900;background-color:#FFFFFF;color:#663399}.gsc-webResult.gsc-result.gsc-promotion{border-color:#336699;background-color:#FFFFFF}.gsc-completion-title{color:#0000FF}.gsc-completion-snippet{color:#000000}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#0000FF}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#663399}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#0000FF}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#0000FF}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#000000}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#008000}</style><style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-webkit-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gsq_a{padding:0}.gscsep_a{display:none}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em;-webkit-appearance:button}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gssb_a{padding:0 7px}.gssb_e{border:0}.gssb_l{margin:5px 0}input.gsc-input::-webkit-input-placeholder{font-size:14px}input.gsc-input:-moz-placeholder{font-size:14px}input.gsc-input::-moz-placeholder{font-size:14px}input.gsc-input:-ms-input-placeholder{font-size:14px}input.gsc-input:focus::-webkit-input-placeholder{color:transparent}input.gsc-input:focus:-moz-placeholder{color:transparent}input.gsc-input:focus::-moz-placeholder{color:transparent}input.gsc-input:focus:-ms-input-placeholder{color:transparent}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="https://openhome.cc/Gossip/CodeData/GuavaTutorial/ListenableFuture.html#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/CodeData/GuavaTutorial/index.html">回 Guava Tutorial</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/facebook.png"></a> <a href="https://plus.google.com/+JustinSDK/"><img title="Google+" alt="Google+" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/google.png"></a></div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><div id="___gcse_0"><div class="gsc-control-searchbox-only gsc-control-searchbox-only-zh_TW" dir="ltr"><form class="gsc-search-box" accept-charset="utf-8"><table cellspacing="0" cellpadding="0" class="gsc-search-box"><tbody><tr><td class="gsc-input"><input autocomplete="off" type="text" size="10" class=" gsc-input" name="search" title="搜尋" id="gsc-i-id1" x-webkit-speech="" x-webkit-grammar="builtin:search" lang="zh_TW" dir="ltr" spellcheck="false" placeholder="自訂搜尋" style="outline: none; background: url(&quot;https://www.google.com/cse/static/images/1x/googlelogo_lightgrey_46x16dp.png&quot;) left center no-repeat rgb(255, 255, 255); text-indent: 48px;"></td><td class="gsc-search-button"><input type="button" value="搜尋" class="gsc-search-button" title="搜尋"></td><td class="gsc-clear-button"><div class="gsc-clear-button" title="清除結果">&nbsp;</div></td></tr></tbody></table></form></div></div></div><br><div class="ad" style="text-align: center;"><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent;"><iframe width="160" height="600" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;width:160px;height:600px;" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/saved_resource.html"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>【Guava 教學】（9）ListenableFuture 聽取未來需求</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display: block; height: 90px;" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto" data-adsbygoogle-status="done"><ins id="aswift_2_expand" style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><ins id="aswift_2_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><iframe width="800" height="90" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;width:800px;height:90px;" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/saved_resource(1).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             
      <br>
      <span style="line-height: 1.714285714; font-size: 1rem;">在許多語言中，多少都內建了一些非同步處理的方案，像是 Java，在 JDK5 後為了簡化非同步處理，提出了 </span><code style="line-height: 1.714285714;">Future</code><span style="line-height: 1.714285714; font-size: 1rem;"> 等相關 API，舉個例子來說，如果你要非同步地讀取文字檔案，在檔案讀取完後做某些事，直接使用 </span><code style="line-height: 1.714285714;">Future</code><span style="line-height: 1.714285714; font-size: 1rem;"> 實作可能會是類似以下的流程：</span>
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> readFile</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> file</span><span class="pun">,</span><span class="pln"> 
         </span><span class="typ">Consumer</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> success</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Consumer</span><span class="pun">&lt;</span><span class="typ">Throwable</span><span class="pun">&gt;</span><span class="pln"> fail</span><span class="pun">,</span><span class="pln"> </span><span class="typ">ExecutorService</span><span class="pln"> service</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        service</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                success</span><span class="pun">.</span><span class="pln">accept</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="typ">Files</span><span class="pun">.</span><span class="pln">readAllBytes</span><span class="pun">(</span><span class="typ">Paths</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="pln">file</span><span class="pun">))));</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IOException</span><span class="pln"> ex</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                fail</span><span class="pun">.</span><span class="pln">accept</span><span class="pun">(</span><span class="pln">ex</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">});</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      這麼一來，你就可以用類似 Node.js 的風格來讀取一個文字檔案：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pln">readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> 
    content </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">content</span><span class="pun">),</span><span class="pln">  </span><span class="com">// success</span><span class="pln">
    ex </span><span class="pun">-&gt;</span><span class="pln"> ex</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">(),</span><span class="pln">       </span><span class="com">// error</span><span class="pln">
    </span><span class="typ">Executors</span><span class="pun">.</span><span class="pln">newFixedThreadPool</span><span class="pun">(</span><span class="lit">10</span><span class="pun">)</span><span class="pln">
</span><span class="pun">);</span></code></pre>
      可以看到，就算搭配了 JDK8 的 Lambda，使用 <code>Future</code> 來實作 <code>readFile</code> 方法，也是囉嗦了一些。JDK7 新增了 <code>AsynchronousFileChannel</code>，可以有類似風格的撰寫方式，不過必須搭配 NIO 相關 API 來使用，就標準 API 來說，沒能讓這類需求在實作時淺顯易讀。<br>
      Guava 的 <code>ListenableFuture</code> 是一種 <code>Future</code>，可搭配 Guava 的 <code>ListeningExecutorService</code> 來使用，<code>ListeningExecutorService</code> 的 <code>submit</code> 方法會傳回 <code>ListenableFuture</code> 實例，可使用 <code>Futures</code> 類別的 <code>addCallback</code> 方法設定 <code>FutureCallback</code> 來處理任務執行成功與失敗時的處理器。例如用 Guava 的這些 API 重新實作以上的 <code>readFile</code> 方法會像是：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> readFile</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> file</span><span class="pun">,</span><span class="pln"> 
                        </span><span class="typ">Consumer</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> success</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Consumer</span><span class="pun">&lt;</span><span class="typ">Throwable</span><span class="pun">&gt;</span><span class="pln"> fail</span><span class="pun">,</span><span class="pln"> 
                        </span><span class="typ">ListeningExecutorService</span><span class="pln"> service</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

        </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> future </span><span class="pun">=</span><span class="pln"> service</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(</span><span class="pln">
            </span><span class="pun">()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="typ">Files</span><span class="pun">.</span><span class="pln">readAllBytes</span><span class="pun">(</span><span class="typ">Paths</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="pln">file</span><span class="pun">)))</span><span class="pln">
        </span><span class="pun">);</span><span class="pln">

        </span><span class="typ">Futures</span><span class="pun">.</span><span class="pln">addCallback</span><span class="pun">(</span><span class="pln">future</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FutureCallback</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onSuccess</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> content</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                success</span><span class="pun">.</span><span class="pln">accept</span><span class="pun">(</span><span class="pln">content</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onFailure</span><span class="pun">(</span><span class="typ">Throwable</span><span class="pln"> thrown</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                fail</span><span class="pun">.</span><span class="pln">accept</span><span class="pun">(</span><span class="pln">thrown</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">});</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      <code>readFile</code> 的實作簡化且清楚多了，這麼一來，你就可以用以下風格來讀取一個文字檔案：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pln">readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> 
    content </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">content</span><span class="pun">),</span><span class="pln">  </span><span class="com">// success</span><span class="pln">
    ex </span><span class="pun">-&gt;</span><span class="pln"> ex</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">(),</span><span class="pln">       </span><span class="com">// error</span><span class="pln">
    </span><span class="typ">MoreExecutors</span><span class="pun">.</span><span class="pln">listeningDecorator</span><span class="pun">(</span><span class="typ">Executors</span><span class="pun">.</span><span class="pln">newFixedThreadPool</span><span class="pun">(</span><span class="lit">10</span><span class="pun">))</span><span class="pln">
</span><span class="pun">);</span></code></pre>
      然而在非同步操作使用回呼（Callback）風格，在每次回呼中又再度進行非同步操作及回呼，很容易寫出回呼地獄（Callback hell），造成可讀性不佳。例如若有個類似 <code>readFile</code> 風格的非同步 <code>asyncProcess</code> 方法，用來再繼續處理 <code>readFile</code> 讀取的檔案內容，那麼可能撰寫出以下的程式碼：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pln">readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln">
    content </span><span class="pun">-&gt;</span><span class="pln"> asyncProcess</span><span class="pun">(</span><span class="pln">content</span><span class="pun">,</span><span class="pln">
                            processedContent </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">processedContent</span><span class="pun">)</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
                            errorHandler</span><span class="pun">,</span><span class="pln"> service</span><span class="pun">),</span><span class="pln">
    errorHandler</span><span class="pun">,</span><span class="pln"> service</span><span class="pun">);</span></code></pre>
      為了避免可讀性變差的問題，你可以使用&nbsp;<code>Futures.transform</code> 來進行相關回呼操作的組合，不過，若你照著 <a href="https://code.google.com/p/guava-libraries/wiki/ListenableFutureExplained">ListenableFutureExplained</a> 文件中的說明來撰寫程式，也許會困惑，雖然使用 Guava 的 API 是有簡化了一些，不過可讀性好像還是有些差，其實你可以自行再做一些封裝。例如自行撰寫一個&nbsp;<code>asyncFuncFuture</code> 與 <code>asyncComposeFuture</code> 方法：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">....</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">R</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="pln">R</span><span class="pun">&gt;</span><span class="pln"> asyncFuncFuture</span><span class="pun">(</span><span class="typ">Callable</span><span class="pun">&lt;</span><span class="pln">R</span><span class="pun">&gt;</span><span class="pln"> callable</span><span class="pun">,</span><span class="pln">
                                 </span><span class="typ">ListeningExecutorService</span><span class="pln"> service</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> service</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> callable</span><span class="pun">.</span><span class="pln">call</span><span class="pun">());</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="pln">R</span><span class="pun">&gt;</span><span class="pln"> asyncComposeFuture</span><span class="pun">(</span><span class="pln">
                            </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">&gt;</span><span class="pln"> future</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Function</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> f</span><span class="pun">,</span><span class="pln">
                            </span><span class="typ">ListeningExecutorService</span><span class="pln"> service</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

        </span><span class="typ">AsyncFunction</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> asyncFunc </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AsyncFunction</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="pln">R</span><span class="pun">&gt;</span><span class="pln"> apply</span><span class="pun">(</span><span class="pln">P content</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> service</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> f</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="pln">content</span><span class="pun">));</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">};</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Futures</span><span class="pun">.</span><span class="pln">transform</span><span class="pun">(</span><span class="pln">future</span><span class="pun">,</span><span class="pln"> asyncFunc</span><span class="pun">,</span><span class="pln"> service</span><span class="pun">);</span><span class="pln">

    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">....</span></code></pre>
      你可以傳給 <code>asyncFuncFuture</code> 一個函式物件，它會傳回 <code>ListenableFuture</code> 物件，用以非同步地執行你指定的函式物件，<code>asyncComposeFuture</code> 則用來將一個 <code>ListenableFuture</code> 物件的結果，以及一個希望非同步執行的函式物件組合在一起，實作中最後利用的是 <code>Futures.transfor</code> 再度傳回 <code>ListenableFuture</code> 物件，因此你可以一直組裝下去。<br>
      有了 <code>asyncFuncFuture</code> 與 <code>asyncComposeFuture</code> 方法，接下來你就可以這麼撰寫程式了：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
    </span><span class="typ">ListeningExecutorService</span><span class="pln"> service </span><span class="pun">=</span><span class="pln"> 
        </span><span class="typ">MoreExecutors</span><span class="pun">.</span><span class="pln">listeningDecorator</span><span class="pun">(</span><span class="typ">Executors</span><span class="pun">.</span><span class="pln">newFixedThreadPool</span><span class="pun">(</span><span class="lit">10</span><span class="pun">));</span><span class="pln">

    </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> contentFuture </span><span class="pun">=</span><span class="pln"> asyncFuncFuture</span><span class="pun">(</span><span class="pln">
        </span><span class="pun">()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="typ">Files</span><span class="pun">.</span><span class="pln">readAllBytes</span><span class="pun">(</span><span class="typ">Paths</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]))),</span><span class="pln"> service</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> processedContentFuture </span><span class="pun">=</span><span class="pln"> 
        asyncComposeFuture</span><span class="pun">(</span><span class="pln">contentFuture</span><span class="pun">,</span><span class="pln"> content </span><span class="pun">-&gt;</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">content</span><span class="pun">),</span><span class="pln"> service</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">Futures</span><span class="pun">.</span><span class="pln">addCallback</span><span class="pun">(</span><span class="pln">processedContentFuture</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FutureCallback</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onSuccess</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> result</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onFailure</span><span class="pun">(</span><span class="typ">Throwable</span><span class="pln"> t</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            t</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      在撰寫非同步處理時，其實有許多方面在考量上與同步處理是不同的，可讀性是一個問題，上面的 <code>asyncFuncFuture</code> 與 <code>asyncComposeFuture</code> 方法的實作方式，主要在實現可組裝的（Composable） <code>Future</code> 物件，不同程式語言實現可組裝性的方式不同，Guava 主要是透過 <code>ListenableFuture</code> 等 API，未來 JDK8 則有個 <code>CompletableFuture</code>，JavaScript 有不少程式庫可以實現這類組裝性，例如 q 程式庫等，你可以看看 <a href="http://www.javaworld.com.tw/roller/ingramchen/entry/composable_future_api">Composable Future API</a> 這篇文章中也有相關介紹。<br>
      有時候你會想要非同步但按照順序地執行一連串任務，例如非同步地讀取一連串檔案，但讀取時按照指定的順序：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pln">readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln">
                content1 </span><span class="pun">-&gt;</span><span class="pln"> readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">1</span><span class="pun">],</span><span class="pln"> 
                                  content2 </span><span class="pun">-&gt;</span><span class="pln"> readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">2</span><span class="pun">],</span><span class="pln">
                                              content3 </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="com">/* 依序處理 content1, content2 與 content3 */</span><span class="pln"> </span><span class="pun">,</span><span class="pln">
                                              errHandler</span><span class="pun">,</span><span class="pln"> service</span><span class="pun">),</span><span class="pln"> 
                                  errHandler</span><span class="pun">,</span><span class="pln"> service</span><span class="pun">),</span><span class="pln">
                errHandler</span><span class="pun">,</span><span class="pln"> service</span><span class="pun">);</span></code></pre>
      在最後一次的回呼中，才會依序處理 <code>content1</code>、<code>content2</code>、<code>content3</code>，如果是這樣的話，你可以使用 Guava 的 <code>Futures.allAsList</code> 寫一個 <code>readAllFiles</code>：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> readAllFiles</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> files</span><span class="pun">,</span><span class="pln">
                               </span><span class="typ">Consumer</span><span class="pun">&lt;</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;&gt;</span><span class="pln"> success</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Consumer</span><span class="pun">&lt;</span><span class="typ">Throwable</span><span class="pun">&gt;</span><span class="pln"> fail</span><span class="pun">,</span><span class="pln">
                               </span><span class="typ">ListeningExecutorService</span><span class="pln"> service</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;&gt;</span><span class="pln"> listenables </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">&lt;&gt;(</span><span class="pln">files</span><span class="pun">.</span><span class="pln">length</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">for</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> file </span><span class="pun">:</span><span class="pln"> files</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        listenables</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="pln">service</span><span class="pun">.</span><span class="pln">submit</span><span class="pun">(</span><span class="pln">
            </span><span class="pun">()</span><span class="pln"> </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">String</span><span class="pun">(</span><span class="typ">Files</span><span class="pun">.</span><span class="pln">readAllBytes</span><span class="pun">(</span><span class="typ">Paths</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="pln">file</span><span class="pun">)))</span><span class="pln">
        </span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="typ">ListenableFuture</span><span class="pun">&lt;</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;&gt;</span><span class="pln"> contentsFuture </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Futures</span><span class="pun">.</span><span class="pln">allAsList</span><span class="pun">(</span><span class="pln">listenables</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Futures</span><span class="pun">.</span><span class="pln">addCallback</span><span class="pun">(</span><span class="pln">contentsFuture</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FutureCallback</span><span class="pun">&lt;</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onSuccess</span><span class="pun">(</span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> contents</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            success</span><span class="pun">.</span><span class="pln">accept</span><span class="pun">(</span><span class="pln">contents</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> onFailure</span><span class="pun">(</span><span class="typ">Throwable</span><span class="pln"> thrwb</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            fail</span><span class="pun">.</span><span class="pln">accept</span><span class="pun">(</span><span class="pln">thrwb</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      這麼一來，你就可以使用這個 <code>readAllFiles</code> 來讓程式更容易閱讀：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pln">readAllFiles</span><span class="pun">(</span><span class="pln">args</span><span class="pun">,</span><span class="pln"> 
            contents </span><span class="pun">-&gt;</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">contents</span><span class="pun">),</span><span class="pln"> 
            ex </span><span class="pun">-&gt;</span><span class="pln"> ex</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">(),</span><span class="pln"> service</span><span class="pun">);</span></code></pre>
      實際上非同步處理時要注意的事項不只如此，可否注意到第一個的程式碼示範如何處理例外？<code>readFile</code> 在錯誤發生時，是將例外物件傳給指定的錯誤處理器，而不是從 <code>Runnable</code> 物件的 <code>run</code> 方法中重新拋出。因為是非同步，如果你設計 <code>readFile</code> 時，在錯誤發生時重新拋出例外，並希望你的客戶端如此處理例外的話：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="pun">...</span><span class="pln">
</span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    readFile</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> content </span><span class="pun">-&gt;</span><span class="pln"> process</span><span class="pun">(</span><span class="pln">content</span><span class="pun">),</span><span class="pln"> service</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> ex</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// 處理錯誤</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      實際上 <code>readFile</code> 是非同步地執行，因此不會阻斷（Blocked），程式會繼續離開 <code>try-catch</code>，因而實際例外發生時，早就不受 <code>try-catch</code> 的控制；在使用 Guava 的 <code>FutureCallback</code> 時，也切記別讓 <code>onFailure</code> 的實作空白，因為這就與實作 <code>try-catch</code> 時將 <code>catch</code> 留白沒兩樣。<br>
      類似這類與同步與非同步程式執行習慣不同的情況還有不少…大部份情況下，我們都習慣同步處理，面對非同步處理時，還有不少要學習的地方，JDK5 之後有了些標準 API 可以使用，一直到 JDK8 還在補充，可見得非同步處理日益重要，像 Guava 這類的程式庫也有不少簡化之處，然而最重要的，還是我們的思考方式，沒有這層思考，使用 Guava 只是少打了幾個字，可讀性也不見得會好到哪裡去，有了這層思考，在打造自己程式的可讀性時，使用 Guava 這類的程式庫，才可以得到它簡化上的益處。<br><br><br><div class="ad336-280" style="text-align: center;"><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681" data-adsbygoogle-status="done"><ins id="aswift_3_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent;"><ins id="aswift_3_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent;"><iframe width="336" height="280" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;width:336px;height:280px;" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/saved_resource(2).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async="" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display: block; height: 480px;" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed" data-adsbygoogle-status="done"><ins id="aswift_4_expand" style="display:inline-table;border:none;height:480px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><ins id="aswift_4_anchor" style="display:block;border:none;height:480px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><iframe width="800" height="480" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_4" name="aswift_4" style="left:0;position:absolute;top:0;width:800px;height:480px;" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/saved_resource(3).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div><ins class="adsbygoogle" data-adsbygoogle-status="done" style="display: none;"><ins id="aswift_0_expand" style="display:inline-table;border:none;height:NaNpx;margin:0;padding:0;position:relative;visibility:visible;width:NaNpx;background-color:transparent;"><ins id="aswift_0_anchor" style="display:block;border:none;height:NaNpx;margin:0;padding:0;position:relative;visibility:visible;width:NaNpx;background-color:transparent;"><iframe frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;width:NaNpx;height:NaNpx;" src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/saved_resource(4).html"></iframe></ins></ins></ins>
<script src="./【Guava 教學】（9）ListenableFuture 聽取未來需求_files/ui.js"></script>

<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-143766-1', 'auto');
  ga('send', 'pageview');

</script>
</div>
<script id="wappalyzer" src="chrome-extension://gppongmhjkpfnbhagpmjfkannfbllamg/js/inject.js"></script><table cellspacing="0" cellpadding="0" class="gstl_50 gssb_c" style="width: 122px; display: none; top: 148px; left: 0px; position: absolute;"><tbody><tr><td class="gssb_f"></td><td class="gssb_e" style="width: 100%;"></td></tr></tbody></table></body></html>