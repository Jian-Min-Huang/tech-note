<!DOCTYPE html>
<!-- saved from url=(0063)https://openhome.cc/Gossip/CodeData/GuavaTutorial/Ordering.html -->
<html lang="zh-tw"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="【Guava 教學】（2）命名明確的條件檢查 &lt;&lt; 前情
      排名這種東西，人類還蠻愛的，到了程式設計領域，排序這東西依舊舉足輕重。在 Java 中要進行排序，可以使用...">

<meta property="og:locale" content="zh_TW">
<meta property="og:title" content="【Guava 教學】（3）高階排序概念的實現">
<meta property="og:type" content="article">
<meta property="og:url" content="https://openhome.cc/Gossip/CodeData/GuavaTutorial/Ordering.html">
<meta property="og:image" content="https://openhome.cc/Gossip/images/caterpillar_small.jpg">
<meta property="og:site_name" content="OPENHOME.CC">
<meta property="og:description" content="【Guava 教學】（2）命名明確的條件檢查 &lt;&lt; 前情
      排名這種東西，人類還蠻愛的，到了程式設計領域，排序這東西依舊舉足輕重。在 Java 中要進行排序，可以使用...">


    <title>【Guava 教學】（3）高階排序概念的實現</title>

<link rel="stylesheet" href="./【Guava 教學】（3）高階排序概念的實現_files/pure-min.css">

    <!--[if lte IE 8]>
        <link rel="stylesheet" href="../../css/layouts/side-menu-old-ie.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="./【Guava 教學】（3）高階排序概念的實現_files/side-menu.css">
    <!--<![endif]-->
  

     <link rel="stylesheet" href="./【Guava 教學】（3）高階排序概念的實現_files/caterpillar.css">
     <script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/async-ads.js"></script><script src="./【Guava 教學】（3）高階排序概念的實現_files/ca-pub-9750319131714390.js"></script><script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/analytics.js"></script><script type="text/javascript" async="" src="./【Guava 教學】（3）高階排序概念的實現_files/cse.js"></script>
<!-- 網頁層級廣告 --><script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/adsbygoogle.js"></script><script>(adsbygoogle =window.adsbygoogle || []).push({google_ad_client: "ca-pub-9750319131714390",enable_page_level_ads: true });</script><link rel="stylesheet" type="text/css" href="./【Guava 教學】（3）高階排序概念的實現_files/prettify.css"><link rel="preload" href="./【Guava 教學】（3）高階排序概念的實現_files/integrator.js" as="script"><script type="text/javascript" src="./【Guava 教學】（3）高階排序概念的實現_files/integrator.js"></script><link rel="preload" href="./【Guava 教學】（3）高階排序概念的實現_files/integrator(1).js" as="script"><script type="text/javascript" src="./【Guava 教學】（3）高階排序概念的實現_files/integrator(1).js"></script><script src="./【Guava 教學】（3）高階排序概念的實現_files/jsapi" type="text/javascript"></script><link type="text/css" href="./【Guava 教學】（3）高階排序概念的實現_files/default+zh_TW.css" rel="stylesheet"><link type="text/css" href="./【Guava 教學】（3）高階排序概念的實現_files/default.css" rel="stylesheet"><script type="text/javascript" src="./【Guava 教學】（3）高階排序概念的實現_files/default+zh_TW.I.js"></script><style type="text/css">.gsc-control-cse{font-family:Arial, sans-serif;border-color:#FFFFFF;background-color:#FFFFFF}.gsc-control-cse .gsc-table-result{font-family:Arial, sans-serif}input.gsc-input{border-color:#BCCDF0}input.gsc-search-button{border-color:#666666;background-color:#CECECE}.gsc-tabHeader.gsc-tabhInactive{border-color:#E9E9E9;background-color:#E9E9E9}.gsc-tabHeader.gsc-tabhActive{border-top-color:#FF9900;border-left-color:#E9E9E9;border-right-color:#E9E9E9;background-color:#FFFFFF}.gsc-tabsArea{border-color:#E9E9E9;}.gsc-webResult.gsc-result,.gsc-results .gsc-imageResult{border-color:#336699;background-color:#FFFFFF}.gsc-webResult.gsc-result:hover,.gsc-imageResult:hover{border-color:#0000CC;background-color:#FFFFFF}.gsc-webResult.gsc-result.gsc-promotion:hover{border-color:#0000CC;background-color:#FFFFFF}.gs-webResult.gs-result a.gs-title:link,.gs-webResult.gs-result a.gs-title:link b,.gs-imageResult a.gs-title:link,.gs-imageResult a.gs-title:link b{color:#0000FF}.gs-webResult.gs-result a.gs-title:visited,.gs-webResult.gs-result a.gs-title:visited b,.gs-imageResult a.gs-title:visited,.gs-imageResult a.gs-title:visited b{color:#663399}.gs-webResult.gs-result a.gs-title:hover,.gs-webResult.gs-result a.gs-title:hover b,.gs-imageResult a.gs-title:hover,.gs-imageResult a.gs-title:hover b{color:#0000CC}.gs-webResult.gs-result a.gs-title:active,.gs-webResult.gs-result a.gs-title:active b,.gs-imageResult a.gs-title:active,.gs-imageResult a.gs-title:active b{color:#0000CC}.gsc-cursor-page{color:#0000FF}a.gsc-trailing-more-results:link{color:#0000FF}.gs-webResult .gs-snippet,.gs-imageResult .gs-snippet,.gs-fileFormatType{color:#000000}.gs-webResult div.gs-visibleUrl,.gs-imageResult div.gs-visibleUrl{color:#008000}.gs-webResult div.gs-visibleUrl-short{color:#008000}.gs-webResult div.gs-visibleUrl-short{display:none}.gs-webResult div.gs-visibleUrl-long{display:block}.gs-promotion div.gs-visibleUrl-short{display:none}.gs-promotion div.gs-visibleUrl-long{display:block}.gsc-cursor-box{border-color:#336699}.gsc-results .gsc-cursor-box .gsc-cursor-page{border-color:#E9E9E9;background-color:#FFFFFF;color:#0000FF}.gsc-results .gsc-cursor-box .gsc-cursor-current-page{border-color:#FF9900;background-color:#FFFFFF;color:#663399}.gsc-webResult.gsc-result.gsc-promotion{border-color:#336699;background-color:#FFFFFF}.gsc-completion-title{color:#0000FF}.gsc-completion-snippet{color:#000000}.gs-promotion a.gs-title:link,.gs-promotion a.gs-title:link *,.gs-promotion .gs-snippet a:link{color:#0000FF}.gs-promotion a.gs-title:visited,.gs-promotion a.gs-title:visited *,.gs-promotion .gs-snippet a:visited{color:#663399}.gs-promotion a.gs-title:hover,.gs-promotion a.gs-title:hover *,.gs-promotion .gs-snippet a:hover{color:#0000FF}.gs-promotion a.gs-title:active,.gs-promotion a.gs-title:active *,.gs-promotion .gs-snippet a:active{color:#0000FF}.gs-promotion .gs-snippet,.gs-promotion .gs-title .gs-promotion-title-right,.gs-promotion .gs-title .gs-promotion-title-right *{color:#000000}.gs-promotion .gs-visibleUrl,.gs-promotion .gs-visibleUrl-short{color:#008000}</style><style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-webkit-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gsq_a{padding:0}.gscsep_a{display:none}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em;-webkit-appearance:button}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gssb_a{padding:0 7px}.gssb_e{border:0}.gssb_l{margin:5px 0}input.gsc-input::-webkit-input-placeholder{font-size:14px}input.gsc-input:-moz-placeholder{font-size:14px}input.gsc-input::-moz-placeholder{font-size:14px}input.gsc-input:-ms-input-placeholder{font-size:14px}input.gsc-input:focus::-webkit-input-placeholder{color:transparent}input.gsc-input:focus:-moz-placeholder{color:transparent}input.gsc-input:focus::-moz-placeholder{color:transparent}input.gsc-input:focus:-ms-input-placeholder{color:transparent}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style></head>
<body>

<div id="layout">
    <!-- Menu toggle -->
    <a href="https://openhome.cc/Gossip/CodeData/GuavaTutorial/Ordering.html#menu" id="menuLink" class="menu-link">
        <!-- Hamburger icon --><span></span>
        
    </a>
    <div id="menu">
        <div class="pure-menu">
            <a class="pure-menu-heading" href="https://openhome.cc/Gossip/CodeData/GuavaTutorial/index.html">回 Guava Tutorial</a>
            <ul class="pure-menu-list">
                <br><div class="social" style="text-align: center;"><a href="http://twitter.com/caterpillar"><img title="Twitter" alt="Twitter" src="./【Guava 教學】（3）高階排序概念的實現_files/twitter.png"></a> <a href="http://www.facebook.com/openhome.cc"><img title="Facebook" alt="Facebook" src="./【Guava 教學】（3）高階排序概念的實現_files/facebook.png"></a> <a href="https://plus.google.com/+JustinSDK/"><img title="Google+" alt="Google+" src="./【Guava 教學】（3）高階排序概念的實現_files/google.png"></a></div><br><div id="search box"><script>(function() {var cx = 'partner-pub-9750319131714390:3926766884';var gcse = document.createElement('script');gcse.type = 'text/javascript';gcse.async = true;gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//www.google.com/cse/cse.js?cx=' + cx;var s = document.getElementsByTagName('script')[0];s.parentNode.insertBefore(gcse, s);})();</script><div id="___gcse_0"><div class="gsc-control-searchbox-only gsc-control-searchbox-only-zh_TW" dir="ltr"><form class="gsc-search-box" accept-charset="utf-8"><table cellspacing="0" cellpadding="0" class="gsc-search-box"><tbody><tr><td class="gsc-input"><input autocomplete="off" type="text" size="10" class=" gsc-input" name="search" title="搜尋" id="gsc-i-id1" x-webkit-speech="" x-webkit-grammar="builtin:search" lang="zh_TW" dir="ltr" spellcheck="false" placeholder="自訂搜尋" style="outline: none; background: url(&quot;https://www.google.com/cse/static/images/1x/googlelogo_lightgrey_46x16dp.png&quot;) left center no-repeat rgb(255, 255, 255); text-indent: 48px;"></td><td class="gsc-search-button"><input type="button" value="搜尋" class="gsc-search-button" title="搜尋"></td><td class="gsc-clear-button"><div class="gsc-clear-button" title="清除結果">&nbsp;</div></td></tr></tbody></table></form></div></div></div><br><div class="ad" style="text-align: center;"><script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/adsbygoogle.js"></script>
<!-- 2015 新版型 160 x 600 廣告 -->
<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent;"><iframe width="160" height="600" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;width:160px;height:600px;" src="./【Guava 教學】（3）高階排序概念的實現_files/saved_resource.html"></iframe></ins></ins></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></div>
            </ul>
        </div>
    </div>

    <main id="main">
        <header class="header">
            <h1>【Guava 教學】（3）高階排序概念的實現</h1>
        </header>

        <article class="content"><br><div class="ad-3" style="text-align: center;"><script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/adsbygoogle.js"></script><!-- 2015 新版型回應式廣告 --><ins class="adsbygoogle" style="display: block; height: 90px;" data-ad-client="ca-pub-9750319131714390" data-ad-slot="7104125683" data-ad-format="auto" data-adsbygoogle-status="done"><ins id="aswift_2_expand" style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><ins id="aswift_2_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><iframe width="800" height="90" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;width:800px;height:90px;" src="./【Guava 教學】（3）高階排序概念的實現_files/saved_resource(1).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div> 
             <br>
      排名這種東西，人類還蠻愛的，到了程式設計領域，排序這東西依舊舉足輕重。在 Java 中要進行排序，可以使用標準 API 中 <code>Collections</code> 的 <code>sort</code> 方法，使用前必須遵守的協定是物件本身必須有天生的順序（Natural ordering），也就是必須擁有 <code>Comparable</code> 的行為，語法上具體來說，就是必須實作 <code>Comparable</code> 介面。由於 <code>Collections</code> 已經實作了排序演算法，你只需要告訴它，如果物件要與另一個物件比較時，順序上哪個大哪個小，也就是 <code>compareTo</code> 傳回 1、0、-1 分別來告訴它，順序上物件比另一物件大、相等或小。<br>
      用三個值來表示順序，蠻方便的，不是嗎？並不是！有多少次你弄錯了 1、0、-1 的意義呢？實際上，排序的要求還蠻多的，例如你可能想要排序時先依某人的姓來排，如果姓相同再依名來排，如果姓名都相同，再依他們居住地的郵遞區號來排，那你就可能會寫出像&nbsp;<a href="https://code.google.com/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#compare/compareTo">compare/compareTo</a> 中的程式碼：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparable</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> zipCode</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compareTo</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> other</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">int</span><span class="pln"> cmp </span><span class="pun">=</span><span class="pln"> lastName</span><span class="pun">.</span><span class="pln">compareTo</span><span class="pun">(</span><span class="pln">other</span><span class="pun">.</span><span class="pln">lastName</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmp </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> cmp</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    cmp </span><span class="pun">=</span><span class="pln"> firstName</span><span class="pun">.</span><span class="pln">compareTo</span><span class="pun">(</span><span class="pln">other</span><span class="pun">.</span><span class="pln">firstName</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmp </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> cmp</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">zipCode</span><span class="pun">,</span><span class="pln"> other</span><span class="pun">.</span><span class="pln">zipCode</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      你覺得 <code>compareTo</code> 好讀嗎？如果你學過 SQL，應該知道有 <code>ORDER BY</code> 這東西，相較之下，<code>compareTo</code> 的邏輯並不清楚，如果你使用 Guava 的&nbsp;<code>ComparisonChain</code>，可以寫成這樣：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">google</span><span class="pun">.</span><span class="pln">common</span><span class="pun">.</span><span class="pln">collect</span><span class="pun">.</span><span class="typ">ComparisonChain</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Person</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparable</span><span class="pun">&lt;</span><span class="typ">Person</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> lastName</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> firstName</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> zipCode</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compareTo</span><span class="pun">(</span><span class="typ">Person</span><span class="pln"> other</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">ComparisonChain</span><span class="pun">.</span><span class="pln">start</span><span class="pun">()</span><span class="pln">
             </span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">lastName</span><span class="pun">,</span><span class="pln"> other</span><span class="pun">.</span><span class="pln">lastName</span><span class="pun">)</span><span class="pln">
             </span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">firstName</span><span class="pun">,</span><span class="pln"> other</span><span class="pun">.</span><span class="pln">firstName</span><span class="pun">)</span><span class="pln">
             </span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">zipCode</span><span class="pun">,</span><span class="pln"> other</span><span class="pun">.</span><span class="pln">zipCode</span><span class="pun">)</span><span class="pln">
           </span><span class="pun">.</span><span class="pln">result</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      <code>ComparisonChain</code> 的 <code>start</code> 與 <code>compare</code> 都會傳回 <code>ComparisonChain</code> 實例，在最後 <code>result</code> 計算結果時，就如原先 <code>compareTo</code> 的實作，會逐一比較要比較的對象，只要它們各自的 <code>compareTo</code> 不為 0 時就傳回結果。<br>
      Guava 在排序上提供了一些 API ，確實是很好用，不過這不是這篇文章要論述的，這邊要談的是，如何觀察並抽取出程式碼中更高階的抽象概念，像是排序這樣的東西，其實也一直重複著某些模式。上例中的模式就是：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">int</span><span class="pln"> cmp </span><span class="pun">=</span><span class="pln"> f1</span><span class="pun">.</span><span class="pln">compareTo</span><span class="pun">(</span><span class="pln">other</span><span class="pun">.</span><span class="pln">f1</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmp </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> cmp</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
cmp </span><span class="pun">=</span><span class="pln"> f2</span><span class="pun">.</span><span class="pln">compareTo</span><span class="pun">(</span><span class="pln">other</span><span class="pun">.</span><span class="pln">f2</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmp </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> cmp</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
cmp </span><span class="pun">=</span><span class="pln"> f3</span><span class="pun">.</span><span class="pln">compareTo</span><span class="pun">(</span><span class="pln">other</span><span class="pun">.</span><span class="pln">f3</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmp </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> cmp</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="pun">...</span></code></pre>
      談到模式，物件導向的開發者都會想到設計模式，想到有關創建、結構與行為模式。實際上寫程式時也有許多流程重複著一定模式，只是因為程式碼太混亂，程式區塊混著太多職責，而觀察不出來罷了，只要你能讓每段程式流程的職責單一化，就可以觀察並抽取出更高階的語義，像是這邊就可抽取出每個 <code>compare</code> 的語義，而這就是 <code>ComparisonChain<code> 在做的事，在使用它之前，你就像是在告訴電腦低階指令，1、0、-1？這什麼東西？在使用&nbsp;<code>ComparisonChain&nbsp;<code></code></code>之後，會比較像是在跟人說話了。</code></code><br>
      程式碼太混亂，程式區塊混著太多職責，觀察不出模式，抽取不出高階抽象的另一壞處就是，沒辦法重用某些基礎元素，沒辦法基於這些元素建構更複雜的的元素，因此，每次都得撰寫重複的東西。<br>
      舉例來說，如果你不想要用物件天生的順序進行排序，那麼 <code>Collections</code> 的 <code>sort</code> 還有另一個版本，可以指定一個比較器，也就是實現了 <code>Comparator</code> 介面的物件，它的 <code>compare</code> 方法也是得傳回 1、0、-1，告訴 <code>Collections</code> 的 <code>sort</code> 兩個被傳入的元素順序為何。例如，如果有個 <code>List</code> 中某些索引處包括 <code>null</code>，現在你打算讓 那些 <code>null</code> 排在最前頭，之後依字串的長度由大到小排序，那會怎麼寫？
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">StringLengthInverseNullFirstComparator</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="lit">@Override</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compare</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> s1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> s2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">s1 </span><span class="pun">==</span><span class="pln"> s2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">s1 </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">s2 </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">s1</span><span class="pun">.</span><span class="pln">length</span><span class="pun">()</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> s2</span><span class="pun">.</span><span class="pln">length</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">s1</span><span class="pun">.</span><span class="pln">length</span><span class="pun">()</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> s2</span><span class="pun">.</span><span class="pln">length</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> 
        </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      不怎麼好讀，對吧！更別說為了表示這個比較器的目的，必須取個又臭又長的類別名稱，雖然在必要的時候，不用去畏懼取個較長的名稱，不過名稱真的太長，長到影響可讀性，或者很難簡短地描述出它的意圖時，就得想一下，是不是它做了太多事了？<br>
      仔細想想，將 <code>null</code> 全部排序在前或者在後，其實是一種常見的需求，長度是個整數，本身就有由小至大的天生順序，如果要由大至小，就是反向排序，反向排序也是一個經常的需求。有沒有辦法將這些常見需求抽取出來呢？試試看！
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">Natural</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pun">&lt;</span><span class="typ">Comparable</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="lit">@Override</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compare</span><span class="pun">(</span><span class="typ">Comparable</span><span class="pln"> c1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Comparable</span><span class="pln"> c2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> c1</span><span class="pun">.</span><span class="pln">compareTo</span><span class="pun">(</span><span class="pln">c2</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Inverse</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> comparator</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Inverse</span><span class="pun">(</span><span class="typ">Comparator</span><span class="pln"> comparator</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">comparator </span><span class="pun">=</span><span class="pln"> comparator</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="lit">@Override</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compare</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> o1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> o2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">-</span><span class="pln">comparator</span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">o1</span><span class="pun">,</span><span class="pln"> o2</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">NullsFirst</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> LEFT_IS_GREATER </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> RIGHT_IS_GREATER </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> comparator</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">NullsFirst</span><span class="pun">(</span><span class="typ">Comparator</span><span class="pln"> comparator</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">comparator </span><span class="pun">=</span><span class="pln"> comparator</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="lit">@Override</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compare</span><span class="pun">(</span><span class="typ">Object</span><span class="pln"> o1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> o2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">o1 </span><span class="pun">==</span><span class="pln"> o2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">o1 </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> RIGHT_IS_GREATER</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">o2 </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> LEFT_IS_GREATER</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> comparator</span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">o1</span><span class="pun">,</span><span class="pln"> o2</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      <code>Natural</code>、<code>Inverse</code>、<code>NullsFirst</code> 都是從過去排序經驗中，不斷重現的流程模式中抽取出來的比較器，這樣一來，先前那個 <code>StringLengthInverseNullFirstComparator</code> 就可以基於它們來建構了：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">interface</span><span class="pln"> F1</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    R apply</span><span class="pun">(</span><span class="pln">P p</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">StringLengthInverseNullFirstComparator</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> comparator </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">NullsFirst</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Inverse</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Natural</span><span class="pun">()));</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> F1</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> F1</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="lit">@Override</span><span class="pln">
        </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> apply</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> p</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">return</span><span class="pln"> p </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> p</span><span class="pun">.</span><span class="pln">length</span><span class="pun">();</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">};</span><span class="pln">
    </span><span class="lit">@Override</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compare</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> s1</span><span class="pun">,</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> s2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> comparator</span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">f</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="pln">s1</span><span class="pun">),</span><span class="pln"> f</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="pln">s2</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
      好吧！難道不能傳入 <code>F1</code> 實例就好嗎？這麼一來，連上頭那個 <code>compare</code> 方法中的流程也能重用了：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">class</span><span class="pln"> </span><span class="typ">OnResultOf</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> comparator</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> F1</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> f</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">OnResultOf</span><span class="pun">(</span><span class="pln">F1</span><span class="pun">&lt;</span><span class="pln">P</span><span class="pun">,</span><span class="pln"> R</span><span class="pun">&gt;</span><span class="pln"> f</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pln"> comparator</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">f </span><span class="pun">=</span><span class="pln"> f</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">comparator </span><span class="pun">=</span><span class="pln"> comparator</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="lit">@Override</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> compare</span><span class="pun">(</span><span class="pln">P p1</span><span class="pun">,</span><span class="pln"> P p2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> comparator</span><span class="pun">.</span><span class="pln">compare</span><span class="pun">(</span><span class="pln">f</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="pln">p1</span><span class="pun">),</span><span class="pln"> f</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="pln">p2</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">    
</span><span class="pun">}</span></code></pre>
      現在你連 <code>StringLengthInverseNullFirstComparator</code> 都不用定義了，可以直接建構並組合相關實例就可以進行複雜的排序了：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="typ">List</span><span class="pln"> names </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Arrays</span><span class="pun">.</span><span class="pln">asList</span><span class="pun">(</span><span class="str">"Monica"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Justin"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Jao"</span><span class="pun">);</span><span class="pln">

</span><span class="typ">Collections</span><span class="pun">.</span><span class="pln">sort</span><span class="pun">(</span><span class="pln">names</span><span class="pun">,</span><span class="pln"> 
        </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">OnResultOf</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> F1</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="lit">@Override</span><span class="pln">
            </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> apply</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> p</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">return</span><span class="pln"> p </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> p</span><span class="pun">.</span><span class="pln">length</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}},</span><span class="pln"> 
        </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">NullsFirst</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Inverse</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Natural</span><span class="pun">())))</span><span class="pln">
</span><span class="pun">);</span></code></pre>
      這麼一連串的抽取，達到了一些元素的重用，不過語義上並不怎麼流暢，如果比較器可以主動生出另一個比較器，可以改進一下這個問題。在繼續進行重構之前，你發現了 Guava 做了你想做的事了，那就拿來用吧！
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="typ">Collections</span><span class="pun">.</span><span class="pln">sort</span><span class="pun">(</span><span class="pln">names</span><span class="pun">,</span><span class="pln"> 
        </span><span class="typ">Ordering</span><span class="pun">.</span><span class="pln">natural</span><span class="pun">().</span><span class="pln">reverse</span><span class="pun">().</span><span class="pln">nullsFirst</span><span class="pun">()</span><span class="pln">
                </span><span class="pun">.</span><span class="pln">onResultOf</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Function</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                    </span><span class="lit">@Override</span><span class="pln">
                    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> apply</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> p</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                        </span><span class="kwd">return</span><span class="pln"> p </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> p</span><span class="pun">.</span><span class="pln">length</span><span class="pun">();</span><span class="pln">
                    </span><span class="pun">}</span><span class="pln">
               </span><span class="pun">})</span><span class="pln">
</span><span class="pun">);</span></code></pre>
      <code>Ordering</code> 本身就是比較器，這看看它的類別定義就知道了：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">abstract</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Ordering</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Object</span><span class="pln"> </span><strong><span class="kwd">implements</span><span class="pln"> </span><span class="typ">Comparator</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span></strong></code></pre>
      不過，它是個功能強悍的比較器，可以基於目前的比較器，加上某個條件，直接產生新的 <code>Ordering</code> 實例，就如上面的例子中看到的，不過我承認，那個匿名類別實例語法挺惱人的，如果可以用上 JDK8 的 Lambda 語法，也許會好一些：
      <pre class="prettyprint prettyprinted" style=""><code lang="java"><span class="typ">Collections</span><span class="pun">.</span><span class="pln">sort</span><span class="pun">(</span><span class="pln">names</span><span class="pun">,</span><span class="pln"> 
        </span><span class="typ">Ordering</span><span class="pun">.</span><span class="pln">natural</span><span class="pun">().</span><span class="pln">reverse</span><span class="pun">().</span><span class="pln">nullsFirst</span><span class="pun">()</span><span class="pln">
            </span><span class="pun">.</span><span class="pln">onResultOf</span><span class="pun">(</span><span class="pln">p </span><span class="pun">-&gt;</span><span class="pln"> p </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> p</span><span class="pun">.</span><span class="pln">length</span><span class="pun">())</span><span class="pln">
</span><span class="pun">);</span></code></pre>
      只要事物不斷重複，就會形成一種模式，若能抽取出模式，就能用更高階的語義來表述意圖。Guava 在排序這方面，某些部份就是在表現這類意涵，不僅只有排序，實際上撰寫程式時，還存在許多高階語義在程式流程之中，只是就如先前所談到的，也許是因為程式碼太混亂，或者程式區塊混著太多職責，而觀察不出來罷了，因為看不出來，所以重複的工作就一再進行，日復一日地…<br>
      Guava 看來只是個程式庫，但它實際上包括了不少高階觀念，先前的兩篇文章&nbsp;<a href="http://www.codedata.com.tw/java/guava-tutorial-1-getting-started">從避免使用 null 開始</a>、<a href="http://www.codedata.com.tw/java/guava-tutorial-2-precondition/">命名明確的條件檢查</a>，其實也都是在談這些高階觀念，想善用 Guava，瞭解這些觀念是必要的，不然，只是當個程式庫來使用，就沒辦法用得順手，這樣是有點可惜了。
      嗯？<code>Ordering</code> 更多的範例？其實看 API 文件應該就夠清楚了，如果你瞭解 <code>Ordering</code> 存在的目的的話！網路上搜尋一下 「Guava Ordering」，你可以找到一卡車的資料。好吧！我知道有些人很性急，那麼 <a href="http://scaramoche.blogspot.tw/2010/05/googles-guava-library-tutorial-part-2.html">google's guava library tutorial part 2: joys of Ordering</a> 這個鏈結有不少簡單易懂的範例。<br><br><br><div class="ad336-280" style="text-align: center;"><script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/adsbygoogle.js"></script><!-- 2015 新版型廣告 336 x 280 --><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="9976409681" data-adsbygoogle-status="done"><ins id="aswift_3_expand" style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent;"><ins id="aswift_3_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px;background-color:transparent;"><iframe width="336" height="280" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;width:336px;height:280px;" src="./【Guava 教學】（3）高階排序概念的實現_files/saved_resource(2).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><br><div class="recommend" style="text-align: center;"><hr><script async="" src="./【Guava 教學】（3）高階排序概念的實現_files/adsbygoogle.js"></script><!-- 自動大小回應相符內容 --><ins class="adsbygoogle" style="display: block; height: 480px;" data-ad-client="ca-pub-9750319131714390" data-ad-slot="4953478487" data-ad-format="autorelaxed" data-adsbygoogle-status="done"><ins id="aswift_4_expand" style="display:inline-table;border:none;height:480px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><ins id="aswift_4_anchor" style="display:block;border:none;height:480px;margin:0;padding:0;position:relative;visibility:visible;width:800px;background-color:transparent;"><iframe width="800" height="480" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_4" name="aswift_4" style="left:0;position:absolute;top:0;width:800px;height:480px;" src="./【Guava 教學】（3）高階排序概念的實現_files/saved_resource(3).html"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></article></main></div>
<script src="./【Guava 教學】（3）高階排序概念的實現_files/ui.js"></script>

<div class="analytics">
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-143766-1', 'auto');
  ga('send', 'pageview');

</script>
</div>
<ins class="adsbygoogle" data-adsbygoogle-status="done" style="display: none;"><ins id="aswift_0_expand" style="display:inline-table;border:none;height:NaNpx;margin:0;padding:0;position:relative;visibility:visible;width:NaNpx;background-color:transparent;"><ins id="aswift_0_anchor" style="display:block;border:none;height:NaNpx;margin:0;padding:0;position:relative;visibility:visible;width:NaNpx;background-color:transparent;"><iframe frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;width:NaNpx;height:NaNpx;" src="./【Guava 教學】（3）高階排序概念的實現_files/saved_resource(4).html"></iframe></ins></ins></ins><script id="wappalyzer" src="chrome-extension://gppongmhjkpfnbhagpmjfkannfbllamg/js/inject.js"></script><table cellspacing="0" cellpadding="0" class="gstl_50 gssb_c" style="width: 122px; display: none; top: 148px; left: 0px; position: absolute;"><tbody><tr><td class="gssb_f"></td><td class="gssb_e" style="width: 100%;"></td></tr></tbody></table></body></html>