<!DOCTYPE html>
<!-- saved from url=(0046)http://bartoszsypytkowski.com/dont-ask-tell-2/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>Don't Ask, Tell</title>
    <meta name="description" content="">

    <meta name="HandheldFriendly" content="True">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="shortcut icon" href="http://bartoszsypytkowski.com/assets/favicon.png?v=d4504c235a">

    <link rel="stylesheet" type="text/css" href="./Don&#39;t Ask, Tell_files/screen.css">
    <link href="./Don&#39;t Ask, Tell_files/css" rel="stylesheet" type="text/css">

    <link rel="canonical" href="http://bartoszsypytkowski.com/dont-ask-tell-2/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <link rel="amphtml" href="http://bartoszsypytkowski.com/dont-ask-tell-2/amp/">
    
    <meta property="og:site_name" content="Bartosz Sypytkowski">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Don&#39;t Ask, Tell">
    <meta property="og:description" content="Today I wanted to focus on some of the popular anti-patterns, many Akka.NET newcomers tend to use. I&#39;m talking about using Ask method for communicating between actors. I want to get a closer look into what Ask really does underneath and why it&#39;s not a good choice for communicating">
    <meta property="og:url" content="http://bartoszsypytkowski.com/dont-ask-tell-2/">
    <meta property="article:published_time" content="2016-05-03T21:07:32.000Z">
    <meta property="article:modified_time" content="2016-05-05T05:36:45.000Z">
    <meta property="article:tag" content="akka.net">
    
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="Don&#39;t Ask, Tell">
    <meta name="twitter:description" content="Today I wanted to focus on some of the popular anti-patterns, many Akka.NET newcomers tend to use. I&#39;m talking about using Ask method for communicating between actors. I want to get a closer look into what Ask really does underneath and why it&#39;s not a good choice for communicating">
    <meta name="twitter:url" content="http://bartoszsypytkowski.com/dont-ask-tell-2/">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Bartosz Sypytkowski">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="akka.net">
    
    <script async="" src="./Don&#39;t Ask, Tell_files/analytics.js"></script><script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Bartosz Sypytkowski",
        "logo": "http://bartoszsypytkowski.com/ghost/img/ghosticon.jpg"
    },
    "author": {
        "@type": "Person",
        "name": "Bartosz Sypytkowski",
        "image": {
            "@type": "ImageObject",
            "url": "//www.gravatar.com/avatar/009174d68aa95ae39054afa749013f78?s=250&d=mm&r=x",
            "width": 250,
            "height": 250
        },
        "url": "http://bartoszsypytkowski.com/author/bartosz/",
        "sameAs": []
    },
    "headline": "Don&#x27;t Ask, Tell",
    "url": "http://bartoszsypytkowski.com/dont-ask-tell-2/",
    "datePublished": "2016-05-03T21:07:32.000Z",
    "dateModified": "2016-05-05T05:36:45.000Z",
    "keywords": "akka.net",
    "description": "Today I wanted to focus on some of the popular anti-patterns, many Akka.NET newcomers tend to use. I&#x27;m talking about using Ask method for communicating between actors. I want to get a closer look into what Ask really does underneath and why it&#x27;s not a good choice for communicating",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "http://bartoszsypytkowski.com"
    }
}
    </script>

    <meta name="generator" content="Ghost 0.11">
    <link rel="alternate" type="application/rss+xml" title="Bartosz Sypytkowski" href="http://bartoszsypytkowski.com/rss/">

    <link href="./Don&#39;t Ask, Tell_files/font-awesome.css" rel="stylesheet">

    <link rel="stylesheet" type="text/css" href="./Don&#39;t Ask, Tell_files/prism.css">

    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47294845-1', 'bartoszsypytkowski.com');
  ga('send', 'pageview');

</script>
<script type="text/javascript" async="" src="./Don&#39;t Ask, Tell_files/embed.js"></script><style id="fit-vids-style">.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.c61e7efbeb6a4ac7d81f7c61a454a72c.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.8edffe1405dcc2d5eb5ee9d96a2866d1.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.cd4c601516a692db923329e5cddd87f5.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"></head>

<body class="post-template tag-akka-net">

    <div id="sidebar">
        <div id="sidebar-content" class="inner">
            
            <h2 class="blog-title"><a href="http://bartoszsypytkowski.com/">Bartosz Sypytkowski</a></h2>
            <h3 class="blog-description">Programming battlefront.</h3>

            <form id="search">
                <input id="search-field" placeholder="Search">
            </form>

            <div id="sidebar-links">
                <ul id="subscription-links">
                    <li><a target="_blank" href="http://bartoszsypytkowski.com/rss/"><i class="fa fa-rss"></i> Subscribe via RSS</a></li>
                    <!-- No support yet
                    <li><a target="_blank" href=" "><i class="fa fa-envelope"></i> Subscribe via email<a></li>
                    -->
                </ul>
                <ul id="sidebar-internal">
                    <!-- For 'About' and other pages -->
                </ul>
                <ul id="sidebar-external">
                    <li class="external-link"><a href="https://github.com/Horusiath"><i class="fa fa-github"></i> GitHub</a></li>
<li class="external-link"><a href="https://www.linkedin.com/profile/view?id=AAMAAAz1Q9MBcEiv6viTrFZv1Zk8mRktuYGhkTg&amp;locale=en_US"><i class="fa fa-linkedin"></i> LinkedIn</a></li>
<li class="external-link"><a href="https://twitter.com/Horusiath"><i class="fa fa-twitter"></i> Twitter</a></li>
<!--<li class="external-link"><a href="https://plus.google.com/+DavidLecinaFuentes"><i class="fa fa-google-plus"></i> Google+</a></li>
<li class="external-link"><a href="https://www.youtube.com/user/alllucky7s"><i class="fa fa-youtube-play"></i> YouTube</a></li>-->
<li class="external-link"><a target="_blank" href="mailto:b.sypytkowski@gmail.com"><i class="fa fa-envelope"></i> Contact</a></li>
<!--
<li class="external-link"><a href="http://www.last.fm/user/Lucky_7s">Last.fm</a></li>
<li class="external-link"><a href="http://steamcommunity.com/id/alllucky7s">Steam</a></li>
-->
                </ul>
            </div>

            <footer class="site-footer">
                <section class="copyright">© 2017 <a href="mailto:b.sypytkowski@gmail.com">Bartosz Sypytkowski</a> • All rights reserved.
</section>
                <section class="poweredby">Proudly published with <a class="icon-ghost" href="https://ghost.org/">Ghost</a></section>
                <section class="theme-credits"><a href="https://github.com/dlecina/StayPuft">StayPuft theme</a> by David Lecina</section>
            </footer>
        </div>
    </div>

    <main>
        <div class="main-inner">
            <section id="results"></section>
            

<article class="post tag-akka-net">


        <header class="post-header">

            <h1 class="post-title">Don't Ask, Tell</h1>
            
            <section class="post-meta">
                <span class="post-time">
                    <i class="fa fa-calendar"></i>
                    <time datetime="2016-05-03" class="timeago">2 years ago</time>
                    <time datetime="2016-05-03" class="fulldate">May 3rd, 2016</time>
                </span>
                <br><i class="fa fa-tag"></i> <a href="http://bartoszsypytkowski.com/tag/akka-net/">akka.net</a>
            </section>
        </header>

        <section class="post-content">
            <p>Today I wanted to focus on some of the popular anti-patterns, many Akka.NET newcomers tend to use. I'm talking about using <code>Ask</code> method for communicating between actors. I want to get a closer look into what Ask really does underneath and why it's not a good choice for communicating between actors... for most of the time.</p>

<h3 id="whatisaskandhowdoesitwork">What is Ask and how does it work?</h3>

<p><code>Ask</code> is one of the extension methods for <code>IActorRef</code> interface, allowing to communicate between actors. Unlike <code>Tell</code> - which simply sends a message with <em>fire and forget</em> semantics - <code>Ask</code> is <em>request/response</em> based communication pattern. It sends a message to another actor, expecting it to respond with another message, and returning a task asynchronously notifying when the response will come back.</p>

<p>To understand, why <code>Ask</code> is usually a bad pattern for inter-actors communication, you need to know how does it work first.</p>

<p>As you may remember, actor communication is message-based. Additionally in Akka to buffer possible message bursts, each actor have its own mailbox. Therefore sender of the message always append it at the end of the recipient's mailbox, while the recipient is processing messages <strong>synchronously</strong> taking them off the mailbox, one by one. What's also important here, it won't take any new messages until the current one has been processed.</p>

<p>While for most of the time this is good approach (and can be performing better than i.e. <a href="https://en.wikipedia.org/wiki/Staged_event-driven_architecture">SEDA</a>-based solutions), it's kinda problematic for request/response pattern. Why? Since we need to correlate request with the response, after sending the request, we need to either:</p>

<ol>
<li>Scan the entire mailbox queue, looking for the response. The longer the mailbox (so the higher the congestion), the longer it will take to find a response. Also in this case mailbox must be able to pick a message from the middle of a queue, which would be not without limitations on the mailbox implementation itself.  </li>
<li>Create a temporary listener, which is able to receive the response. Moreover since communication may be proceed over the wire, a listener must encapsulate location transparency feature of actors.</li>
</ol>

<p>Akka follows the second approach. This means that each <code>Ask</code> call is actually allocating a special kind of lightweight listener-actor. Such design makes an <code>Ask</code> a lot heavier - and we're talking about dozens times heavier - operation than using simple <code>Tell</code>. Good part is that thanks to such choice <code>Tell</code> still can be fast as hell.</p>

<h3 id="continuousblocking">Continuous blocking</h3>

<p>As emphasized earlier, one of the actor's attributes is synchronous message processing. It's a great feature, since we no longer need to worry about things like race conditions, locks or blocking... except that <strong>request/response is inherently blocking communication pattern</strong>. To be clear, I'm not talking here about blocking the thread, as we're able to define async receive methods for actors. What I'm talking about, is blocking an actor itself, which cannot pick any new messages until the response arrives and processing finishes.</p>

<p>Imagine following example:</p>

<pre class=" language-csharp"><code class=" language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyActor</span><span class="token punctuation">:</span> ReceiveActor  
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyActor</span><span class="token punctuation">(</span>IActorRef other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Recive<span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">async</span> request <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// this is really BAD practice</span>
            <span class="token keyword">var</span> reply <span class="token operator">=</span> <span class="token keyword">await</span> other<span class="token punctuation">.</span>Ask<span class="token operator">&lt;</span>Reply<span class="token operator">&gt;</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Sender<span class="token punctuation">.</span><span class="token function">Tell</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>

<p>In normal conditions, a single Akka.NET actor (v1.0.7) is able to receive up to 3.3mln messages/sec. Ok, even given bad characteristic of Ask, this would be still a fairly high amount (hundreds of thousands msg/sec under local affinity). But what if asked actor will never receive the message (suppose, it has been lost, or a receiver died for some reason)? Well, it will become idle until the timeout will trigger. In case above this mean around 30 sec of unresponsiveness... for anyone sending a message to that actor, not only the asker alone. This could be changed by the reentrancy of actors... which again would reintroduce race conditions in parallel access to actor's state, which is what actors were build to solve on the first place :)</p>

<p>I know that at this point some of you may say "But I really need this response to proceed with my work". Well, as practice shows... most of the time you don't ;) Most of the programmers get used to RPC, because it's inherent part of HTTP protocol. However in message-based systems, it's only one of the many communication patterns. Use your senses, take a look at the world around you, and you will see that most of the information exchange in the real life are not based on request/response. Believe me, once you change your mindset, you'll start to see things in a bigger picture.</p>

<p>NOTE: Another flaw of this particular part of code is that in case of failure on the asked actor's side, this failure is propagated back to requester - this may ultimately cause a cascading failure chain. While crashing an actor usually is not a big deal, don't think of it as a resource-free operation.</p>

<h3 id="ifnotaskthenwhat">If not Ask, then what?</h3>

<p>I wanted to describe few cases, where we usually think in terms of RPC, and how to change them into more message-embracing solutions. Take into account, that each case is different and there is no silver bullet here.</p>

<h4 id="pushbasedevents">Push based events</h4>

<p>Lets think about following scenario:</p>

<blockquote>
  <p>We have a multiplayer game, represented as actor system. We have a single actor representing state of the world, and multiple client-actors - each one working locally on part of that state. Before client proceeds with some action, it must ensure, it has an actual state of the world. Therefore it asks an world-actor for a current state at the beginning of every operation.</p>
</blockquote>

<p>While this example is settled in multiplayer game scenario, it's shares many traits with standard business applications (world state ⇒ database). So how can we do that without using request/response model?</p>

<p>Now, change your mindset a little - instead of thinking about asking for current state, let allow the world-actor to notify every interested client with the state change, once it occurs. As result we have living actor system. </p>

<h4 id="needresponseuseforwardtellback">Need response? Use Forward + Tell back</h4>

<p>Sometimes we may want to send a result of a computation back to the caller. What if that computation is a request chain between multiple different actors.</p>

<p>Imagine that we have 4 actors A, B, C and D. In our scenario A is the requester, that needs to be replied. It sends a message to B, which makes some operations, then asks C to make some more operations, which then also ask D for the same. Once the D finishes, the reply is passed down the call chain back to A. Given Ask as message pattern, we can model that scenario using following image:</p>

<p><img src="./Don&#39;t Ask, Tell_files/FK48jox.png" alt="Ask pipeline" class="full-img"></p>

<p>Now we ended up with 3 temporal allocations (remember that Ask allocates), 6 message passes, and blocking 2 actors (B and C) until the whole request is completed... even thou they don't need participate in it after doing their part.</p>

<p>How can we change that? Use the following scenario:</p>

<p><img src="./Don&#39;t Ask, Tell_files/6W53lOG.png" alt="Forward pipeline" class="full-img"></p>

<p>As you may see, we replaced most of the <code>Ask</code>s with <code>Forward</code>, but what it actually does? Forward is a special version of <code>Tell</code>, which propagates original message sender. Therefore A will be recognized as a message sender, as long as actors are passing the message using <code>Forward</code>. Thanks to that, D can send a reply directly to A, as other actors are not necessary anymore. </p>

<p>Moreover, because actors B and C don't need to wait for the reply, they are free to proceed other messages in the meantime.</p>

<h4 id="aggregatorpattern">Aggregator pattern</h4>

<p>Other case you may think of, is a scatter/gather scenario. We have some group of actors to be requested, then we want to gather all replies and send the aggregated result back.</p>

<p>I've seen people trying to solve that case with combination of multiple <code>Ask</code> requests + <code>Task.WhenAll</code>. However because of weight of Ask (and in more extreme cases weight of Tasks themselves), this is not a performance-wise operation. So what should we do?</p>

<p>We can create a dedicated Aggregator actor, responsible for collecting all results from the requested actors and sending them back to the requester. There are many variants, taking many cases into account, however I think, that one of the most common ones is to:</p>

<ul>
<li>Init an aggregator actor with collection of actors to ask. It'll be responsible for gathering responses for a particular request.</li>
<li>Propagate request to all actors through an aggregator.</li>
<li>When a reply arrives, remove the sender from the list of actors remaining to answer.</li>
<li>Apply receive timeout for safety (so we don't wait for response infinitely).</li>
<li>Once all actors have responded or timeout occurred, send aggregated replies back to the original sender and stop aggregator actor.</li>
</ul>

<p>Following scenario can be represented just like in the code below and be abstracted to generic solution:</p>

<pre class=" language-csharp"><code class=" language-csharp"><span class="token keyword">class</span> <span class="token class-name">Aggregator</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">:</span> ReceiveActor  
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> IActorRef originalSender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> ISet<span class="token operator">&lt;</span>IActorRef<span class="token operator">&gt;</span> refs<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Aggregator</span><span class="token punctuation">(</span>ISet<span class="token operator">&lt;</span>IActorRef<span class="token operator">&gt;</span> refs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> refs<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// this operation will finish after 30 sec of inactivity</span>
        <span class="token comment" spellcheck="true">// (when no new message arrived)</span>
        Context<span class="token punctuation">.</span><span class="token function">SetReceiveTimeout</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ReceiveAny</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>
            originalSender <span class="token operator">=</span> Sender<span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> aref <span class="token keyword">in</span> refs<span class="token punctuation">)</span> aref<span class="token punctuation">.</span><span class="token function">Tell</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Become</span><span class="token punctuation">(</span>Aggregating<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Aggregating</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">var</span> replies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// when timeout occurred, we reply with what we've got so far</span>
        Receive<span class="token operator">&lt;</span>ReceiveTimeout<span class="token operator">&gt;</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">ReplyAndStop</span><span class="token punctuation">(</span>replies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Receive<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>refs<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>Sender<span class="token punctuation">)</span><span class="token punctuation">)</span> replies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>refs<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">ReplyAndStop</span><span class="token punctuation">(</span>replies<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ReplyAndStop</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> replies<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        originalSender<span class="token punctuation">.</span><span class="token function">Tell</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AggregatedReply</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>replies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Context<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span>Self<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>

<h3 id="whentouseask">When to use Ask?</h3>

<p>After spending so much time writing, how bad usage of <code>Ask</code> is, the time has come to answer the question: <em>so when I should use Ask?</em> </p>

<ul>
<li>First of all, <code>Ask</code> is great to maintain communication with external systems willing to communicate with Akka.NET. This is natural trend, as quite often such systems are in fact RESTfull web services.</li>
<li>Other case I can think about, is specific version of scatter/gather scenario, when number of potentially participating actors may vary depending on message parameters and cannot be cached. In that case it's hard to set stop condition for aggregator pattern upfront, so fallback to listener based option seems to be justified. </li>
</ul>
        </section>

        <footer class="post-footer">


                <figure class="author-image">
                    <a class="img" href="http://bartoszsypytkowski.com/author/bartosz/" style="background-image: url(//www.gravatar.com/avatar/009174d68aa95ae39054afa749013f78?s=250&amp;d=mm&amp;r=x)"><span class="hidden">Bartosz Sypytkowski's Picture</span></a>
                </figure>

                <section class="author">
                    <h4><a href="http://bartoszsypytkowski.com/author/bartosz/">Bartosz Sypytkowski</a></h4>

                        <p>Read <a href="http://bartoszsypytkowski.com/author/bartosz/">more posts</a> by this author.</p>
                    <div class="author-meta">
                        
                        
                    </div>
                </section>


            <section class="share">
                <h4>Share this post</h4>
                <div class="share-icons">
                    <a class="fa fa-twitter-square" href="https://twitter.com/share?text=Don%27t%20Ask%2C%20Tell&amp;url=http://bartoszsypytkowski.com/dont-ask-tell-2/" onclick="window.open(this.href, &#39;twitter-share&#39;, &#39;width=550,height=235&#39;);return false;">
                        <span class="hidden">Twitter</span>
                    </a>
                    <a class="fa fa-facebook-square" href="https://www.facebook.com/sharer/sharer.php?u=http://bartoszsypytkowski.com/dont-ask-tell-2/" onclick="window.open(this.href, &#39;facebook-share&#39;,&#39;width=580,height=296&#39;);return false;">
                        <span class="hidden">Facebook</span>
                    </a>
                    <a class="fa fa-google-plus-square" href="https://plus.google.com/share?url=http://bartoszsypytkowski.com/dont-ask-tell-2/" onclick="window.open(this.href, &#39;google-plus-share&#39;, &#39;width=490,height=530&#39;);return false;">
                        <span class="hidden">Google+</span>
                    </a>
                </div>
            </section>

        </footer>

        <section class="post-comments">
            <div id="disqus_thread"><iframe id="dsq-app9485" name="dsq-app9485" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Don&#39;t Ask, Tell_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 874px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
            <script type="text/javascript">
                /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
                var disqus_shortname = 'bartoszsypytkowski'; // required: replace example with your forum shortname

                /* * * DON'T EDIT BELOW THIS LINE * * */
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            </script>
            <noscript>Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;</noscript>
            
        </section>


</article>
        </div>
    </main>

    <!-- You can safely delete this line if your theme does not require jQuery -->
<script type="text/javascript" src="./Don&#39;t Ask, Tell_files/jquery-1.11.3.min.js"></script>

    <script type="text/javascript" src="./Don&#39;t Ask, Tell_files/jquery.fitvids.js"></script>
    <script type="text/javascript" src="./Don&#39;t Ask, Tell_files/index.js"></script>
    <script type="text/javascript" src="./Don&#39;t Ask, Tell_files/prism-loader.js"></script>
    <script type="text/javascript" src="./Don&#39;t Ask, Tell_files/prism.js"></script>
    <script src="./Don&#39;t Ask, Tell_files/jquery.ghostHunter.min.js"></script>
    <script>
        $("#search-field").ghostHunter({
            rss : "http://bartoszsypytkowski.com/rss/",
            results : "#results",
            onKeyUp : true,
            zeroResultsInfo : false
        });
    </script>



<iframe style="display: none;" src="./Don&#39;t Ask, Tell_files/saved_resource(2).html"></iframe></body></html>