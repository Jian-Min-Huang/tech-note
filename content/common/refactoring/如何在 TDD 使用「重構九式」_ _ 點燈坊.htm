<!DOCTYPE html>
<!-- saved from url=(0046)http://oomusou.io/refactor/refactor-in-action/ -->
<html class=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  
  <title>如何在 TDD 使用「重構九式」? | 點燈坊</title>
  <meta name="author" content="真 OO無双">
  
  <meta name="description" content="歸納自己天天使用的重構步驟">
  
  
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
 <meta name="description" content="歸納自己天天使用的重構步驟">
<meta property="og:type" content="article">
<meta property="og:title" content="如何在 TDD 使用「重構九式」?">
<meta property="og:url" content="http://oomusou.io/refactor/refactor-in-action/index.html">
<meta property="og:site_name" content="點燈坊">
<meta property="og:description" content="歸納自己天天使用的重構步驟">
<meta property="og:image" content="http://oomusou.io/images/feature/logo.png">
<meta property="og:updated_time" content="2017-04-18T15:39:37.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="如何在 TDD 使用「重構九式」?">
<meta name="twitter:description" content="歸納自己天天使用的重構步驟">
 

  
  
    <link href="http://oomusou.io/favicon.png" rel="icon">
  
  
  <link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/bootstrap.min.css" media="screen" type="text/css">
  <link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/font-awesome.css" media="screen" type="text/css">
  <link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/style.css" media="screen" type="text/css">
  <link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/highlight.css" media="screen" type="text/css">
  <link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/responsive.min.css" media="screen" type="text/css">
  <link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/google-fonts.css" media="screen" type="text/css">
  <!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->

  <script async="" src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/st.js"></script><script src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/jquery-2.0.3.min.js"></script>

  <!-- analytics -->
  



<style type="text/css">.fancybox-margin{margin-right:0px;}</style><link rel="stylesheet" type="text/css" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/new_embed-bee561032092eaa907cef89871bd8feb.css"><style type="text/css">.st-install-hAXbiVYFC92XF16_EhCh .st-ui-result .st-ui-type-heading { color:#f26b68 !important }
.st-install-hAXbiVYFC92XF16_EhCh .st-ui-result em {font-style:normal; font-weight:bold; background-color:#f6fcfe !important}</style></head>

 <body style="">  
  <nav id="main-nav" class="navbar navbar-inverse navbar-fixed-top" role="navigation" style="opacity: 0.485431;">
    <div class="container">
     <button type="button" class="navbar-header navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
		<span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <div class="collapse navbar-collapse nav-menu">
		<ul class="nav navbar-nav">
		<li><a href="http://oomusou.io/">點燈坊</a></li>
		  
		  <li>
			<a href="http://oomusou.io/tags" title="All the tags.">
			  <i class="fa fa-tags"></i>Tags
			</a>
		  </li>
		  
		  <li>
			<a href="http://oomusou.io/atom.xml" title="Subscribe me.">
			  <i class="fa fa-rss"></i>RSS
			</a>
		  </li>
		  
		</ul>
      </div>
    </div> <!-- container -->
</nav>
<div class="clearfix"></div>

  <div class="container">
  	<div class="content">
    	 
	
		<div class="page-header">		
			<h1> 如何在 TDD 使用「重構九式」?</h1>
		</div>		
	



<div class="row post">
	<!-- cols -->
	
	<div class="col-md-9">
	

	
		 <div class="alert alert-success description">
			<i class="fa fa-info-circle"></i> 歸納自己天天使用的重構步驟			
		</div> <!-- alert -->
		

	<!-- toc -->
	<div id="postTOC">
		<span class="tocHeading">Contents</span>
		<ol class="toc-article"><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#Motivation"><span class="toc-article-text">Motivation</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#Version"><span class="toc-article-text">Version</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#實際案例"><span class="toc-article-text">實際案例</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#測試案例"><span class="toc-article-text">測試案例</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#單元測試"><span class="toc-article-text">單元測試</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#使用_if_else"><span class="toc-article-text">使用 if else</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#使用_switch"><span class="toc-article-text">使用 switch</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第一式_:_Extract_Method"><span class="toc-article-text">第一式 : Extract Method</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第二式_:_Extract_Class"><span class="toc-article-text">第二式 : Extract Class</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第三式_:_Extract_Superclass"><span class="toc-article-text">第三式 : Extract Superclass</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第四式_:_Extract_Closure"><span class="toc-article-text">第四式 : Extract Closure</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第五式_:_Extract_Interface"><span class="toc-article-text">第五式 : Extract Interface</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第六式_:_Dependency_Injection"><span class="toc-article-text">第六式 : Dependency Injection</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第七式_:_Extract_Trait"><span class="toc-article-text">第七式 : Extract Trait</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第八式_:_Refactor_to_Pattern"><span class="toc-article-text">第八式 : Refactor to Pattern</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#第九式_:_Replace_Interface_with_Closure"><span class="toc-article-text">第九式 : Replace Interface with Closure</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#Conclusion"><span class="toc-article-text">Conclusion</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#Sample_Code"><span class="toc-article-text">Sample Code</span></a></li><li class="toc-article-item toc-article-level-2"><a class="toc-article-link" href="http://oomusou.io/refactor/refactor-in-action/#Reference"><span class="toc-article-text">Reference</span></a></li></ol>
    </div>

	<!-- content -->
	<div class="mypage">		
	    <p>TDD 不僅是先寫測試而已，當第一個 <span class="label label-success">綠燈</span> 之後，剩下的半壁江山就是拼<strong>重構</strong>功力，重構的書多半來自於 Java，因此有些 PHP 獨門的重構技巧在 Java 書上是看不到的，也因為編程思維的持續演進，重構也有了新的面貌，本文整理出自己在實務上，天天必用的 9 個適用於 PHP 重構的 SOP。</p>
<a id="more"></a>
<h2 id="Motivation">Motivation</h2><hr>
<p>對於很多人來說，使用 imperative 方式寫程式不難，只要將所想的演算法以程式表達即可，也會使用 procedure 方式實現 DRY，但若要長出 <code>class</code>、<code>interface</code>、<code>abstract class</code> 則有難度，更遑論 <code>closure</code> 與 <code>trait</code>，事實上這些東西，都不是<strong>設計</strong>出來的，而是<strong>重構</strong>出來的，也就是 TDD 第一個 <span class="label label-success">綠燈</span> 之後，透過重構慢慢長出 <code>class</code>、<code>interface</code>、<code>abstract class</code>、<code>closure</code> 與 <code>trait</code>。</p>
<h2 id="Version">Version</h2><hr>
<p>PHP 7.0.8<br>Laravel 5.3.24</p>
<h2 id="實際案例">實際案例</h2><hr>
<p>假設我們想要計算運費，目前有<strong>黑貓</strong>、<strong>新竹客運</strong>與<strong>郵局</strong>三家可以選擇，每家針對不同的<strong>重量</strong>有其相對應的計算公式，而我們希望能寫出<strong>高內聚、低耦合</strong>，符合 <strong>SOLID</strong> 原則的程式碼，方便日後維護。<span class="margin-note-marker"><sup>1</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">1</span>此範例並非我原創，靈感來自於 Joey Chen 的 <a href="https://dotblogs.com.tw/hatelove/2012/12/11/learning-tdd-in-30-days-day9-refactoring-introduction-and-how-to-find-refactoring-target" target="_blank" rel="external">30天快速上手TDD : Refactoring Legacy Code 簡介</a>之範例，因為此範例非常容易懂，而且很適合介紹重構。</span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:left">貨運商</th>
<th style="text-align:left">計費規則</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">黑貓</td>
<td style="text-align:left">基本運費 <code>100</code> 元，每公斤加收 <code>10</code> 元</td>
</tr>
<tr>
<td style="text-align:left">新竹貨運</td>
<td style="text-align:left">基本運費 <code>80</code> 元，每公斤加收 <code>15</code> 元</td>
</tr>
<tr>
<td style="text-align:left">郵局</td>
<td style="text-align:left">基本運費 <code>60</code> 元，每公斤加收 <code>20</code> 元</td>
</tr>
</tbody>
</table>
<h2 id="測試案例">測試案例</h2><hr>
<p>根據以上規則，我們可定出以下測試案例 :</p>
<table>
<thead>
<tr>
<th style="text-align:left">重量</th>
<th style="text-align:left">運費</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[1, 2, 3]</td>
<td style="text-align:left">360 元</td>
</tr>
<tr>
<td style="text-align:left">[1, 2, 3]</td>
<td style="text-align:left">330 元</td>
</tr>
<tr>
<td style="text-align:left">[1, 2, 3]</td>
<td style="text-align:left">300 元</td>
</tr>
</tbody>
</table>
<h2 id="單元測試">單元測試</h2><hr>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>2</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">2</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/7aa22622f57b13eb58cf659c2e7f89910c6c1461" target="_blank" rel="external">單元測試 : 黑貓、新竹、郵局測試案例</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>tests/ShippingServiceTest.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為360<span class="params">()</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ShippingService $target */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weights</span>, <span class="string">'BlackCat'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">360</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 新竹<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為330<span class="params">()</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ShippingService $target */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weights</span>, <span class="string">'Hsinchu'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">330</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 郵局<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為300<span class="params">()</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> ShippingService $target */</span></span><br><span class="line">        <span class="variable">$target</span> = App::make(ShippingService::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = <span class="variable">$target</span>-&gt;calculateFee(<span class="variable">$weights</span>, <span class="string">'PostOffice'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">300</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>將 3 個測試案例都先寫好測試。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  根據 Uncle Bob 的 The Three Rule of TDD，我們應該一個測試寫完，綠燈後才能寫下一個測試，這樣才能避免 over design，本文重點是重構，而不是 TDD，所以先將 3 個測試先寫好方便講解，實務上應該遵照 The Three Rule of TDD 方式進行。</div>
<h2 id="使用_if_else">使用 if else</h2><hr>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>3</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">3</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/6a2c6c45e9cfd590633c9a06a9db06a979ba1141" target="_blank" rel="external">if else 計算運費</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$companyName</span> == <span class="string">'BlackCat'</span>) {</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">elseif</span> (<span class="variable">$companyName</span> == <span class="string">'Hsinchu'</span>) {</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$companyName</span> == <span class="string">'PostOffice'</span>) {</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>一開始先求 <span class="label label-success">綠燈</span> 就好，因此我們很無腦的只使用 <code>if else</code> 與 <code>foreach()</code> 就完成了。</p>
<p>但這樣只是功能完成而已，所有高低階邏輯全寫在一起，程式碼不容易閱讀，將來也不好維護。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action000.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action000.png" alt=""></a></p>
<p>雖然是很爛的寫法，但仍然有 <span class="label label-success">綠燈</span>。</p>
<h2 id="使用_switch">使用 switch</h2><hr>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action010.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action010.png" alt=""></a></p>
<p>改用 <code>switch</code> 寫法會比 <code>if else</code> 可讀性高些，PhpStorm 也提供工具可以直接將 <code>if else</code> 轉成 <code>switch</code>，按熱鍵 ⌥ + ↩，選擇 <code>Replace if with switch</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>4</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">4</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/c6bac6e69c5da414daed040ca2c286fc3d466063" target="_blank" rel="external">switch 計算運費</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>不過由 <code>if else</code> 變成 <code>switch</code> 並不算重構，只是讓程式碼稍微好閱讀些而已。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action001.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action001.png" alt=""></a></p>
<p>馬上跑測試，得到 <span class="label label-success">綠燈</span>，確定程式沒改壞。</p>
<h2 id="第一式_:_Extract_Method">第一式 : Extract Method</h2><hr>
<p>所有的重構，都是從 <code>Extract Method</code> 開始，當我們發現程式碼中有以下特徵 : </p>
<ol>
<li>當一段程式碼需要<strong>寫註解</strong>特別解釋時。</li>
<li>在 <code>if else</code> 內有一段邏輯時。</li>
<li>在 <code>switch case</code> 內有一段邏輯時。</li>
</ol>
<p>就可以開始使用重構第一式 : <code>Extract Method</code>，將一段程式碼重構成 <code>method</code> 。</p>
<p><strong>ShippingService.php</strong><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">                    <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>每個 <code>switch case</code> 內都有一段<strong>計算運費</strong>邏輯，為了程式碼的可讀性與可維護性，我們應該將每個 <code>switch case</code> 內的程式碼加以 <code>Extract Method</code>。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action011.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action011.png" alt=""></a></p>
<p>PhpStorm 內建支援 <code>Extract Method</code>，先選擇要抽取的程式碼，按熱鍵 ⌃ + T，選擇 <code>Method</code>，PhpStorm 就會自動幫你將那段程式碼 extract 成新的 <code>method</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>5</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">5</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a8b5872eb489f121d17e49d4ff2cac660db8d56b" target="_blank" rel="external">重構 1 式 : Extract Method</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;blackCatCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;hsinchuCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;postCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;blackCatCalculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">blackCatCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hsinchuCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>在 <code>method</code> 命名方面，建議依照 <code>名詞 + 動詞</code> 的方式命名。</p>
<p>經過 <code>Extract Method</code> 後，最少原來一大坨的 <code>calculateFee()</code> 已經清爽多了，且可讀性也變高了，我們可以直接由 <code>method</code> 名稱，得知那段程式碼的意義，而不再是一段冷冰冰的 <code>foreach()</code> 迴圈而已。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action002.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action002.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Method 讓我們將原本一段很長的程式碼，依照其功能先拆成較小的 method，可增加程式碼的可讀性與可維護性。</div>
<h2 id="第二式_:_Extract_Class">第二式 : Extract Class</h2><hr>
<p>只有 <code>Extract Method</code> 還是不夠的，物件導向程式碼最大的特點就是 <code>class</code>，我們要將更相關的 <code>method</code> 放在同一個 <code>class</code>，達到<strong>高內聚</strong>的目標。</p>
<p>在重構第一式 <code>Extract Method</code> 時，我們特別以<strong>名詞 + 動詞</strong>的方式替 <code>method</code> 命名，其中若<strong>名詞</strong>相同，則表示這些 <code>mehtod</code> 的內聚性很高，適合將這些 <code>method</code> 再透過重構第二式 : <code>Extract Class</code> 重構到新的 <code>class</code> 內。</p>
<p><strong>ShippingService.php</strong><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">blackCatCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hsinchuCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postCalculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>在 <code>ShippingService</code> 透過 <code>Extract Method</code> 所產生的 <code>blackCatCalculateFee()</code>、<code>hsinchuCalculateFee()</code> 與 <code>postCalculateFee()</code>，我們發現<strong>名詞</strong>均不同，所以將這些 method 再拆分在不同的 class 內。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>6</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">6</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-d579d2515aa8883f19295d0c447879bc" target="_blank" rel="external">重構 2 式 : Extract Class 之 BlackCat</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>將名詞部分的 <code>blackCat</code> 重構成 <code>BlackCat</code> class，動詞部分的 <code>calculateFee()</code> 重構成 <code>BlackCat</code> 的 method。</p>
<p><strong>Hsinchu.php</strong><span class="margin-note-marker"><sup>7</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">7</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-cb0416a426a3bc3d1f17a46b73e1f33d" target="_blank" rel="external">重構 2 式 : Extract Class 之 Hsinchu</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/Hsinchu.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hsinchu</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">80</span> + <span class="variable">$weight</span> * <span class="number">15</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>將名詞部分的 <code>hshinchu</code> 重構成 <code>Hsinchu</code> class，動詞部分的 <code>calculateFee()</code> 重構成 <code>Hsinchu</code> 的 method。</p>
<p><strong>Post.php</strong><span class="margin-note-marker"><sup>8</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">8</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-2f1eb31bf97a19fd7ab93396e5c24be5" target="_blank" rel="external">重構 2 式 : Extract Class 之 Post</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/Post.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">60</span> + <span class="variable">$weight</span> * <span class="number">20</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>將名詞部分的 <code>post</code> 重構成 <code>Post</code> class，動詞部分的 <code>calculateFee()</code> 重構成 <code>Post</code> 的 method。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>9</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">9</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a724b603159d67785688192dd23d0cb6851e76dd#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 2 式 : Extract Class 之 ShippingService</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$hsinchu</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$hsinchu</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$post</span> = <span class="keyword">new</span> Post();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$post</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$blackCat</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$blackCat</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>原來 extract 出來的 <code>method</code>，現在已經重構到各自 <code>class</code> 內，因此要使用時，必須先透過 <code>new</code> 將物件建立起來，才能呼叫 <code>calculateFee()</code>。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action003.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action003.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。 </p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Class 讓我們將更相關的 method 放在同一個 class 內，達到高內聚的目標，可增加程式碼的可讀性與可維護性，也更容易重複使用。</div>
<h2 id="第三式_:_Extract_Superclass">第三式 : Extract Superclass</h2><hr>
<p>當 <code>Extract Class</code> 之後，雖然已經長出 <code>class</code>，但實務上會發現，<code>method</code> 內仍然有些程式碼是重複的，根據 DRY 原則，我們不希望有程式碼重複，這會造成日後維護上的困難，因為每次修改就得修改好幾份程式碼，還可能忘記修改其中一份，而造成邏輯上的不一致。</p>
<p>對付 <code>method</code> 內重複的程式碼，就必須使用重構第三式 : <code>Extract Superclass</code>，將重複的程式碼重構到 <code>abstract class</code>。</p>
<p><strong>BlackCat.php</strong><br></p><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>我們發現在 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 3 個 <code>class</code> 的 <code>calculateFee()</code> 內，都有 <code>$weight = collect($weightArray)</code>，我們可以使用 <code>Extract Superclass</code> 將這段程式碼重構到 <code>abstract class</code> 內。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>10</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">10</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/82be134f7a5c4488d1b4a4f0515eeb29534a9bad#diff-42a8335  084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 3 式 : Extract Super Class 之 AbstractLogistics</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToCollection</span><span class="params">(array <span class="variable">$weightArray</span>)</span>: <span class="title">Collection</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$weights</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>將 <code>$weight = collect($weightArray)</code> 部分重構到 <code>AbstractLogistics</code> 的 <code>arrayToCollection()</code>。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>11</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">11</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/82be134f7a5c4488d1b4a4f0515eeb29534a9bad#diff-d579d2515aa8883f19295d0c447879bc" target="_blank" rel="external">重構 3 式 : Extract Super Class 之 BlackCat</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><code>BlackCat</code> 改繼承於 <code>AbstractLogistics</code>。</p>
<p>因為 <code>$weight = collect($weightArray)</code> 已經搬到 <code>AbstractLogistics</code>，所以 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 都要改成 <code>$weights = $this-&gt;arrayToCollection($weightArray);</code>，如此重複的邏輯就統一都只存在於 <code>AbstractLogistics</code>，符合 DRY 原則。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action004.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action004.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Super Class 讓我們將 class 內重複的部分抽出來，放到 abstract class 的 protected method 內，如此繼承的 class 就可共用此 method，避免程式碼重複。</div>
<h2 id="第四式_:_Extract_Closure">第四式 : Extract Closure</h2><hr>
<p>雖然我們可以將重複的程式碼透過 <code>Extract Superclass</code> 重構到 <code>abstract class</code>，但有時候會遇到一種程式碼，並不是整塊重複，而是外層重複，內層卻不重複。</p>
<p>對於 <code>method</code> 內有一段外層重複，內層卻不重複的程式碼，就必須使用重構第四式 : <code>Extract Closure</code>，將重複的的程式碼重構到 <code>abstract class</code>，不重複的部分重構到 <code>closure</code>。</p>
<p><strong>BlackCat.php</strong><br></p><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>我們在 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 的 <code>calculateFee()</code> 都可發現，<code>foreach()</code> 與 <code>return</code> 是重複的，偏偏只有中間的 <code>$amount = $amount + (100 + $weight * 10);</code> 不重複，這也是各家計算運費演算法的關鍵。</p>
<p>為了符合 DRY 原則，我們應該將 <code>foreach()</code> 與 <code>return</code> 部分使用 <code>Extract Super Class</code> 重構到 <code>abstract class</code>，但偏偏中間的 <code>$amount = $amount + (100 + $weight * 10);</code> 不同，我們可以使用 <code>Extract Closure</code> 將不同的部分重構成 <code>closure</code>。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>12</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">12</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/c6071d37752b79c66d3c46d374696d196a131d4d#diff-42a8335084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 4 式 : Extract Closure 之 AbstractLogistics</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@param</span> Collection $weights</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loopWeights</span><span class="params">(int <span class="variable">$amount</span>, Collection <span class="variable">$weights</span>, callable <span class="variable">$closure</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + <span class="variable">$closure</span>(<span class="variable">$weight</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>將整個 <code>foreach()</code> 與 <code>return</code> 都重構到 <code>AbstractLogistics</code> 的 <code>loopWeights()</code> 內，但我們清楚 <code>$amount = $amount + (100 + $weight * 10);</code> 是不重複的，必須使用 <code>closure</code> 代替，且因為 <code>closure</code> 必須使用到 <code>$weight</code> 變數，還必須將 <code>$weight</code> 傳入 <code>closure</code>。</p>
<p>所以新重構的 <code>loopWeights()</code> 除了有 <code>int $amount</code> 與 <code>Collection $weights</code> 參數外，還要多一個 <code>callable $closure</code> 傳進來。</p>
<p><strong>BlackCat.php</strong><span class="margin-note-marker"><sup>13</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">13</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/c6071d37752b79c66d3c46d374696d196a131d4d#diff-d579d2515aa8883f19295d0c447879bc" target="_blank" rel="external">重構 4 式 : Extract Closure 之 BlackCat</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;loopWeights(<span class="variable">$amount</span>, <span class="variable">$weights</span>, <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>重複的 <code>foreach()</code> 與 <code>return</code> 已經重構到 <code>AbstractLogistics</code> 的 <code>loopWeights()</code>，<code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 不同的計算邏輯就以 <code>closure</code> 的方式傳入 <code>loopWeights()</code>。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action005.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action005.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Closure 讓我們將 class 內重複的部分抽出來，放到 abstract class 的 protected method 內，不重複的部分則放在各 class， 以 closure 的方式傳入 abstract class，如此就可確保程式碼符合 DRY 原則，且各 class 也保有不重複部分。</div>
<h2 id="第五式_:_Extract_Interface">第五式 : Extract Interface</h2><hr>
<p>當使用 <code>Extract Superclass</code> 與 <code>Extract Closure</code> 之後，基本上已經沒有重複的程式碼，也就是已經符合 DRY 原則。</p>
<p>在 <code>名詞 + 動詞</code> 的 <code>method</code> 名稱部分，<code>名詞</code>不同已經使用 <code>Extract Class</code> 解決，剩下的是相同的<code>動詞</code>，也就是我們發現在 3 個 <code>class</code> 都有相同的 <code>method</code>。</p>
<p>既然 3 個 <code>class</code> 的 <code>method</code> 都相同，我們就可以使用重構第五式 : <code>Extract Interface</code>，以用更宏觀的角度，將這 3 個 <code>class</code> <strong>抽象化</strong>成一個<strong>相同</strong>的 <code>interface</code>。</p>
<p><strong>BlackCat.php</strong><br></p><figure class="highlight php"><figcaption><span>app/Services/BlackCat.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCat</span> <span class="keyword">extends</span> <span class="title">AbstractLogistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$amount</span> = <span class="variable">$this</span>-&gt;loopWeights(<span class="variable">$amount</span>, <span class="variable">$weights</span>, <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>既然 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 都有 <code>calculateFee()</code>，我們可以使用 <code>Extract Interface</code> 將 <code>calculateFee()</code> 抽成 <code>interface</code>，將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 抽象化成 <code>LogisticsInterface</code>。</p>
<p><strong>LogisticsInterface.php</strong><span class="margin-note-marker"><sup>15</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">15</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/5f3b9ba391d95a443d38c246227c7db523206405#diff-8306901f34a7e9b0d27d03dfd45162af" target="_blank" rel="external">重構 5 式 : Extract Interface 之 LogisticsInterface</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/LogisticsInterface.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>建立新的 <code>LogisticsInterface</code>，定義其 <code>method</code> 為 <code>calculateFee()</code>。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/5f3b9ba391d95a443d38c246227c7db523206405#diff-42a8335084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 5 式 : Extract Interface 之 AbstractLogistics</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><code>abstract class</code> 當然要遵守 <code>interface</code>。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>16</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">16</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/5f3b9ba391d95a443d38c246227c7db523206405#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 5 式 : Extract Interface 之 ShippingService</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> string $companyName</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, string <span class="variable">$companyName</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$companyName</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'BlackCat'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Hsinchu'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> Hsinchu();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PostOffice'</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> Post();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$logistics</span> = <span class="keyword">new</span> BlackCat();</span><br><span class="line">                <span class="variable">$amount</span> = <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>既然 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 都抽象化成 <code>LogisticsInterface</code>，無論是 new <code>BlackCat</code>、<code>Hsinchu</code> 或 <code>Post</code>，抽象化看起來都是同一個 <code>$logistics</code> 物件，這就是物件導向的<strong>多型</strong>，同一個物件，卻可能來自於相同 <code>interface</code> 的不同 <code>class</code>。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action006.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action006.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extract Interface 讓我們將相同 method 的 class，抽象化成相同 interface 的物件，儘管將來需求改變，但只要 interface 不變，程式碼就不用修改，方便將來維護。</div>
<h2 id="第六式_:_Dependency_Injection">第六式 : Dependency Injection</h2><hr>
<p>經過 <code>Extract Interface</code> 之後，我們已經將 3 個 <code>class</code> 抽象化成相同 <code>interface</code>，理論上我們只需依賴 <code>interface</code> 即可，但程式碼中卻還使用 <code>switch case</code>，並實際去 new 3 個 <code>class</code>，也就是還實際依賴這 3 個 <code>class</code>。</p>
<p>實際依賴這 3 個 <code>class</code> 目前沒什麼大問題，但只要將來有新的 <code>class</code>，儘管也實踐相同 <code>interface</code>，卻仍要繼續修改 <code>swich case</code> 去 new 新的 <code>class</code>，這將造成維護上的負擔。理想是將來無論新增任何 <code>class</code>，都不須修改程式碼，這就必須使用重構第六式 : <code>Dependency Injection</code>，將 <code>switch case</code> 拿掉，由 Service Container 幫我們注入 <code>LogisticsInterface</code> 物件，而不是與特定 <code>class</code>耦合，達到<strong>低耦合</strong>的目標。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>17</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">17</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/0ce3069cc50fe22d6e121aa00bb78183e10f14a4#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 6 式 : Dependency Injection 之 ShippingService</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> LogisticsInterface $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, LogisticsInterface <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>因為不在需要由 <code>switch case</code> 判斷 <code>$companyName</code>，因此將參數 <code>$companyName</code> 從 <code>calculateFee()</code> 移除。</p>
<p>新增 <code>LogisticsInterface $logistics</code> 參數，由 Service Container 幫我們將所依賴的 <code>$logistics</code> 物件注入。</p>
<p>由於 <code>$logistics</code> 已經抽象化為 <code>LogisticsInterface</code>，所以根本不需要任何 <code>switch case</code> 判斷，因此將來若有新的 <code>class</code> 也不用擔心，一定不需修改 <code>calculateFee()</code>。</p>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>18</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">18</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/0ce3069cc50fe22d6e121aa00bb78183e10f14a4#diff-7f0bd9973ba9075fe67417d92b296620" target="_blank" rel="external">重構 6 式 : Dependency Injection 之 ShippingServiceTest</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingServiceTest.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">BlackCat</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Hsinchu</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">LogisticsInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">Post</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為360<span class="params">()</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line">        App::bind(LogisticsInterface::class, BlackCat::class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weightArray'</span> =&gt; <span class="variable">$weights</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">360</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>但是 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 接實踐 <code>LogisticsInterface</code>，Service Container 怎麼知道要注入哪一個物件呢?</p>
<p>必須在 <code>ShippingService</code> 建立之前，先使用 <code>App::bind()</code> 告訴 Service Container，<code>LogisticsInterface</code> 須與哪一個 <code>class</code> 綁定，若要綁定 <code>BlackCat</code>，就是 <code>App::bind(LogisticsInterface::class, BlackCat::class);</code>。</p>
<p>實務上 <code>App::bind()</code> 要寫哪裡呢?</p>
<ol>
<li>寫在整合測試。</li>
<li>若要動態切換 <code>class</code> : 寫在 Controller。</li>
<li>若一開始就決定 <code>class</code> : 寫在 Service Provider。</li>
</ol>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action007.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action007.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Dependency Injection 讓我們由外部注入內部所需相依的物件，因此 method 就不必再根據條件去判斷該相依哪一個物件，也因為不用判斷，因此將來若有新的相依物件，也不需修改程式碼，方便日後維護。</div>
<h2 id="第七式_:_Extract_Trait">第七式 : Extract Trait</h2><hr>
<p>重構一到六式，都是教我們的都是以<strong>垂直</strong>方式將 <code>method</code> 抽取到 <code>class</code>、<code>abstract class</code>、<code>interface</code>，也就是其都有<strong>垂直</strong>的關係，但某些 <code>method</code>，並沒有垂直的關係，反而是跨 <code>class</code> 的<strong>水平</strong>關係。</p>
<p>對於這種<strong>水平</strong>關係的 <code>method</code>，就必須使用重構第七式 : <code>Extract Trait</code>，將 <code>method</code> 重構到 <code>trait</code>。</p>
<p><strong>LogTrait.php</strong><span class="margin-note-marker"><sup>19</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">19</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/6368f9029123319026e7cc79375863cbadba8989#diff-d8f8691de3be79d81a11ebaf4ca3346a" target="_blank" rel="external">重構 7 式 : Extract Trait 之 LogTrait</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/LogTrait.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Log</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> LogTrait</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">(int <span class="variable">$amount</span>)</span></span><br><span class="line">    </span>{</span><br><span class="line">        Log::info(<span class="string">'Amount : '</span> . <span class="variable">$amount</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>我們在寫好 <code>ShippingService</code> 之後，被要求在 <code>calculateFee()</code> 加上 <code>writeLog()</code> 功能。</p>
<p><code>writeLog()</code> 這種功能，要放在 <code>class</code> 或 <code>abstract class</code> 都很怪，因為他根本與 <code>ShippingService</code> 無關，反而是每個 class 都會有 <code>writeLog()</code> 的需求，像這種<strong>水平</strong>關係，我們可以使用 <code>Extract Trait</code> 將 <code>writeLog()</code> 重構到 <code>LogTrait</code>。</p>
<p><strong>AbstractLogistics.php</strong><span class="margin-note-marker"><sup>20</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">20</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/6368f9029123319026e7cc79375863cbadba8989#diff-42a8335084e3f202eb755166d3bc824f" target="_blank" rel="external">重構 7 式 : Extract Trait 之 AbstractLogistics</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/AbstractLogistics.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogistics</span> <span class="keyword">implements</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">LogTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@param</span> Collection $weights</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loopWeights</span><span class="params">(int <span class="variable">$amount</span>, Collection <span class="variable">$weights</span>, callable <span class="variable">$closure</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + <span class="variable">$closure</span>(<span class="variable">$weight</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;writeLog(<span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>重構成 <code>LogTrait</code> 後，只要去 <code>use LogTrait</code>，我們的 <code>class</code> 內會有 <code>writeLog()</code>。</p>
<p>但 <code>$this-&gt;writeLog()</code> 要寫在哪裡呢? 當然也可以寫在每個 <code>class</code> 內的 <code>calculateFee()</code> 內，但這就違反 DRY 了，比較理想的方式是寫在 <code>abstract class</code> 的 <code>loopWeights()</code> 內，這樣 <code>$this-&gt;writeLog()</code> 就只有一份，符合 DRY 原則。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action008.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action008.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Extrait Trait 讓我們不用特別將不相關的 method 重構到 class 與 abstract class 內，所有水平關係的 method，都適合重構到 trait，然後跨 class 重複使用。</div>
<h2 id="第八式_:_Refactor_to_Pattern">第八式 : Refactor to Pattern</h2><hr>
<p>當程式碼重構到第七式，基本上已經符合了物件導向的 <strong>SOLID</strong> 原則，也達到<strong>高內聚、低耦合</strong>目標，算是不錯的程式碼，兼具容易閱讀、容易維護的優點。</p>
<p><strong>單一職責原則 Single Responsibility Principle</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  應該且僅有一個原因引起類別的變更</div><p></p>
<p>原本所有的<strong>計算運費</strong>邏輯都包在 <code>ShippingService</code> 的 <code>calculateFee()</code> 內，只要任何一個廠商的運費修改，都必須修改 <code>ShippingService</code>，因此違反單一職責原則，透過 <code>Extract Method</code> 與 <code>Extract Class</code>，現在已經將黑貓的計算運費邏輯包在 <code>BlackCat</code> 的 <code>calculateFee()</code>，新竹貨運的計算運費邏輯包在 <code>Hsinchu</code> 的 <code>calculateFee()</code>，而郵局的計算運費邏輯也包在 <code>Post</code> 的 <code>calculateFee()</code>，每個廠商的運費修改，都不會影響到其他 <code>class</code>，符合<strong>單一職責原則</strong>的要求。</p>
<p><strong>開放封閉原則 Open Closed Principle</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  對於擴展是開放的，對於修改是封閉的</div><p></p>
<p>將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 透過 <code>Extract Interface</code> 抽象化成 <code>LogisticsInterface</code>，對於 <code>ShippingServie</code> 來說，不再直接相依 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 三個 class，僅相依於 <code>LogisticsInterface</code>，將來若有新的需求，只需新建立 <code>class</code> 實踐 <code>LogisticsInterface</code> 即可，也就是<strong>對擴展是開放的</strong>，但因為 <code>ShippingService</code> 僅相依於 <code>LogisticsInterface</code>，不相依於任何 <code>class</code>，就算將來有新建立的 <code>class</code>，也不需修改 <code>ShippingService</code>，所以<strong>對修改是封閉</strong>的，符合<strong>開放封閉原則</strong>的要求。</p>
<p><strong>里式替換原則 Liskov Substitution Principle</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  所有參照基礎類別的地方，必須可以透明地使用衍生類別的物件代替，而不需要任何改變</div><p></p>
<p>我們將 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 程式碼重複的地方，透過 <code>Extract Super Class</code> 與 <code>Extract Closure</code> 重構到 <code>AbstractLogistics</code> 這個 <code>abstract class</code>，為了確保所有繼承於 <code>AbstractLogistics</code> 的 <code>class</code> 都能被替換，我們特別要求 <code>AbstractLogistics</code> 實現 <code>LogisticsInterface</code>，確保所有使用 <code>abstract class</code> 物件，都可以透明地使用其衍生 <code>class</code> 所代替，符合<strong>里氏替換原則</strong>的要求。</p>
<p><strong>介面隔離原則 Interface Segregation Principle</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  用戶端程式碼不應該依賴它用不到的介面</div><p></p>
<p>因為 <code>LogisticsInterface</code> 只有 <code>calculateFee()</code> 單一 <code>method</code>，因此看不到<strong>介面隔離原則</strong>，實務上當 <code>interface</code> 有多個 <code>method</code>，而你發現 <code>class</code> 對於 <code>interface</code> 有空實作時，或者使用者根本沒用到 <code>interface</code> 所提供的所有 <code>method</code>，就表示 <code>interface</code> 應該再細化，再切成更小的 <code>interface</code>。</p>
<p>事實上，介面隔離原則就是另一個角度的單一職責原則，單一職責是以<strong>責任</strong>的角度來看 <code>class</code>，而介面隔離原則是以<strong>需求</strong>的角度看 <code>interface</code>，所以兩者並不衝突，符合單一職責的 <code>class</code> 仍然會實現多個 <code>interface</code>，符合<strong>介面隔離原則</strong>的要求。</p>
<p><strong>依賴反轉原則 Dependency Inversion Principle</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  高階模組不該依賴低階模組，兩者都應該依賴其抽象</div><p></p>
<p>在透過 <code>Dependency Injection</code> 之前，我們是直接在 <code>ShippingService</code> 直接去 new <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code>，也就是高階模組的 <code>ShippingService</code> 直接依賴於低階模組的 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code>，這就違反了<strong>高階模組不該依賴低階模組</strong>，既然已經透過 <code>Extract Interface</code> 抽象化出 <code>LogisticsInterface</code>，我們就可以透過 <code>Dependency Injection</code>，由高階模組自行注入所依賴的低階模組，此時高階模組 <code>ShippingService</code> 只依賴於 <code>LogisticsInterface</code>，而低階模組 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 也只依賴於 <code>LogisticsInterface</code>，也就是<strong>兩者都應該依賴其抽象</strong>，符合<strong>依賴反轉原則</strong>的要求。</p>
<p><strong>高內聚 High Cohesion</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  應該將功能高度相關的 method 放在同一個 class 與 interface 內，這樣才方便閱讀、方便維護、方便重複使用。</div><p></p>
<p><strong>單一職責原則</strong>、<strong>介面隔離原則</strong>講的就是<strong>高內聚</strong>，<code>Extract Method</code>、<code>Extract Class</code>、<code>Extract Trait</code> 則是實現<strong>高內聚</strong>的具體方法，讓我們將功能高度相關的 <code>method</code> 放在同一個 <code>class</code> 與 <code>interface</code> 內。</p>
<p><strong>低耦合 Low Coupling</strong><br></p><div class="alert alert-info"><i class="fa fa-info"></i>  class 與 class 間的耦合應該盡量減少，避免因為 class 的修改，而導致其他 class 也必須隨之修改。</div><p></p>
<p><strong>開放封閉原則</strong>、<strong>里氏替換原則</strong>、<strong>依賴反轉原則</strong>講的就是<strong>低耦合</strong>，<code>Extract Interface</code>、<code>Dependency Injection</code>、<code>Replace Interface with Closure</code> 則是實現<strong>低耦合</strong>的具體方法，讓我們將原本 <code>class</code> 與 <code>class</code> 之間的耦合，變成只與 <code>interface</code> 或 <code>closure</code> 的耦合，由於耦合變少變小，因此將來所做的任何修改，影響將降到最低。</p>
<p><strong>設計模式 Design Pattern</strong><br>若重構到這個階段，突然靈機一動想到在這個情境下，某個 Design Pattern 更適合，則可以繼續重構，基本上，Design Pattern 就是前人所留下來破解某個劍招的精妙劍法，只要用的時機對，就會非常的巧，但不必刻意的追求一定要用什麼 Design Pattern 才算好的物件導向，就如<strong>獨孤九劍</strong>一樣，隨機應變，用得到是緣份，用不到也沒關係，因為重構到第七式，已經符合了 <strong>SOLID</strong> 原則了。</p>
<p>以本例而言，事實上就是 <strong>Strategy Pattern</strong>，但若你完全不知道 Strategy Pattern 也沒關係，只要從重構一式打到重構七式，就會自然長出 Strategy Pattern 了。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Refactor to Pattern 讓我們可以重構出更精妙的程式碼，但不必強求，隨緣使用即可。</div>
<h2 id="第九式_:_Replace_Interface_with_Closure">第九式 : Replace Interface with Closure</h2><hr>
<p>物件導向為人詬病的，就是 <code>interface</code> 滿天飛，與檔案數目爆炸，但函數式編程思維加入後，一切有了變化。</p>
<p>若我們的 <code>interface</code> 只有一個 <code>method</code>，或經由 <strong>ISP</strong> 介面隔離原則切成很多小小的 interface 後，就可使用重構第九式 : <code>Replace Interface with Closure</code>，將 <code>interface</code> 拿掉，改用 <code>closure</code>。</p>
<p><strong>LogisticsInterface.php</strong><br></p><figure class="highlight php"><figcaption><span>app/Services/LogisticsInterface.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LogisticsInterface</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>)</span> : <span class="title">int</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><code>LogisticsInterface</code> 只有單一的 <code>calculateFee()</code> 而已，我們可以嘗試將 <code>interface</code> 拿掉。</p>
<p><strong>Logistics.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a3c0f64c7c088a831c448c2f8f0947d22afdb82a#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 9 式 : Replace Interface to Closure 之 Logistics</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/Logistics.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Collection</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logistics</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="keyword">use</span> <span class="title">LogTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@return</span> Collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToCollection</span><span class="params">(array <span class="variable">$weightArray</span>)</span>: <span class="title">Collection</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = collect(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$weights</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@param</span> int $amount</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, int <span class="variable">$amount</span>, callable <span class="variable">$closure</span>)</span>: <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$weights</span> = <span class="variable">$this</span>-&gt;arrayToCollection(<span class="variable">$weightArray</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$weights</span> <span class="keyword">as</span> <span class="variable">$weight</span>) {</span><br><span class="line">            <span class="variable">$amount</span> = <span class="variable">$amount</span> + <span class="variable">$closure</span>(<span class="variable">$weight</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;writeLog(<span class="variable">$amount</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$amount</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>建立新的 <code>Logistics</code>，事實上就是將 <code>AbstractLogistics</code> 的程式碼全部搬過來，因為既然沒有 <code>interface</code>，那 <code>abstract class</code>也不需要了。</p>
<p><strong>ShippingService.php</strong><span class="margin-note-marker"><sup>21</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">21</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a3c0f64c7c088a831c448c2f8f0947d22afdb82a#diff-f5a5e92e47f06ee2e5a8bf84d5f19590" target="_blank" rel="external">重構 9 式 : Replace Interface to Closure 之 ShippingService</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingService.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingService</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 計算運費</span><br><span class="line">     * <span class="doctag">@param</span> array $weightArray</span><br><span class="line">     * <span class="doctag">@param</span> callable $closure</span><br><span class="line">     * <span class="doctag">@param</span> Logistics $logistics</span><br><span class="line">     * <span class="doctag">@return</span> int</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateFee</span><span class="params">(array <span class="variable">$weightArray</span>, callable <span class="variable">$closure</span>, Logistics <span class="variable">$logistics</span>)</span> : <span class="title">int</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="variable">$amount</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$logistics</span>-&gt;calculateFee(<span class="variable">$weightArray</span>, <span class="variable">$amount</span>, <span class="variable">$closure</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>原本 <code>calculateFee()</code> 的最後一個參數是依賴注入進 <code>LogisticsInterface</code> 物件，為了要將 <code>interface</code> 拿掉，我們只注入 <code>Logistics</code> 即可。</p>
<p>也因為 <code>LogisticsInterface</code> 已經拿掉，所以 <code>BlackCat</code>、<code>Hsinchu</code> 與 <code>Post</code> 也順便拿掉，也就是說，原本需要 <code>interface</code> 與 <code>class</code> 封裝計算運費邏輯，現在完全退化到只需 <code>closure</code> 即可。</p>
<p><strong>ShippingServiceTest.php</strong><span class="margin-note-marker"><sup>22</sup></span> <span class="block margin-div-outer"><span class="block margin-div-inner"><span class="block margin-note"><span class="margin-note-marker">22</span>GitHub Commit : <a href="https://github.com/oomusou/Laravel53Refactor9_demo/commit/a3c0f64c7c088a831c448c2f8f0947d22afdb82a#diff-7f0bd9973ba9075fe67417d92b296620" target="_blank" rel="external">重構 9 式 : Replace Interface to Closure 之 ShippingServiceTest</a></span></span></span><br></p><figure class="highlight php"><figcaption><span>app/Services/ShippingServiceTest.php</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>(strict_types = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Services</span>\<span class="title">ShippingService</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippingServiceTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">/** <span class="doctag">@test</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> 黑貓<span class="title">_</span>當重量為1<span class="title">_2_3</span>時<span class="title">_</span>費用為360<span class="params">()</span></span><br><span class="line">    </span>{</span><br><span class="line">        <span class="comment">/** arrange */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** act */</span></span><br><span class="line">        <span class="variable">$weights</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="variable">$actual</span> = App::call(ShippingService::class . <span class="string">'@calculateFee'</span>, [</span><br><span class="line">            <span class="string">'weightArray'</span> =&gt; <span class="variable">$weights</span>,</span><br><span class="line">            <span class="string">'closure'</span>     =&gt; <span class="function"><span class="keyword">function</span> <span class="params">(int <span class="variable">$weight</span>)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">100</span> + <span class="variable">$weight</span> * <span class="number">10</span>);</span><br><span class="line">            },</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** assert */</span></span><br><span class="line">        <span class="variable">$expected</span> = <span class="number">360</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;assertEquals(<span class="variable">$expected</span>, <span class="variable">$actual</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>原本我們必須在 <code>arrange</code> 使用 <code>App::bind(LogisticsInterface::class, BlackCat::class);</code>，但目前沒有 <code>LogisticsInterface</code> 與 <code>BlackCat</code>，所以 <code>App::bind()</code> 也不需要了。</p>
<p>原本計算運費邏輯是封裝在 <code>BlackCat</code> 內，但因為現在已經沒有 <code>BlackCat</code>，改用 <code>closure</code>，所以必須在測試提供 <code>closure</code>。</p>
<p><a href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action009.png" class="fancybox" rel="gallery0"><img src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/action009.png" alt=""></a></p>
<p>重構之後馬上跑測試，務必要全部測試案例都 <span class="label label-success">綠燈</span>，確認沒有重構失敗。</p>
<p>我們也發現檔案只剩下 <code>ShippingService</code>、<code>Logistics</code> 與 <code>LogTrait</code> 而已，其他檔案都因為 <code>Replace Interface with Closure</code> 而重構刪除了。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  Replace Interface with Closure 讓我們適時的將不必要的 interface 以 closure 取代，將可解決原來物件導向 interface 滿天飛與檔案數目爆炸的問題，但也不是每個 interface 都要重構成 closure，必須自己依照實際情形加以判斷，沒有最佳解，只有最適解。</div>
<h2 id="Conclusion">Conclusion</h2><hr>
<ul>
<li>基本上重構<strong>第一式</strong>到<strong>第七式</strong>，我每次 TDD 重構都會打一遍，讓自己的程式碼符合 <strong>SOLID</strong> 原則與實現<strong>高內聚、低耦合</strong>，但<strong>第八式</strong>與<strong>第九式</strong>則不一定，會視實際狀況隨機應變。</li>
<li><code>Replace Interface with Closure</code> 的出現，讓物件導向有了不同的實作方式，事實上很多設計模式，如 <code>Strategy Pattern</code>、<code>Command Pattern</code>、<code>Chain of Responsibility Pattern</code> ….等，都可使用 <code>closure</code> 方式實作，但也不是所有的 <code>interface</code> 都要重構成 <code>closure</code>，但最少是個方法，可依實際需求決定是否重構。</li>
<li>重構有很多方法，主要是針對 legacy code，若使用 TDD 方式，因為測試先寫，已經考慮了<strong>可測試性</strong>，基本上程式碼的體質已經不差，只要再加上<strong>重構九式</strong>的輔助，寫出符合 <strong>SOLID</strong> 原則與<strong>高內聚、低耦合</strong>的程式碼將不再是遙不可及的事情。</li>
</ul>
<h2 id="Sample_Code">Sample Code</h2><hr>
<p>完整的範例可以在我的 <a href="https://github.com/oomusou/Laravel53Refactor9_demo" target="_blank" rel="external">GitHub</a> 上找到。</p>
<h2 id="Reference">Reference</h2><hr>
<p>Martin Fowler, <a href="https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672" target="_blank" rel="external">Refactoring : Improving The Design of Existing Code</a><br>范綱, <a href="https://www.tenlong.com.tw/items/9864340468?item_id=1007025" target="_blank" rel="external">大話重構</a><br>Joey Chen, <a href="https://dotblogs.com.tw/hatelove/2013/01/11/learning-tdd-in-30-days-catalog-and-reference" target="_blank" rel="external">30 天快速上手 TDD</a><br>大澤木小鐵, <a href="http://slides.com/jaceju/design-patterns-by-examples/" target="_blank" rel="external">從實例學習設計模式 (使用 PHP)</a></p>
	  
	</div>

	<div>
  	<center>
	<div class="pagination">
<ul class="pagination">
	 
				
    	<li class="prev"><a href="http://oomusou.io/angular/angular-di/" class="alignleft prev"><i class="fa fa-arrow-circle-o-left"></i>Prev</a></li>
  		

        <li><a href="http://oomusou.io/tags"><i class="fa fa-archive"></i>Archive</a></li>

		
		   <li class="next"><a href="http://oomusou.io/laravel/laravel-email-queue-forever/" class="alignright next">Next<i class="fa fa-arrow-circle-o-right"></i></a></li>         
        
	
</ul>
</div>

    </center>
	</div>
	
	<!-- comment -->
	
	
	</div> <!-- col-md-9/col-md-12 -->
	
	
		<div class="col-md-3"> 

	<!-- date -->
	
	<div class="meta-widget">
	<i class="fa fa-clock-o"></i>
	2016-11-27 
	</div>
	

	<!-- tags -->
	
	<div class="meta-widget">
	<a data-toggle="collapse" data-target="#tags"><i class="fa fa-tags"></i></a>		  
    <ul id="tags" class="tag_box list-unstyled collapse in">	  
	    
  <li><a href="http://oomusou.io/tags/FP/">FP<span>1</span></a></li> <li><a href="http://oomusou.io/tags/OOP/">OOP<span>3</span></a></li> <li><a href="http://oomusou.io/tags/Refactoring/">Refactoring<span>11</span></a></li> <li><a href="http://oomusou.io/tags/TDD/">TDD<span>23</span></a></li>
    </ul>
	</div>
		

    <hr>
	
</div><!-- col-md-3 -->

	

</div><!-- row -->

	</div>
  </div>
  <div class="container-narrow">
  <footer>  </footer>
</div> <!-- container-narrow -->
  
  <script type="text/javascript">
  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
    (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
    e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');

  _st('install', 'hAXbiVYFC92XF16_EhCh','2.0.0');
  </script>



  
<a id="gotop" href="http://oomusou.io/refactor/refactor-in-action/#" style="display: inline;">   
  <span>▲</span> 
</a>

<script src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/jquery.imagesloaded.min.js"></script>
<script src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/gallery.js"></script>
<script src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/bootstrap.min.js"></script>
<script src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/main.js"></script>



<link rel="stylesheet" href="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/jquery.fancybox.css" media="screen" type="text/css">
<script src="./如何在 TDD 使用「重構九式」_ _ 點燈坊_files/jquery.fancybox.pack.js"></script>
<script type="text/javascript">
(function($){
  $('.fancybox').fancybox();
})(jQuery);
</script>



   
<div class="st-injected-content-generated st-install-hAXbiVYFC92XF16_EhCh" data-st-install-key="hAXbiVYFC92XF16_EhCh" id="st-injected-content">
<div class="st-ui-embed st-search-chrome-overlay-output st-search-escape-hide-outputs st-search-zoom-on-mobile" style="display: none;">
    <div class="st-ui-overlay st-search-hide-outputs"></div>
  <!-- Swiftype input and results overlay -->
  <div class="st-ui-container st-ui-container-overlay  st-ui-injected-overlay-container ">
    <!-- HEADER -->
    <div class="st-ui-container-header_bar st-position-container">
        <section class="st-ui-header">
          <form>
            <input class="st-default-search-input st-search-set-focus" type="text" value="" placeholder="Search this site" id="st-overlay-search-input" autocomplete="off" autocorrect="off" autocapitalize="off">
          </form>
          <span class="st-ui-search-icon"></span>

            <a class="st-ui-close-button st-search-hide-outputs">Close</a>

            <a class="st-ui-stamp" href="https://swiftype.com/" target="_blank">search by swiftype</a>
        </section>
    </div>

    <!-- LEFT SIDEBAR -->
    <div class="st-ui-container-left_sidebar st-position-container">
      <div class="st-ui-injected-search-controls">
      </div>
    </div>

    <!-- RIGHT SIDEBAR -->
    <div class="st-ui-container-right_sidebar st-position-container">
      <div class="st-ui-injected-container-right_sidebar">
        <div class="st-ui-injected-search-controls">
        </div>
      </div>
    </div>

    <!-- PRIMARY CONTENT -->
    <div class="st-ui-container-primary_content st-position-container">
        <section class="st-ui-slide-autocomplete st-autocomplete-keyboard-navigable st-autocomplete-transient-on-select-and-results" data-st-target-element="#st-overlay-search-input" data-st-active-query-class="active">
          <span class="st-ui-type-heading-small">suggested results</span>
          <div class="st-autocomplete-results"><div class="st-query-present" style="display: none;"></div></div>
        </section>

        <section class="st-ui-content st-search-results"><div class="st-query-not-present">
          <span class="st-ui-fallback"></span>
        </div><div class="st-query-present" style="display: none;"></div></section>

      <section class="st-ui-no-results st-search-suggestions"><div class="st-query-not-present">
      </div></section>
    </div>



    <!-- FOOTER -->
    <div class="st-ui-container-footer_bar st-position-container">
      <section class="st-ui-footer">
          <span class="st-ui-search-summary st-search-summary"></span>
        <span class="st-ui-pagination st-search-pagination"></span>
      </section>
    </div>
  </div>
</div>
<div class="st-default-autocomplete" data-st-target-element=".st-default-search-input" style="display: none;">
  <div class="st-autocomplete-results st-ui-autocomplete"><div class="st-query-present" style="display: none;"></div></div>
</div>
</div></body></html>