<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<title>Operating System Study Guide - Chapter 5 Deadlock</title>
<link href="Operating%20System%20Study%20Guide%20-%20Chapter%205%20Deadlock_files/os_style.css" rel="stylesheet" type="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=Big5">
<meta http-equiv="Content-Language" content="ZH-TW">
<meta name="keywords" content="swanky,Operating System Study Guide">
<meta name="description" content="Operating System">
<meta name="author" content="swanky">
</head>
<body>
<h1>Chapter 5 Deadlock(死結)</h1>
<a href="http://www.csie.ntnu.edu.tw/%7Eswanky/os/chap4.htm">前一章</a> | <a href="http://www.csie.ntnu.edu.tw/%7Eswanky/os/index.htm">首頁</a> | <a href="http://www.csie.ntnu.edu.tw/%7Eswanky/os/chap6.htm">下一章</a>
<ul>
  <li>Deadlock Def.(★)</li>
  <li>成立的四個必要條件(★★★★)</li>
  <li>與starvation比較(★)</li>
  <li>死結處理方式</li>
  <ol>
    <li>Deadlock Prevention(★★★★)</li>
    <li>Deadlock Avoidance(Banker's Algo.)(★★★★★)</li>
    <li>Deadlock Detection(Algo.) &amp; Recovery(★★)</li>
  </ol>
  <li>相關圖形</li>
  <ul>
    <li>Resource Allocation Graph(★★★)</li>
    <li>RAG + claim edge(用在Avoidance)</li>
    <li>Wait-for Graph(用在Detection)(★★)</li>
  </ul>
  <li>定理for Deadlock Free(★★★★★)</li>
</ul>
<h2>Deadlock Def：</h2>
一組processes陷入互相等待的情況(Circular waiting)<br>
造成processes接無法往下執行，使得CPU utilization及Throughput大幅降低
<h2>Deadlock vs Starvation</h2>
<table border="1">
  <tbody><tr>
    <th>Deadlock</th>
    <th>Starvation</th>
  </tr>
  <tr>
    <td>一組processes形成circular waiting，導致processes無法往下執行</td>
    <td>某(些)processes形成infinite Blocking<br>
      ∵長期無法取得完成工作所需資源</td>
  </tr>
  <tr>
    <td>不允許資源preemptive</td>
    <td>易發生在不公平、preemptive的環境</td>
  </tr>
  <tr>
    <td>CPU utilization及Throughput會大幅下降</td>
    <td>與此無關聯</td>
  </tr>
</tbody></table>
相似點：皆為資源分配及協調出了問題
<h2>Deadlock之例子</h2>
<ul>
  <li>系統面</li>
  eg. spooling
  <li>日常生活面</li>
  <ul>
    <li>交通路口未淨空</li>
    <li>梯子、黑羊白羊走獨木橋</li>
    <li>立法不周延</li>
  </ul>
</ul>
<h2>Deadlock成立的四個必要條件</h2>
<ol>
  <li>Mutual exclusion(互斥)<br>
    Def：<br>
    資源在同一時間內，至多只允許一個process使用(不允許&#8805;2個processes同時使用)<br>
    其它欲使用此resource的process必須wait，直到該process釋放resource為止<br>
    eg. printer、Disk、CPU etc.<br>
    eg. 不具mutual exclusion→Read-only File</li>
  <li>Hold &amp; wait(持有並等待) (Partial Allocation)<br>
    Def：<br>
    process持有部分資源且又在等待其它processes所持有的資源</li>
  <li>No preemption(不可強取豪奪)<br>
    Def：<br>
    process不可搶奪其它waiting process所持有的資源，除非其自願釋放</li>
  <li>Circular waiting(循環等待)<br>
    Def：<br>
    存在一組process<br>
    P<sub>0</sub>→P<sub>1</sub>→P<sub>2</sub>→...→P<sub>n</sub>→P<sub>0</sub><br>
    P<sub>0</sub>~P<sub>n</sub>形成Circular waiting</li>
</ol>
<p>OSC:
</p><ol>
  <li><strong>Mutual Exclusion</strong><br>
    not required for sharable resources; must hold for nonsharable resources.</li>
  <li><strong>Hold and Wait</strong><br>
    must guarantee that whenever a process requests a resource, it does not hold any other resources.
    <ul>
      <li>Require process to request and be allocated all its resources 
before it begins execution, or allow process to request resources only 
when the process has none.</li>
      <li>Low resource utilization; starvation possible.</li>
    </ul>
  </li>
  <li><strong>No Preemption</strong>
    <ul>
      <li>If a process that is holding some resources requests another 
resource that cannot be immediately allocated to it, then all resources 
currently being held are released.</li>
      <li>Preempted resources are added to the list of resources for which the process is waiting.</li>
      <li>Process will be restarted only when it can regain its old resources, as well as the new ones that it is requesting.</li>
    </ul>
  </li>
  <li><strong>Circular Wait</strong><br>
    impose a total ordering of all resource types, and require that each
 process requests resources in an increasing order of enumeration.</li>
</ol>
<p></p>
<h2>Resource Allocation Graph(資源分配圖)</h2>
<ol>
  <li>Def：<br>
    令G=&lt;V, E&gt;為一有向圖<br>
    其中V：Vertex(頂點集合)<br>
    可分為二類型態：
    <ol>
      <li>Process：以?表示</li>
      <li>Resource：以?表示</li>
    </ol>
    而E：Edge(邊集合)亦分為二類
    <ol>
      <li>Allocation Edge(配置邊)</li>
      記為R<sub>i</sub>→P<sub>j</sub><br>
      資源R<sub>i</sub>已分配給Process<sub>j</sub><br>
      <li>Request Edge(申請邊)</li>
      記為R<sub>i</sub>←P<sub>j</sub><br>
      Process<sub>j</sub>申請資源R<sub>i</sub>
    </ol>
  </li>
  <li>結論(★)
    <ol>
      <li>No cycle→No Deadlock</li>
      <li>有cycle<em>不一定</em>有Deadlock(針對if各類資源之數量&gt;1個 [Multiple instances])(★)</li>
      說明：<br>
      此圖雖有cycle存在，但系統不會有死結<br>
      ∵一旦P<sub>3</sub>完成工作，會釋放R<sub>2</sub>給P<sub>2</sub>，則cycle就不存在<br>
      即不存在cycle，則無Deadlock
      <li>if所有資源皆為單一量(single instance)<br>
        則有cycle←→有死結 </li>
    </ol>
  </li>
</ol>
<h2>Deadlock Prevention(死結預防)</h2>
<ol>
  <li>觀念：<br>
    打破四個必要條件之其一，就可保證死結永不發生</li>
  <li>作法：
    <ol>
      <li>打破"Mutual Exclusion"</li>
      很困難(不可能)打破<br>
      ∵Mutual Exclusion是(某些)Resources<strong>與生俱來</strong>的性質
      <li>打破"Hold&amp;Wait"</li>
      作法：OS可採取下列二個協定之一即可
      <ol>
        <li>協定一</li>
        除非process可以一次取得完成工作所需的全部資源，才允許process持有資源，否則不准持有任何資源
        <li>協定二</li>
        允許process在執行之初可先持有部分資源，一旦要申請新資源，則必須先釋放持有的全部資源，才可以提申請
      </ol>
      <li>打破"No Preemption"</li>
      作法：改為preemption即可<br>
      process可以搶奪waiting process所持有的Resource<br>
      Note：死結不會發生。但有可能產生starvation<br>
      解決：採取類似"Aging"技術(將<strong>被搶奪的次數</strong>，列為提高優先權之依據)
      <li>打破"Circular Waiting"</li>
      作法：OS需採取下列措施：
      <ol>
        <li>給予每個Resource唯一的(unique)資源編號(ID)</li>
        <li>規定process需依資源編號<strong>遞增</strong>的方式提出申請</li>
        <pre>eg.  持有          申請
 1    R1      →     R3  ok
 2    R3      →     R1  需先釋放R3，才可申請R1
 3    R1,R5   →     R3  釋放R5, 留R1, 即可申請R3
</pre>
        證明：[反證法]<br>
        假設在這樣的規定下，系統仍存在一組形成circular waiting的process如下：<br>
        P<sub>0</sub>(R<sub>0</sub>)→P<sub>1</sub>(R<sub>1</sub>)→P<sub>2</sub>(R<sub>2</sub>)→...→P<sub>n</sub>(R<sub>n</sub>)→P<sub>0</sub>(R<sub>0</sub>)<br>
        且令各process所持有的資源編號分別為：R<sub>0</sub>, R<sub>1</sub>, ..., R<sub>n</sub><br>
        且R<sub>0</sub>≠R<sub>1</sub>≠R<sub>2</sub>≠...≠R<sub>n</sub><br>
        根據<strong>遞增</strong>申請的規則<br>
        竟可推出R<sub>0</sub>&lt;R<sub>1</sub>&lt;R<sub>2</sub>&lt;R<sub>3</sub>&lt;...&lt;R<sub>n</sub><strong>&lt;R<sub>0</sub></strong><br>
        得出R<sub>n</sub>&lt;R<sub>0</sub>此一矛盾現象<br>
        ∴假設不成立，即系統不存在有Circular Waiting之情況!!
      </ol>
    </ol>
  </li>
  <li>Summary：
    <ul>
      <li>優點：保證系統絕不會有死結存在</li>
      <li>缺點：Resource utilization↓Throughput↓</li>
    </ul>
  </li>
</ol>
<h2>Deadlock Avoidance(避免)</h2>
<ol>
  <li>Def：<br>
    當process提資源申請(Request)時，則OS需依據下列資訊：
    <ol>
      <li>系統目前可用的資源數量</li>
      <li>各process對資源的需求量</li>
      <li>各process目前持有的資源量</li>
    </ol>
    執行<strong>Banker's Algorithm</strong>(內含Safety Algorithm)判斷系統<em>若</em>核准後，是否處於Safe state，若是，則核准申請，否則(處於unsafe state)，則否決此次申請，Process則等待依段時間後再重新申請 </li>
</ol>
<h2>Banker's Algorithm</h2>
假設n為process數目，m為resource數目
<ol>
  <li>Data Structure Used</li>
  <ol>
    <li>Request<sub>i</sub>[1..m] (會給)</li>
    表示Process<sub>i</sub>的資源申請量<br>
    其中Request<sub>i</sub>[j]=k，表P<sub>i</sub>申請k個Resource R<sub>j</sub>
    <li>MAX[1..n,1..m] (會給)</li>
    表示各process對各類資源的最大需求量<br>
    其中MAX[i,j]=k，表示P<sub>i</sub>對於Resource<sub>j</sub>的最大需求量為k
    <li>Allocation[1..n,1..m] (會給)</li>
    表示各process目前持有的資源量<br>
    其中Allocation[i,j]=k，表示P<sub>i</sub>目前持有k個Resource<sub>j</sub>
    <li>系統資源總量 (會給)</li>
    <li>Available[1..m] (算)</li>
    Available=資源總量-ΣAllocation<sub>i</sub>
    <li>Need[1..n,1..m] (算)</li>
    Need<sub>i</sub>=MAX<sub>i</sub>-Allocation<sub>i</sub>
  </ol>
  <li>Procedures</li>
  Steps：
  <ol>
    <li>檢查Request<sub>i</sub>&#8804;Need<sub>i</sub><br>
      若不成立，則OS終止此process<br>
      否則goto step 2</li>
    <li>檢查Request<sub>i</sub>&#8804;Available<br>
      若不成立，則Process<sub>i</sub>必須wait直到Resource Available<br>
      否則goto step 3</li>
    <li>(暫時核准)(試算)<br>
      Allocation<sub>i</sub>=Allocation<sub>i</sub>+Request<sub>i</sub><br>
      Need<sub>i</sub>=Need<sub>i</sub>-Request<sub>i</sub><br>
      Available=Abailable-Request<sub>i</sub></li>
    <li>執行"Safety Algorithm"<br>
      if 系統判斷會處於Safe state<br>
      then 核准申請<br>
      else 否決此次申請，稍後再重新申請</li>
  </ol>
</ol>
<h2>Safety Algorithm</h2>
<ol>
  <li>Data Structure Used</li>
  <ol>
    <li>Work[1..m]<br>
      表示系統目前可用資源數量之累計</li>
    <li>Finish[1..n] of Boolean<br>
      Finish[i]的值
      <ol>
        <li>True：P<sub>i</sub>已完成工作</li>
        <li>False：尚未完成工作</li>
      </ol>
    </li>
  </ol>
  <li>Procedures</li>
  Steps：
  <ol>
    <li>設定初值<br>
      Work=Available<br>
      Finish[i]=False, 1&#8804;i&#8804;n</li>
    <li>找出P<sub>i</sub>，滿足兩個條件：
      <ol>
        <li>Finish[i]=False</li>
        <li>Need<sub>i</sub>&#8804;Work</li>
      </ol>
      若可以找到，則goto step 3<br>
      否則goto step 4</li>
    <li>設定Finish[i]=True且Work=Work+Allocation<sub>i</sub><br>
      goto step 2</li>
    <li>檢查Finish陣列，若皆為True，則系統處於Safe State，否則處於Unsafe State</li>
  </ol>
</ol>
Note：
<ol>
  <li>Safe State</li>
  Def：<br>
  存在&#8805;1組"Safe Sequence"使得processes依此順序執行，皆可完成工作<br>
  if 找不出一組Safe Sequence<br>
  then Unsafe State
  <li>Safe, Unsafe, 與Deadlock之關係</li>
</ol>
例題：
<h2>Banker's Algorithm分析</h2>
<ul>
  <li>缺點：太耗費時間，<br>
    n：process個數、m：resource種類數目<br>
    Time Complexity為：O(n<sup>2</sup>*m)</li>
  <li>說明：
    <ol>
      <li>Request<sub>i</sub>&#8804;Need<sub>i</sub>&#8658;O(m)</li>
      <li>Request<sub>i</sub>&#8804;Available&#8658;O(m)</li>
      <li>Allocation<sub>i</sub>=Allocation<sub>i</sub>+Request<sub>i</sub><br>
        Need<sub>i</sub>=Need<sub>i</sub>-Request<sub>i</sub><br>
        Available=Available-Request<sub>i</sub>&#8658;O(m)</li>
      <li>Run"Safety Algo"
        <ol>
          <li>Work=Available&#8658;O(m)<br>
            Finish[i]=False, 1&#8804;i&#8804;n&#8658;O(n)</li>
          <li>找出P<sub>i</sub>, Need<sub>i</sub>&#8804;Work&#8658;O(m)<br>
            Finish[i]=False</li>
          <li>Finish[i]=True&#8658;O(1)<br>
            Work=Work+Allocation<sub>i</sub>&#8658;O(m)</li>
        </ol>
      </li>
      <em>(重點)</em><br>
      2&#8660;3 Loop共檢視process次數為n+(n-1)+(n-2)+...+1=<sup>(n+1)n</sup>/<sub>2</sub><br>
      ∴Total 2,3共花O(n<sub>2</sub>*m)
      <ol start="4">
        <li>check Finish：花O(n)</li>
      </ol>
      ∴Banker's Algo花費：O(n<sup>2</sup>*m)
    </ol>
  </li>
</ul>
<h2>針對"每類資源皆為single instance"之情況，有較為簡易的Avoidance作法</h2>
<h3>使用Resource Allocation Graph+<strong>claim edge</strong></h3>
<ol>
  <li>Def：<br>
    在Resource Allocation Graph中多加入一種邊，稱為claim edge(宣告邊)<br>
    P<sub>i</sub>．．．→R<sub>j</sub>，表示P<sub>i</sub>在未來將會對資源R<sub>j</sub>提出申請</li>
  <li>作法：當Process<sub>i</sub>提出對資源R<sub>j</sub>之申請後，則執行下列steps：
    <ol>
      <li>將claim edge P<sub>i</sub>．．．→R<sub>j</sub>改為Request edgeP<sub>i</sub>→R<sub>j</sub></li>
      <li>再將Request edge改為Allocation EdgeP<sub>i</sub>←R<sub>j</sub></li>
      <li>偵測圖形中是否有cycle存在(O(n<sup>2</sup>)，n：process數)，若有，則表示system為unsafe state<br>
        ∴拒絕此次申請，否則，核准</li>
    </ol>
  </li>
</ol>
例：
<h2>定理<em>(記)</em></h2>
若系統中有n個processes，共享m個資源(同一類)<br>
則system id Deadlock Free的話，必須滿足：
<ol>
  <li>1&#8804;Max<sub>i</sub>&#8804;m</li>
  <li><sub>i=1</sub>&#8721;<sup>n</sup>Max<sub>i</sub>&lt;n+m (Max<sub>i</sub>表Process<sub>i</sub>的資源最大需求量)</li>
</ol>
<p>例1：[計算型]<br>
  若系統中有6部printer，每個process最多需要2部才可以完成工作<br>
  試問在確保system is Deadlock Free，最多可允許?個process在系統內執行。</p>
<p>Ans：<br>
  m=6, Max<sub>i</sub>=2<br>
  條件：
</p><ol>
  <li>1&#8804;Max<sub>i</sub>(2)&#8804;m(6)</li>
  <li><sub>i=1</sub>&#8721;<sup>n</sup>Max<sub>i</sub>&lt;n+m&#8658;2n&lt;n+6&#8658;n&lt;6</li>
</ol>
∴n最多為5個
<p></p>
<p>例2：[證明型]<br>
  pf：<br>
  假設Deadlock存在<br>
  則<sub>i=1</sub>&#8721;<sup>n</sup>Allocation<sub>i</sub>=m<br>
  根據Banker's Algo<br>
  <sub>i=1</sub>&#8721;<sup>n</sup>Need<sub>i</sub>=<sub>i=1</sub>&#8721;<sup>n</sup>Max<sub>i</sub>-<sub>i=1</sub>&#8721;<sup>n</sup>Allocation<sub>i</sub><br>
  ∴<sub>i=1</sub>&#8721;<sup>n</sup>Need<sub>i</sub>+<sub>i=1</sub>&#8721;<sup>n</sup>Allocation<sub>i</sub>=<sub>i=1</sub>&#8721;<sup>n</sup>Max<sub>i</sub><br>
  依條件二<br>
&#8658;<sub>i=1</sub>&#8721;<sup>n</sup>Need<sub>i</sub>+m&lt;n+m<br>
&#8658;<sub>i=1</sub>&#8721;<sup>n</sup>Need<sub>i</sub>&lt;n&#8658;∴至少有一個process的Need<sub>i</sub>為0(即不給額外資源，此process仍能完成)<br>
  依條件一(Max<sub>u</sub>&gt;1)<br>
  ∴此process完成工作後，必定會釋放出&#8805;1個resource(∵Allocation<sub>i</sub>&#8805;1)可供其它process使用，並陸續完成工作(即有safe sequence)<br>
  ∴system is Deadlock Free (P5-27，第三題) </p>
<h2>DeadLock Detection&amp;Recovery</h2>
<ol>
  <li>系統中可能存在Deadlock(if <strong>prevention</strong> and <strong>avoidance</strong>不用)<br>
    ∵有必要提供：
    <ol>
      <li>偵測死結是否存在</li>
      <li>若死結存在，則必須打破死結，恢復正常的機制</li>
    </ol>
  </li>
  <li>優點：resource utilization較高，Throughput↑<br>
    缺點：cost太高</li>
</ol>
<h2>Deadlock Detection Algorithm</h2>
<ol>
  <li>Data Structure Used
    <ol>
      <li>Available[1..m] 表系統目前可用資源數量</li>
      <li>Allocation[1..n,1..m] 各process目前所持有的資源量</li>
      <li><strong>Request[1..n,1..m] 表示目前各process所提出的各類資源申請數量</strong></li>
      <li>Work[1..m] 目前可用資源數量之累計</li>
      <li>Finish[1..n] of boolean<br>
        Finish[i]=
        <ul>
          <li>false：尚未完成且Allocation≠0</li>
          <li>trun：已完成</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>Procedures<br>
    steps
    <ol>
      <li>設定初值<br>
        Work = Available<br>
        Finish[i]=
        <ul>
          <li>false, if Allocation≠0</li>
          <li>true, otherwise</li>
        </ul>
      </li>
      <li>找到P<sub>i</sub>滿足
        <ol>
          <li>Finish[i]=false</li>
          <li>Request<sub>i</sub>&#8804;Work</li>
        </ol>
        若找到，則goto 3 ，否則 goto 4</li>
    </ol>
  </li>
  <li>設定Finish[i]=true 且 Work = Work + Allocation<sub>i</sub> goto 2</li>
  <li>檢查Finish鎮列，若皆為true，則表示system無死結存在<br>
    否則，Deadlock存在 (且那些Finish[i]為false的processes陷入死結)</li>
</ol>


</body></html>