<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>














  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="Executors_files/stdlayout.css" type="text/css">














  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <link rel="stylesheet" href="Executors_files/print.css" type="text/css">














  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">














  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <title>Executors</title>
</head>


<body>














<h3><a href="https://openhome.cc/Gossip/">From
Gossip@Openhome</a></h3>














<h1><a href="https://openhome.cc/Gossip/JavaGossip-V2/index.html">Java Gossip:&nbsp;Executors</a></h1>


<table style="text-align: left; width: 946px; height: 32px;" cellspacing="0" cellpadding="0" border="0">


  <tbody>


    <tr>


      <td style="width: 676px; vertical-align: top;"> <small>有時候您需要建立一堆Thread來執行一些小任務，然而頻繁的建立Thread有時會是個開銷，因為Thread的建立必須與作業系統互動，如果能建立一個Thread pool來管理這些小的Thread並加以重複使用，對於系統效能會是個改善的方式。<br>

      <br>






您可以使用Executors來建立Thread pool，Executors有幾個static方法，列出如下：</small>




      <br>






      
      <table style="text-align: left; width: 634px; height: 82px;" cellspacing="2" cellpadding="2" border="1">






  <tbody>






    <tr>






      <td style="background-color: rgb(204, 204, 204); width: 236px;"><small>方法</small></td>






      <td style="background-color: rgb(204, 204, 204); width: 378px;"><small>說明</small></td>






    </tr>






    <tr>






      <td style="width: 236px;"><small><tt>newCachedThreadPool</tt></small></td>






      <td style="width: 378px;"><small>建立可以快取的Thread，每個Thread預設可idle 60秒</small></td>






    </tr>






    <tr>






      <td style="width: 236px;">
      
      
      
      
      
            
            <p class="docText"><small><tt>newFixedThreadPool</tt> </small></p>






      </td>






      <td style="width: 378px;"><small>包括固定數量的Thread</small></td>






    </tr>






    <tr>






      <td style="width: 236px;">
      
      
      
      
      
            
            <p class="docText"><small><tt>newSingleThreadExecutor</tt> </small></p>






      </td>






      <td style="width: 378px;"><small>只有一個Thread，循序的執行指定給它的每個任務</small></td>






    </tr>






    <tr>






      <td style="width: 236px;"><small><tt>newScheduledThreadPool</tt></small></td>






      <td style="width: 378px;"><small>可排程的Thread</small></td>






    </tr>






    <tr>






      <td style="width: 236px;"><small><tt>newSingleThreadScheduledExecutor</tt></small></td>






      <td style="width: 378px;"><small>單一可排程的Thread</small></td>






    </tr>






  
  
  
  
  
        
        </tbody>
      
      </table>






      <br>

      <small>




舉個簡單的實例，下面的程式使用newFixedThreadPool方法建立Thread
pool，當中包括五個可以重複使用的Thread，您可以指定Runnable物件給它，程式中會產生十個Runnable物件，由於Thread
pool中只有五個可用的Thread，所以後來建立的五個Runnable必須等待有空閒的Thread才會被執行：</small><br>














      
      <ul>

        <li>ExecutorDemo.java
  </li>

      
      </ul>











      
      <pre>package onlyfun.caterpillar;<br><br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.Executors;<br><br>public class ExecutorDemo {<br>	public static void main(String[] args) {<br>		<span style="font-weight: bold;">ExecutorService service = Executors.newFixedThreadPool(5);</span><br>		<br>		for(int i = 0; i &lt; 10; i++) {<br>			final int count = i;<br>			<span style="font-weight: bold;">service.submit</span>(new Runnable() {<br>				public void run() {<br>					System.out.println(count);<br>					try {<br>						Thread.sleep(2000);<br>					} catch (InterruptedException e) {<br>						e.printStackTrace();<br>					}<br>					<br>				}<br>			});<br>		}<br>		<br>		<span style="font-weight: bold;">service.shutdown(); // 最後記得關閉Thread pool</span><br>	}<br>}<br></pre>











      <br>

      <small>




submit()方法也接受實作Callable介面的物件，最後傳回Future物件，可以取得Callable執行過後的傳回結果。<br>

      <br>





如果想利用Executors進行排程，例如排定某個工作30秒後執行：<br>

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor( );<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; scheduler.schedule(new Runnable( ) {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public
 void run() {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//
 排程工作<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}, <br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
30, TimeUnit.SECONDS);</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><br>

      <br>





或排定某個工作5秒後執行，之後每30秒執行一次：<br>

      <span style="font-weight: bold; font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor( );<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; final ScheduledFuture future = scheduler.scheduleAtFixedRate(new Runnable( ) {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public
 void run() {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//
 排程工作<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; System.out.println("t");<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}, <br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0, 5, TimeUnit.SECONDS);<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // 排定 60 秒後取消future<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; scheduler.schedule(new Runnable( ) {<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run( ) {<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; future.cancel(false);<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>





&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }, 60, TimeUnit.SECONDS);</span><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"></span><br>

      <br>

      <br>





如上所示，想要取消排程任務，可以呼叫ScheduledFuture的cancel()方法。</small>
























      <br>




 </td>


      <td style="width: 250px; text-align: center; vertical-align: top;"><!-- adsense for content--><script async="" src="Executors_files/analytics.js"></script><script src="Executors_files/ca-pub-9750319131714390.js"></script><script async="" src="Executors_files/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883" data-adsbygoogle-status="done"><ins id="aswift_0_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;width:160px;height:600px;" width="160" height="600" frameborder="0"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br><script async="" src="Executors_files/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><ins id="aswift_1_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;width:160px;height:600px;" width="160" height="600" frameborder="0"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br><script async="" src="Executors_files/adsbygoogle.js"></script><!-- 2015 新版型 160 x 600 廣告 --><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-9750319131714390" data-ad-slot="3747048883" data-adsbygoogle-status="done"><ins id="aswift_2_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><ins id="aswift_2_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;width:160px;height:600px;" width="160" height="600" frameborder="0"></iframe></ins></ins></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script><br><br><br> <!-- adsense for content end --></td>


    </tr>


  
  </tbody>
</table>


<br>

<br>





<br>














<script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', 'UA-143766-1', 'auto');ga('send', 'pageview');</script>


</body></html>