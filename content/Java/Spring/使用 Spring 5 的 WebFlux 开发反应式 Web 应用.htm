<!DOCTYPE html>
<!-- saved from url=(0078)https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html -->
<html lang="en" style="" class="applicationcache geolocation history postmessage svg websockets localstorage sessionstorage websqldatabase webworkers hashchange pointerevents canvas audio canvastext video webgl cssgradients multiplebgs opacity rgba inlinesvg hsla supports svgclippaths smil no-touchevents fontface generatedcontent textshadow cssanimations backgroundsize borderimage borderradius boxshadow csscolumns csscolumns-width csscolumns-span csscolumns-fill csscolumns-gap csscolumns-rule csscolumns-rulecolor csscolumns-rulestyle csscolumns-rulewidth csscolumns-breakbefore csscolumns-breakafter csscolumns-breakinside flexbox flexboxlegacy cssreflections csstransforms csstransforms3d csstransitions indexeddb indexeddb-deletedatabase hires js mac chrome chrome6 webkit webkit5 ibm-grid-xlarge greater-china-imt"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
<meta name="viewport" content="width=device-width, initial-scale=1">      
<link rel="icon" href="https://www.ibm.com/favicon.ico">
<link rel="canonical" href="http://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html">
<meta name="geo.country" content="CN">
<meta name="dcterms.rights" content="© Copyright IBM Corporation 2017">
<meta name="dcterms.date" content="2017-10-25">
<meta name="description" content="Spring 5 通过 Reactor 增加了对反应式编程的支持。WebFlux 模块增加了对反应式 HTTP 和 WebSocket 客户端和 Web 应用的支持。开发人员可以使用 WebFlux 创建高性能的 Web 应用。本文对 WebFlux 模块进行详细介绍，包括其中的 HTTP 和 WebSocket 支持。">	
<meta name="keywords" content="java, spring, webflux, tttjca">
<meta name="robots" content="index,follow">
<title>使用 Spring 5 的 WebFlux 开发反应式 Web 应用</title>
    
<script type="text/javascript" async="" charset="utf-8" id="utag_53" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/js"></script><script type="text/javascript" async="" charset="utf-8" id="tealium_cormetrics2" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/eluminate.js"></script><script type="text/javascript" async="" charset="utf-8" id="dle_api_9ef03ddfc953a7b0f2bef26c66b6d966fd4c2ef500a64ccf7b0ad99fbed2b063" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/p_9ef03ddfc953a7b0f2bef26c66b6d966fd4c2ef500a64ccf7b0ad99fbed2b063.js"></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/d_devwrks.js" type="application/javascript" async=""></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/reveal" type="application/javascript" async=""></script><script istrusted="true" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/analytics-marketing.js" type="text/javascript"></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/analytics.min.js" type="text/javascript"></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.js" type="text/javascript" async=""></script><script> 
    digitalData = {
        "page":{
            "category":{
                "primaryCategory":"SOFDCJVACN"
            },
            "pageInfo":{
                "effectiveDate":"2017-10-25",
                "language":"zh-CN",
                "publishDate":"2017-10-25",
                "publisher":"IBM Corporation",
                "version":"v18",
                "ibm":{ 
                    "contentDelivery":"IBM developerWorks template",
                    "contentProducer":"IBM developerWorks",
                    "country":"CN",
                    "owner":"developerWorks/China/IBM",
                    "subject":"TT300",
                    "type":"CT316",
                    "topic":"Java 技术,Spring",
                    "topicId":"9,873",
                    "contentArea":"java",
                    "contentAreaId":"1",
                    "contentType":"article",
                    "contentId":"1051322",
                },
                "keywords":"java, spring, webflux, tttjca",
                "description":"Spring 5 通过 Reactor 增加了对反应式编程的支持。WebFlux 模块增加了对反应式 HTTP 和 WebSocket 客户端和 Web 应用的支持。开发人员可以使用 WebFlux 创建高性能的 Web 应用。本文对 WebFlux 模块进行详细介绍，包括其中的 HTTP 和 WebSocket 支持。"
            }
        }
    };
    window._analytics = {
        "coremetrics": false,
        "optimizely": false,
        "googleAddServices": false,
        "addRoll": false,
        "intercom": false,
        "fullStory": false,
        "hotjar": false,
        "tealeaf": false,
        "nps": false,
        "segment_key": 'HU3dbkAG5wE0F1IkRf9S1RexlAqo3jby'
    };
</script>
	
    <meta name="twitter:card" content="summary">
<meta name="twitter:site" content="@developerworks">
<meta property="og:title" content="使用 Spring 5 的 WebFlux 开发反应式 Web 应用">
<meta property="og:description" content="Spring 5 通过 Reactor 增加了对反应式编程的支持。WebFlux 模块增加了对反应式 HTTP 和 WebSocket 客户端和 Web 应用的支持。开发人员可以使用 WebFlux 创建高性能的 Web 应用。本文对 WebFlux 模块进行详细介绍，包括其中的 HTTP 和 WebSocket 支持。">
    <meta property="og:image" content="http://www.ibm.com/developerworks/i/dw-social-201508.png">
<!-- Segment meta tag -->
<meta name="segment" property="developerWorks (developerWorks)" producttitle="developerWorks" value="Java Chinese (developerWorks)">      
<!-- SITE MON : START (DO NOT DELETE) -->
<!-- developerWorks monitoring token -->
<!-- SITE MON : END (DO NOT DELETE) -->

<!-- HEADER_SCRIPTS_AND_CSS_INCLUDE -->
<!-- <script src="//cdn.optimizely.com/js/5399420604.js"></script> -->
<!-- BEGIN: Use this section to set page specific variables for the Page Tag -->
<script language="JavaScript">var NTPT_PGEXTRA="ibmSkillLevel=1&ibmCmaId=1051322&ibmContentAreas=java";</script>
<!--END -->
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/ida_stats.js"></script>
<link href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/www.css" rel="stylesheet">
<link href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/syntaxhighlighter.css" rel="stylesheet">
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/www.js"></script><style></style>
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/syntaxhighlighter.js"></script>    
<link href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/tables.css" rel="stylesheet">
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/tables.js"></script>   
<!--  Masthead/footer  -->
<link href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-mf-v18.css" rel="stylesheet">
<!-- <link href="//dw1.s81c.com/developerworks/css/dw-mf/v18/alt-signedin-ux.css" rel="stylesheet" /> -->   
<!--[if lt IE 9]>
    <link href="//dw1.s81c.com/developerworks/css/dw-mf/v18/dw-mf-ie8fix.css?v=022216" rel="stylesheet" />
<![endif]-->
<link href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-article.css" rel="stylesheet">
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-auth-properties.js"></script>
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-auth.js"></script>
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-mf.js"></script>
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-include.js"></script>     
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-article.js"></script>
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-auto-links.js"></script>     
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/tactic.js"></script>
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/tacticbindlinks.js"></script>
<!-- Segment -->
<script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/bluemix-analytics.min.js"></script>    

<!-- 
<PageMap>
    <DataObject type="document">
        <Attribute name="topic">Java 技术,Spring</Attribute>
        <Attribute name="topicId">9,873</Attribute>
        <Attribute name="contentArea">java</Attribute>
        <Attribute name="contentAreaId">1</Attribute>
        <Attribute name="abstract">Spring 5 通过 Reactor 增加了对反应式编程的支持。WebFlux 模块增加了对反应式 HTTP 和 WebSocket 客户端和
            Web 应用的支持。开发人员可以使用 WebFlux 创建高性能的 Web 应用。本文对 WebFlux 模块进行详细介绍，包括其中的 HTTP 和
            WebSocket 支持。</Attribute>
        <Attribute name="pub.date">2017-10-25</Attribute>
        <Attribute name="contentType">article</Attribute>
    </DataObject>
</PageMap>
-->        

<script async="" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/hotjar-42920.js"></script><style id="ibm-sitenav-menu-hidelinks">@media screen and (max-width: 602px) { .ibm-sitenav-menu-list{display:none} } @media screen and (min-width: 603px) { .ibm-mobilemenu-sitenavmenu {display:none} }</style><style id="ibm-masthead-hidelinks">@media screen and (max-width: 552px) { .ibm-masthead-categories,#ibm-megamenu-sections{display:none} }@media screen and (max-width: 552px) { .ibm-mh-marketplace-link{display:none} }</style><style type="text/css" class="jquery-comments-css">.jquery-comments ul.navigation li.active:after {background: #2793e6 !important;</style><style type="text/css" class="jquery-comments-css">.jquery-comments ul.navigation ul.dropdown li.active {background: #2793e6 !important;</style><style type="text/css" class="jquery-comments-css">.jquery-comments .highlight-background {background: #2793e6 !important;</style><style type="text/css" class="jquery-comments-css">.jquery-comments .highlight-font {color: #2793e6 !important;}</style><style type="text/css" class="jquery-comments-css">.jquery-comments .highlight-font-bold {color: #2793e6 !important;font-weight: bold;}</style><script type="text/javascript" async="" charset="utf-8" id="utag_ibm.web_53" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.53.js"></script><script type="text/javascript" async="" charset="utf-8" id="utag_ibm.web_44" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.44.js"></script><script type="text/javascript" async="" charset="utf-8" id="utag_ibm.web_46" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.46.js"></script><script type="text/javascript" async="" charset="utf-8" id="utag_ibm.web_94" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.94.js"></script><script type="text/javascript" async="" charset="utf-8" id="tiqapp" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.v.js"></script><script async="" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/modules-526d80f8c01454f84b75838f21c8706e.js"></script><style type="text/css">iframe#_hjRemoteVarsFrame {display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;}</style><script type="text/javascript" async="" charset="utf-8" id="LOTCC_10026" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/cc.js"></script><script type="text/javascript" async="" charset="utf-8" id="utag_ibm.web_45" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/utag.45.js"></script><img width="1" height="1" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/b=48350156"><script language="javascript" type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/50200000.js"></script><script language="javascript" type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/rules_50200000.js"></script><script language="javascript" type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dispatcher-v3.js"></script><script type="text/javascript" async="" charset="utf-8" id="tealium_visitor_service_45main" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/016079a3f77f008feb1c09ca7e6004078005107000838"></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/yahoo-min.js" type="text/javascript"></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/cp-v3.js" type="text/javascript"></script><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/json-min.js" type="text/javascript"></script><script type="text/javascript" async="" charset="utf-8" id="tealium_visitor_service_45main" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/016079a3f77f008feb1c09ca7e6004078005107000838(1)"></script></head>
<body id="ibm-com" class="ibm-type ibm-sitenav-menu">
	
<div id="ibm-top" class="ibm-landing-page dw-sitenav">

<!-- MASTHEAD_BEGIN -->
<div id="ibm-masthead" role="banner" aria-label="IBM" class="ibm-mhtype-minimal">
    <div id="ibm-universal-nav" class="">    
  
        <nav role="navigation" aria-label="IBM">
            <div id="ibm-home"><a href="https://www.ibm.com/cn/zh/?lnk=m">IBM®</a></div>
            <ul id="ibm-menu-links" role="toolbar" aria-label="Site map" class="ibm-hide">
                <li><a href="https://www.ibm.com/sitemap/cn/zh/">站点地图</a></li>
            </ul><div class="ibm-masthead-rightside"><p class="ibm-mh-marketplace-link ibm-button-link ibm-fleft ibm-padding-bottom-0"><a class="ibm-btn-small ibm-btn-sec ibm-btn-blue-50" href="https://www.ibm.com/marketplace/?lnk=mp">市场</a></p><div id="ibm-search-module" role="search" aria-labelledby="ibm-masthead" class="ibm-has-scope">
            <div class="ibm-masthead-search-close"><p class="ibm-ind-link ibm-icononly ibm-padding-bottom-0"><a href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html#" class="ibm-close-link ibm-nospacing">关闭</a></p></div><form id="ibm-search-form" action="https://www.ibm.com/Search/" method="get">
                <p>
                    <label for="q">IBM</label>
                    <input type="text" maxlength="100" value="" placeholder="搜索" name="q" id="q" aria-label="搜索 developerWorks" autocomplete="off" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-owns="ibm-search-typeahead-container"><input name="lnk" type="hidden" value="mhsrch">
                    <input type="hidden" value="18" name="v">
                    <input type="hidden" value="utf" name="en">
                    <input type="hidden" value="zh" name="lang">
                    <input type="hidden" value="cn" name="cc">
                    <input type="hidden" name="sn" value="dw">
                    <input type="hidden" name="dws" value="cndw">
                    <input type="hidden" name="hpp" value="20">
                    <span class="ibm-search-scope"><input class="ibm-styled-checkbox" data-init="false" type="checkbox" name="sn" value="" id="ibm-mh-scopeoption"> <label for="ibm-mh-scopeoption">In Marketplace</label></span><button role="button" type="submit" id="ibm-search" class="ibm-search-link" value="提交"><span class="ibm-access">提交</span></button>
                </p>
            </form><form class="ibm-hide" id="ibm-default-scope-form" action="https://www.ibm.com/marketplace/search/cn/zh-cn" method="get"><input name="terms" type="text"><input name="lnk" type="hidden" value="mhmpsrch"></form>
        </div><div id="ibm-search-typeahead-container" aria-expanded="false" class="ibm-search-typeahead-container"></div><ul aria-label="Tools" role="menubar" class="ibm-masthead-iconsonly"><li role="presentation" class="ibm-masthead-item-signin"><button role="button" aria-haspopup="true" aria-owns="ibm-signin-minimenu-container" class="ibm-profile-link">我的 IBM</button><ul id="ibm-signin-minimenu-container" role="menu" aria-label="Profile" class="ibm-dropdown-menu">		<li class="ibm-dropdown-menu-primary" role="presentation" data-linktype="notifications"> 			<a class="" href="https://myibm.ibm.com/dashboard/?lnk=mmi" tabindex="0">我的 IBM</a> 		</li>		<li class="ibm-dropdown-menu-primary menu-heading" role="presentation">				<span tabindex="0">developerWorks</span>			</li>		<li class="ibm-dropdown-menu-primary ibm-signin-alt" role="presentation">			<a href="https://www.ibm.com/developerworks/dwwi/jsp/ssologin.jsp?d=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;lang=zh&amp;a=dwmav" role="menuitem">登录</a>		</li>		<li class="ibm-dropdown-menu-primary dw-register-alt" role="presentation">			<a href="https://www.ibm.com/developerworks/dwwi/jsp/ssoregister.jsp?d=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;lang=zh&amp;a=dwmav" role="menuitem">注册</a>		</li></ul></li><li role="presentation" class="ibm-masthead-item-menu"><button role="button" aria-haspopup="true" aria-owns="ibm-burger-menu-container" class="ibm-menu-link">站点导航</button></li></ul></div> 
        </nav>
  
        
       
    </div>
</div><div class="ibm-mobilemenu ibm-hide" id="ibm-burger-menu-container" aria-labelledby="ibm-burgermenu-a11y" role="dialog" tabindex="0"><p class="ibm-hide" id="ibm-burgermenu-a11y">站点导航</p><div class="ibm-mobilemenu-close"><p class="ibm-icononly ibm-fright ibm-ind-link ibm-nospacing"><a class="ibm-close-link" href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html?lnk=hm#">关闭</a></p></div><div class="ibm-mobilemenu-section ibm-mobilemenu-sitenavmenu"><ul role="menubar"><li class="ibm-mobile-section-heading ibm-mobile-sitename">
        <a href="https://www.ibm.com/developerworks/cn/?lnk=hm">
            <img width="186" height="24" alt="developerWorks®" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-mf-wordmark.svg">
        </a>
    </li>
                            <li class="dw-navpage-learn" role="presentation">
                    <a href="https://www.ibm.com/developerworks/cn/topics/?lnk=hm" role="menuitem" tabindex="0">学习</a>
                </li>
                    
                <li class="dw-navpage-develop" role="presentation">
                    <a href="https://www.ibm.com/developerworks/cn/downloads/?lnk=hm" role="menuitem" tabindex="-1">开发</a>
                </li>                    

                <li class="dw-navpage-connect" role="presentation">
                    <a href="https://www.ibm.com/developerworks/cn/community/?lnk=hm" role="menuitem" tabindex="-1">社区</a>
                </li>  
        </ul></div><div class="ibm-mobilemenu-section"><ul class="ibm-mobilemenu-mhlinks" aria-label="发现 IBM"><li><a href="https://www.ibm.com/marketplace/?lnk=hmmp">市场</a></li><li><div data-widget="showhide" data-type="panel" class="ibm-show-hide ibm-widget-processed"><h2><a href="javascript:void();">产品</a></h2><div class="ibm-container-body" style="display: none;"><ul><li><a href="https://www.ibm.com/products/cn/zh/?lnk=hmhmpr_cnzh"><span>产品</span></a></li><li><a href="https://www.ibm.com/analytics/cn/zh/?lnk=hmmpr_bua_cnzh&amp;lnk2=learn"><span>大数据与分析</span></a></li><li><a href="https://www.ibm.com/cloud-computing/cn/zh?lnk=hmmpr_bucl_cnzh&amp;lnk2=learn"><span>云计算</span></a></li><li><a href="https://www.ibm.com/ibm/cn/cognitive/outthink/?lnk=hmmpr_buce_cnzh&amp;lnk2=learn"><span>认知</span></a></li><li><a href="https://www.ibm.com/watson/customer-engagement/cn-zh/?lnk=hm"><span>认知客户互动</span></a></li><li><a href="https://www.ibm.com/internet-of-things/cn-zh/?lnk=hmmpr_iot_cnzh&amp;lnk2=learn"><span>物联网</span></a></li><li><a href="https://www.ibm.com/solutions/cn/zh/index.html?lnk=hm"><span>行业解决方案</span></a></li><li><a href="https://www.ibm.com/it-infrastructure/cn-zh/?lnk=hmmpr_buit_cnzh&amp;lnk2=learn"><span>IT 基础架构</span></a></li><li><a href="https://www.ibm.com/mobilefirst/cn/zh/?lnk=hmmpr_bumf_cnzh&amp;lnk2=learn"><span>移动</span></a></li><li><a href="https://www.ibm.com/security/cn-zh/?lnk=hmmpr_buse_cnzh&amp;lnk2=learnquick"><span>IBM 安全</span></a></li><li><a href="https://www.ibm.com/social-business/cn-zh/?lnk=hm"><span>社交协作与人才管理</span></a></li><li><a href="https://www.ibm.com/services/cn/zh/watson/explorer.html?lnk=hm"><span>Watson</span></a></li></ul></div></div></li><li><div data-widget="showhide" data-type="panel" class="ibm-show-hide ibm-widget-processed"><h2><a href="javascript:void();">服务</a></h2><div class="ibm-container-body" style="display: none;"><ul><li><a href="https://www.ibm.com/services/cn/gbs/consulting/?lnk=hm"><span>业务咨询</span></a></li><li><a href="https://www.ibm.com/technologyservices/cn/zh/?lnk=hmmse_ts_cnzh&amp;lnk2=learn#technology-outsourcing"><span>技术服务</span></a></li><li><a href="https://www.ibm.com/financing/cn/zh/index.html?lnk=hmmse_fin_cnzh&amp;lnk2=learn"><span>融资</span></a></li><li><a href="https://www.ibm.com/solutions/cn/zh/index.html?lnk=hm"><span>行业解决方案</span></a></li><li><a href="https://www.ibm.com/training/?lnk=hm"><span>培训与技能 (US)</span></a></li></ul></div></div></li><li><a href="https://www.ibm.com/solutions/cn/zh/?lnk=hmmin">行业</a></li><li><div data-widget="showhide" data-type="panel" class="ibm-show-hide ibm-widget-processed"><h2><a href="javascript:void();">开发人员</a></h2><div class="ibm-container-body" style="display: none;"><ul><li><a href="https://www.ibm.com/developerworks/cn/?lnk=hmmdev_dw_cnzh&amp;lnk2=learn"><span>developerWorks</span></a></li><li><a href="https://www.ibm.com/partnerworld?lnk=hmmdev_pw_cnzh&amp;lnk2=learn"><span>PartnerWorld</span></a></li></ul></div></div></li><li><a href="https://www.ibm.com/support/cn/zh/?lnk=hmmsu_cnzh">支持</a></li><li><a href="https://www.ibm.com/employment/cn/?lnk=hmmca_cnzh">工作机会</a></li></ul></div></div><div class="ibm-hide ibm-mhplaceholder"></div><!-- MASTHEAD_END -->
	    
<!-- LAYOUT -->
<div id="ibm-content-wrapper">
    <!-- LEADSPACE_BEGIN -->
    <header role="banner" aria-labelledby="ibm-pagetitle-h1">
        
        <!-- MASTHEAD_SITENAV_BEGIN -->
        <div class="ibm-sitenav-menu-container" data-widgetprocessed="true">
    <div class="ibm-sitenav-menu-name">
        <a href="https://www.ibm.com/developerworks/cn/">
            <img width="186" height="24" alt="developerWorks®" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-mf-wordmark.svg">
        </a>
    </div>
    <div class="ibm-sitenav-menu-list" style="opacity: 1;">
        <ul role="menubar">
                            <li class="dw-navpage-learn" role="presentation">
                    <a href="https://www.ibm.com/developerworks/cn/topics/" role="menuitem" tabindex="0">学习</a>
                </li>
                    
                <li class="dw-navpage-develop" role="presentation">
                    <a href="https://www.ibm.com/developerworks/cn/downloads/" role="menuitem" tabindex="-1">开发</a>
                </li>                    

                <li class="dw-navpage-connect" role="presentation">
                    <a href="https://www.ibm.com/developerworks/cn/community/" role="menuitem" tabindex="-1">社区</a>
                </li>  
        </ul>
    </div>
</div>        <!-- MASTHEAD_SITENAV_END -->
        
        <!-- NAVIGATION_TRAIL_BEGIN -->
        <div id="ibm-leadspace-head" class="ibm-alternate">
            <div id="ibm-leadspace-body">
                <nav aria-label="Breadcrumb" role="navigation">                     
                            <ul id="dw-navigation-trail" itemscope="" itemtype="http://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="https://www.ibm.com/developerworks/cn/topics/"><span itemprop="name">学习</span></a><meta itemprop="position" content="1"></li><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="https://www.ibm.com/developerworks/cn/java/"><span itemprop="name">Java technology</span></a><meta itemprop="position" content="2"></li></ul>
                </nav>
            </div>
        </div>
        <!-- NAVIGATION_TRAIL_END -->
        
    </header>
    <!-- LEADSPACE_END -->
    
    <!-- MAIN_CONTENT_BEGIN -->
    <main role="main" aria-label=""> 
        <div id="ibm-pcon">
            <!-- BEGIN_IBM-CONTENT -->
            <div id="ibm-content">
                <!-- BEGIN_IBM-CONTENT-BODY -->
                <div id="ibm-content-body">
                    <!-- BEGIN_IBM-CONTENT-MAIN -->
                    <div id="ibm-content-main" class="dw-article">                        
                        <!-- BEGIN_INTERIOR-COLUMNS -->
                                <div class="ibm-columns dw-article-toc">
                                    <!-- LEFT_6_2_CONTENT_COLUMN_BEGIN -->  
                                    <div id="dw-article-toc-container" class="ibm-col-6-2">
                                        <div id="dw-article-toc-body" data-widget="scrollable" data-height="514" style="width: 380px; height: 514px;" class="ibm-widget-processed"><div class="nano-content" tabindex="-1">
                                            <h2>内容</h2><div class="ibm-alternate-rule"><hr></div><ul role="directory" aria-label="内容" class="ibm-plain-list"><li class="dw-highlight"><a onclick="tocLink(&#39;#ibm-pagetitle-h1&#39;)" role="link" tabindex="0">概览</a></li><li><a onclick="tocLink(&#39;#1WebFlux简介outline&#39;)" role="link" tabindex="0">WebFlux 简介</a></li><li><a onclick="tocLink(&#39;#2Java注解编程模型outline&#39;)" role="link" tabindex="0">Java
                注解编程模型</a></li><li><a onclick="tocLink(&#39;#3函数式编程模型outline&#39;)" role="link" tabindex="0">函数式编程模型</a></li><li><a onclick="tocLink(&#39;#4客户端outline&#39;)" role="link" tabindex="0">客户端</a></li><li><a onclick="tocLink(&#39;#5测试outline&#39;)" role="link" tabindex="0">测试</a></li><li><a onclick="tocLink(&#39;#6小结outline&#39;)" role="link" tabindex="0">小结</a></li><li><a onclick="tocLink(&#39;#7参考资源resourcesoutline&#39;)" role="link" tabindex="0">参考资源
                (resources)</a></li><li><a onclick="tocLink(&#39;#icomments&#39;)" role="link" tabindex="0">评论</a></li></ul>
                                        </div><div class="nano-pane" style="display: none; opacity: 1; visibility: visible;"><div class="nano-slider" style="height: 514px; transform: translate(0px, 0px);"></div></div></div>
                                    </div>
                                    <!-- LEFT_6_2_CONTENT_COLUMN_END -->
                                    
                                    <!-- CENTER_6_4_CONTENT_COLUMN_BEGIN -->
                                    <div class="ibm-col-6-4">
                                        <h1 id="ibm-pagetitle-h1" class="ibm-h1">使用 Spring 5 的 WebFlux 开发反应式 Web 应用 </h1>
                                        <!-- Article Top Bar -->
                                                <div class="ibm-columns dw-article-topbar">
                                                    <!-- Author and article info. -->
                                                    <div class="ibm-col-6-2 ibm-col-medium-6-4 dw-article-metadata">
                                                        <div class="dw-article-avatar"><img width="42" height="42" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-author.png" alt=""></div><div class="dw-article-authordate">成 富<br><span class="dw-article-pubdate">2017 年 10 月 25 日发布</span></div>
                                                    </div>
                                                    <!-- Social -->
                                                    <div class="ibm-col-6-2 ibm-col-medium-6-4 ibm-col-small-6-2 dw-article-social">
                                                        <!-- Sharing links -->
                                                        <div id="dw-article-share-inline">
                                                            <div class="dw-article-sharelink-inline">
                                                                <div class="ibm-sharethispage"><h4 class="ibm-bold">分享此页面</h4><p class="ibm-icononly"><a class="ibm-weibo-encircled-link" href="http://service.weibo.com/share/share.php?url=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html%&amp;title=%E4%BD%BF%E7%94%A8%20Spring%205%20%E7%9A%84%20WebFlux%20%E5%BC%80%E5%8F%91%E5%8F%8D%E5%BA%94%E5%BC%8F%20Web%20%E5%BA%94%E7%94%A8&amp;language=zh_cn" data-id="weibo" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Weibo</a><a class="ibm-googleplus-encircled-link" href="https://plus.google.com/share?url=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;t=%E4%BD%BF%E7%94%A8%20Spring%205%20%E7%9A%84%20WebFlux%20%E5%BC%80%E5%8F%91%E5%8F%8D%E5%BA%94%E5%BC%8F%20Web%20%E5%BA%94%E7%94%A8" data-id="googleplus" onclick="return IBMCore.common.module.sharethispage.gotoUrl(window.open(), this);">Google+</a><a class="ibm-email-encircled-link" href="mailto:?subject=%E4%BD%BF%E7%94%A8%20Spring%205%20%E7%9A%84%20WebFlux%20%E5%BC%80%E5%8F%91%E5%8F%8D%E5%BA%94%E5%BC%8F%20Web%20%E5%BA%94%E7%94%A8&amp;body=http%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html" data-id="email" onclick="">用电子邮件发送本页面</a></p></div>
                                                            </div>
                                                        </div>
                                                        <!-- Number of comments and link to comments -->
                                                        <div id="dw-article-cmts">
                                                            <div class="dw-article-cmtslink">
                                                                <a onclick="tocLink(&#39;#icomments&#39;)" href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html#icomments" role="link" tabindex="0" aria-label="Comments">
                                                                    <img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/dw-article-cmt-icon.png" width="29" height="29" alt="Comments">
                                                                </a>
                                                            </div>
                                                            <div class="dw-article-cmtslink">
                                                                <a onclick="tocLink(&#39;#icomments&#39;)" href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html#icomments" role="link" tabindex="0">
                                                                    <div id="nCmts">9</div>
                                                                </a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                        <!-- Article Body -->
                                        
                                        <p>Spring 5 是流行的 Spring 框架的下一个重大的版本升级。Spring 5
                中最重要改动是把反应式编程的思想应用到了框架的各个方面，Spring 5 的反应式编程以 Reactor 库为基础。在之前的文章《使用
                Reactor 进行反应式编程》中，已经对 Reactor 库进行了详细的介绍。读者如果需要了解
                Reactor，可以参考之前的那篇文章。Spring 5 框架所包含的内容很多，本文只重点介绍其中新增的 WebFlux 模块。开发人员可以使用
                WebFlux 创建高性能的 Web 应用和客户端。本文对 WebFlux 模块进行了详细介绍，包括其中的 HTTP、服务器推送事件和
                WebSocket 支持。</p><h2 id="1WebFlux简介outline" class="ibm-h2">WebFlux 简介</h2><p>WebFlux 模块的名称是 spring-webflux，名称中的 Flux 来源于 Reactor 中的类 Flux。该模块中包含了对反应式
                HTTP、服务器推送事件和 WebSocket
                的客户端和服务器端的支持。对于开发人员来说，比较重要的是服务器端的开发，这也是本文的重点。在服务器端，WebFlux
                支持两种不同的编程模型：第一种是 Spring MVC 中使用的基于 Java 注解的方式；第二种是基于 Java 8 的 lambda
                表达式的函数式编程模型。这两种编程模型只是在代码编写方式上存在不同。它们运行在同样的反应式底层架构之上，因此在运行时是相同的。WebFlux
                需要底层提供运行时的支持，WebFlux 可以运行在支持 Servlet 3.1 非阻塞 IO API 的 Servlet
                容器上，或是其他异步运行时环境，如 Netty 和 Undertow。</p><p>最方便的创建 WebFlux 应用的方式是使用 Spring Boot 提供的应用模板。直接访问 Spring Initializ
                网站（http://start.spring.io/），选择创建一个 Maven 或 Gradle 项目。Spring Boot 的版本选择
                2.0.0 M2。在添加的依赖中，选择 Reactive Web。最后输入应用所在的分组和名称，点击进行下载即可。需要注意的是，只有在选择了
                Spring Boot 2.0.0 M2 之后，依赖中才可以选择 Reactive Web。下载完成之后可以导入到 IDE
                中进行编辑。本文的示例代码使用 Intellij IDEA 2017.2 进行编写。</p><p>本文从三个方面对 WebFlux 进行介绍。首先是使用经典的基于 Java 注解的编程模型来进行开发，其次是使用 WebFlux
                新增的函数式编程模型来进行开发，最后介绍 WebFlux 应用的测试。通过这样循序渐进的方式让读者了解 WebFlux 应用开发的细节。</p><h2 id="2Java注解编程模型outline" class="ibm-h2">Java
                注解编程模型</h2><p>基于 Java 注解的编程模型，对于使用过 Spring MVC 的开发人员来说是再熟悉不过的。在 WebFlux
                应用中使用同样的模式，容易理解和上手。我们先从最经典的 Hello World 的示例开始说明。代码清单 1 中的 BasicController
                是 REST API 的控制器，通过@RestController 注解来声明。在 BasicController 中声明了一个 URI
                为/hello_world 的映射。其对应的方法 sayHelloWorld()的返回值是
                Mono&lt;String&gt;类型，其中包含的字符串"Hello World"会作为 HTTP 的响应内容。</p><h5 id="listing1" class="ibm-h5">清单 1. Hello World 示例
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_240074" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@RestController</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class BasicController {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@GetMapping("/hello_world")</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">String</code><code class="htmlscript plain">&gt; sayHelloWorld() {</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Mono.just("Hello World");</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>从代码清单 1 中可以看到，使用 WebFlux 与 Spring MVC 的不同在于，WebFlux 所使用的类型是与反应式编程相关的 Flux 和
                Mono 等，而不是简单的对象。对于简单的 Hello World
                示例来说，这两者之间并没有什么太大的差别。对于复杂的应用来说，反应式编程和负压的优势会体现出来，可以带来整体的性能的提升。</p><h3 id="21RESTAPIoutline" class="ibm-h3">REST API</h3><p>简单的 Hello World 示例并不足以说明 WebFlux 的用法。在下面的小节中，本文将介绍其他具体的实例。先从 REST API
                开始说起。REST API 在 Web 服务器端应用中占据了很大的一部分。我们通过一个具体的实例来说明如何使用 WebFlux 来开发 REST
                API。</p><p>该 REST API 用来对用户数据进行基本的 CRUD 操作。作为领域对象的 User 类中包含了 id、name 和 email
                等三个基本的属性。为了对 User 类进行操作，我们需要提供服务类 UserService，如代码清单 2 所示。类 UserService 使用一个 Map
                来保存所有用户的信息，并不是一个持久化的实现。这对于示例应用来说已经足够了。类 UserService 中的方法都以 Flux 或 Mono
                对象作为返回值，这也是 WebFlux 应用的特征。在方法 getById()中，如果找不到 ID 对应的 User 对象，会返回一个包含了
                ResourceNotFoundException 异常通知的 Mono 对象。方法 getById()和
                createOrUpdate()都可以接受 String 或 Flux 类型的参数。Flux 类型的参数表示的是有多个对象需要处理。这里使用
                doOnNext()来对其中的每个对象进行处理。</p><h5 id="listing2" class="ibm-h5">清单 2. UserService
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_721491" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Service</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">class UserService {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private final Map&lt;</code><code class="htmlscript keyword">String</code><code class="htmlscript plain">, User&gt; data = new ConcurrentHashMap&lt;&gt;();</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; list() {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Flux.fromIterable(this.data.values());</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; getById(final Flux&lt;</code><code class="htmlscript keyword">String</code><code class="htmlscript plain">&gt; ids) {</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return ids.flatMap(id -&gt; Mono.justOrEmpty(this.data.get(id)));</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Mono&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; getById(final String id) {</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Mono.justOrEmpty(this.data.get(id))</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.switchIfEmpty(Mono.error(new ResourceNotFoundException()));</code></div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; createOrUpdate(final Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; users) {</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return users.doOnNext(user -&gt; this.data.put(user.getId(), user));</code></div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Mono&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; createOrUpdate(final User user) {</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.data.put(user.getId(), user);</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Mono.just(user);</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Mono&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; delete(final String id) {</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Mono.justOrEmpty(this.data.remove(id));</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number30 index29 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>代码清单 3 中的类 UserController 是具体的 Spring MVC
                控制器类。它使用类 UserService 来完成具体的功能。类 UserController 中使用了注解@ExceptionHandler
                来添加了 ResourceNotFoundException 异常的处理方法，并返回 404 错误。类 UserController
                中的方法都很简单，只是简单地代理给 UserService 中的对应方法。</p><h5 id="listing3" class="ibm-h5">清单 3. UserController
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_982278" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@RestController</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">@RequestMapping("/user")</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class UserController {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private final UserService userService;</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Autowired</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public UserController(final UserService userService) {</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">this.userService = userService;</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@ResponseStatus(value = HttpStatus.NOT_FOUND, reason = "Resource not found")</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@ExceptionHandler(ResourceNotFoundException.class)</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void notFound() {</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@GetMapping("")</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; list() {</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return this.userService.list();</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@GetMapping("/{id}")</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt;getById(@PathVariable("id") final String id) {</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return this.userService.getById(id);</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@PostMapping("")</code></div><div class="line number27 index26 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; create(@RequestBody final Flux&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt;&nbsp; users) {</code></div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return this.userService.createOrUpdate(users);</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@PutMapping("/{id}")</code></div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt;&nbsp; update(@PathVariable("id") final String id, @RequestBody final User user) {</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Objects.requireNonNull(user);</code></div><div class="line number34 index33 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">user.setId(id);</code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return this.userService.createOrUpdate(user);</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@DeleteMapping("/{id}")</code></div><div class="line number39 index38 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt;&nbsp; delete(@PathVariable("id") final String id) {</code></div><div class="line number40 index39 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return this.userService.delete(id);</code></div><div class="line number41 index40 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number42 index41 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id="22服务器推送事件outline" class="ibm-h3">服务器推送事件</h3><p>服务器推送事件（Server-Sent Events，SSE）允许服务器端不断地推送数据到客户端。相对于 WebSocket
                而言，服务器推送事件只支持服务器端到客户端的单向数据传递。虽然功能较弱，但优势在于 SSE 在已有的 HTTP
                协议上使用简单易懂的文本格式来表示传输的数据。作为 W3C 的推荐规范，SSE 在浏览器端的支持也比较广泛，除了 IE
                之外的其他浏览器都提供了支持。在 IE 上也可以使用 polyfill 库来提供支持。在服务器端来说，SSE
                是一个不断产生新数据的流，非常适合于用反应式流来表示。在 WebFlux 中创建 SSE 的服务器端是非常简单的。只需要返回的对象的类型是
                Flux&lt;ServerSentEvent&gt;，就会被自动按照 SSE 规范要求的格式来发送响应。</p><p>代码清单 4 中的 SseController 是一个使用 SSE 的控制器的示例。其中的方法
                randomNumbers()表示的是每隔一秒产生一个随机数的 SSE 端点。我们可以使用类 ServerSentEvent.Builder 来创建
                ServerSentEvent 对象。这里我们指定了事件名称
                random，以及每个事件的标识符和数据。事件的标识符是一个递增的整数，而数据则是产生的随机数。</p><h5 id="listing4" class="ibm-h5">清单 4. 服务器推送事件示例
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_310017" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@RestController</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">@RequestMapping("/sse")</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">public class SseController {</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@GetMapping("/randomNumbers")</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Flux&lt;</code><code class="htmlscript keyword">ServerSentEvent</code><code class="htmlscript plain">&lt;Integer&gt;&gt; randomNumbers() {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Flux.interval(Duration.ofSeconds(1))</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.map(seq -&gt; Tuples.of(seq, ThreadLocalRandom.current().nextInt()))</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.map(data -&gt; ServerSentEvent.&lt;</code><code class="htmlscript keyword">Integer</code><code class="htmlscript plain">&gt;builder()</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.event("random")</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.id(Long.toString(data.getT1()))</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.data(data.getT2())</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.build());</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number14 index13 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>在测试 SSE 时，我们只需要使用 curl 来访问即可。代码清单 5 给出了调用
                curl http://localhost:8080/sse/randomNumbers 的结果。</p><h5 id="listing5" class="ibm-h5">清单 5. SSE 服务器端发送的响应
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_251592" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">id:0</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">event:random</code></div><div class="line number3 index2 alt2"><code class="htmlscript plain">data:751025203</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="htmlscript plain">id:1</code></div><div class="line number6 index5 alt1"><code class="htmlscript plain">event:random</code></div><div class="line number7 index6 alt2"><code class="htmlscript plain">data:-1591883873</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="htmlscript plain">id:2</code></div><div class="line number10 index9 alt1"><code class="htmlscript plain">event:random</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">data:-1899224227</code></div></div></td></tr></tbody></table></div></div></div><h3 id="23WebSocketoutline" class="ibm-h3">WebSocket</h3><p>WebSocket 支持客户端与服务器端的双向通讯。当客户端与服务器端之间的交互方式比较复杂时，可以使用 WebSocket。WebSocket
                在主流的浏览器上都得到了支持。WebFlux 也对创建 WebSocket 服务器端提供了支持。在服务器端，我们需要实现接口
                org.springframework.web.reactive.socket.WebSocketHandler 来处理 WebSocket
                通讯。接口 WebSocketHandler 的方法 handle 的参数是接口 WebSocketSession
                    的对象，可以用来获取客户端信息、接送消息和发送消息。代码清单
                    6 中的 EchoHandler 对于每个接收的消息，会发送一个添加了"ECHO -&gt;
                "前缀的响应消息。WebSocketSession 的 receive 方法的返回值是一个
                Flux&lt;WebSocketMessage&gt;对象，表示的是接收到的消息流。而 send 方法的参数是一个
                Publisher&lt;WebSocketMessage&gt;对象，表示要发送的消息流。在 handle 方法，使用 map 操作对
                receive 方法得到的 Flux&lt;WebSocketMessage&gt;中包含的消息继续处理，然后直接由 send 方法来发送。</p><h5 id="listing6" class="ibm-h5">清单 6. WebSocket 的 EchoHandler 示例
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_86748" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Component</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class EchoHandler implements WebSocketHandler {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Override</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">Void</code><code class="htmlscript plain">&gt; handle(final WebSocketSession session) {</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return session.send(</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">session.receive()</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.map(msg -&gt; session.textMessage("ECHO -&gt; " + msg.getPayloadAsText())));</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number9 index8 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>在创建了 WebSocket 的处理器 EchoHandler 之后，下一步需要把它注册到 WebFlux 中。我们首先需要创建一个类
                WebSocketHandlerAdapter 的对象，该对象负责把 WebSocketHandler 关联到 WebFlux 中。代码清单 7 中给出了相应的 Spring 配置。其中的
                HandlerMapping 类型的 bean 把 EchoHandler 映射到路径 /echo。</p><h5 id="listing7" class="ibm-h5">清单 7. 注册 EchoHandler
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_74948" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Configuration</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class WebSocketConfiguration {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Autowired</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Bean</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public HandlerMapping webSocketMapping(final EchoHandler echoHandler) {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final Map&lt;</code><code class="htmlscript keyword">String</code><code class="htmlscript plain">, WebSocketHandler&gt; map = new HashMap&lt;&gt;(1);</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">map.put("/echo", echoHandler);</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">mapping.setOrder(Ordered.HIGHEST_PRECEDENCE);</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">mapping.setUrlMap(map);</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return mapping;</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Bean</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public WebSocketHandlerAdapter handlerAdapter() {</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return new WebSocketHandlerAdapter();</code></div><div class="line number19 index18 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number20 index19 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>运行应用之后，可以使用工具来测试该 WebSocket 服务。打开工具页面
                https://www.websocket.org/echo.html，然后连接到
                ws://localhost:8080/echo，可以发送消息并查看服务器端返回的结果。</p><h2 id="3函数式编程模型outline" class="ibm-h2">函数式编程模型</h2><p>在上节中介绍了基于 Java 注解的编程模型，WebFlux 还支持基于 lambda 表达式的函数式编程模型。与基于 Java
                注解的编程模型相比，函数式编程模型的抽象层次更低，代码编写更灵活，可以满足一些对动态性要求更高的场景。不过在编写时的代码复杂度也较高，学习曲线也较陡。开发人员可以根据实际的需要来选择合适的编程模型。目前
                Spring Boot 不支持在一个应用中同时使用两种不同的编程模式。</p><p>为了说明函数式编程模型的用法，我们使用 Spring Initializ 来创建一个新的 WebFlux
                项目。在函数式编程模型中，每个请求是由一个函数来处理的， 通过接口
                org.springframework.web.reactive.function.server.HandlerFunction
                来表示。HandlerFunction 是一个函数式接口，其中只有一个方法 Mono&lt;T extends ServerResponse&gt;
                handle(ServerRequest request)，因此可以用 labmda 表达式来实现该接口。接口 ServerRequest
                表示的是一个 HTTP 请求。通过该接口可以获取到请求的相关信息，如请求路径、HTTP 头、查询参数和请求内容等。方法 handle 的返回值是一个
                Mono&lt;T extends ServerResponse&gt;对象。接口 ServerResponse 用来表示 HTTP
                响应。ServerResponse 中包含了很多静态方法来创建不同 HTTP
                    状态码的响应对象。本节中通过一个简单的计算器来展示函数式编程模型的用法。代码清单 8 中给出了处理不同请求的类
                CalculatorHandler，其中包含的方法 add、subtract、multiply 和 divide 都是接口
                HandlerFunction 的实现。这些方法分别对应加、减、乘、除四种运算。每种运算都是从 HTTP
                请求中获取到两个作为操作数的整数，再把运算的结果返回。</p><h5 id="listing8" class="ibm-h5">清单 8. 处理请求的类 CalculatorHandler
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_84257" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Component</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class CalculatorHandler {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt; add(final ServerRequest request) {</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return calculate(request, (v1, v2) -&gt; v1 + v2);</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt; subtract(final ServerRequest request) {</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return calculate(request, (v1, v2) -&gt; v1 - v2);</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt;&nbsp; multiply(final ServerRequest request) {</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return calculate(request, (v1, v2) -&gt; v1 * v2);</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public Mono&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt; divide(final ServerRequest request) {</code></div><div class="line number17 index16 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return calculate(request, (v1, v2) -&gt; v1 / v2);</code></div><div class="line number18 index17 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private Mono&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt; calculate(final ServerRequest request,</code></div><div class="line number21 index20 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final BiFunction&lt;</code><code class="htmlscript keyword">Integer</code><code class="htmlscript plain">, Integer, Integer&gt; calculateFunc) {</code></div><div class="line number22 index21 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final Tuple2&lt;</code><code class="htmlscript keyword">Integer</code><code class="htmlscript plain">, Integer&gt; operands = extractOperands(request);</code></div><div class="line number23 index22 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return ServerResponse</code></div><div class="line number24 index23 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.ok()</code></div><div class="line number25 index24 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.body(Mono.just(calculateFunc.apply(operands.getT1(), operands.getT2())), Integer.class);</code></div><div class="line number26 index25 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private Tuple2&lt;</code><code class="htmlscript keyword">Integer</code><code class="htmlscript plain">, Integer&gt; extractOperands(final ServerRequest request) {</code></div><div class="line number29 index28 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Tuples.of(parseOperand(request, "v1"), parseOperand(request, "v2"));</code></div><div class="line number30 index29 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private int parseOperand(final ServerRequest request, final String param) {</code></div><div class="line number33 index32 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">try {</code></div><div class="line number34 index33 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return Integer.parseInt(request.queryParam(param).orElse("0"));</code></div><div class="line number35 index34 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">} catch (final NumberFormatException e) {</code></div><div class="line number36 index35 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return 0;</code></div><div class="line number37 index36 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number38 index37 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number39 index38 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><p>在创建了处理请求的 HandlerFunction 之后，下一步是为这些 HandlerFunction 提供路由信息，也就是这些
                HandlerFunction 被调用的条件。这是通过函数式接口
                org.springframework.web.reactive.function.server.RouterFunction 来完成的。接口
                RouterFunction 的方法 Mono&lt;HandlerFunction&lt;T extends
                ServerResponse&gt;&gt; route(ServerRequest request)对每个
                ServerRequest，都返回对应的 0 个或 1 个 HandlerFunction 对象，以
                Mono&lt;HandlerFunction&gt;来表示。当找到对应的 HandlerFunction 时，该 HandlerFunction
                被调用来处理该 ServerRequest，并把得到的 ServerResponse 返回。在使用 WebFlux 的 Spring Boot
                应用中，只需要创建 RouterFunction 类型的 bean，就会被自动注册来处理请求并调用相应的 HandlerFunction。</p><p>代码清单 9 给了示例相关的配置类 Config。方法
                RouterFunctions.route 用来根据 Predicate 是否匹配来确定 HandlerFunction
                是否被应用。RequestPredicates 中包含了很多静态方法来创建常用的基于不同匹配规则的 Predicate。如
                RequestPredicates.path 用来根据 HTTP 请求的路径来进行匹配。此处我们检查请求的路径是/calculator。在清单 9
                中，我们首先使用 ServerRequest 的 queryParam 方法来获取到查询参数 operator 的值，然后通过反射 API 在类
                CalculatorHandler 中找到与查询参数 operator 的值名称相同的方法来确定要调用的 HandlerFunction
                的实现，最后调用查找到的方法来处理该请求。如果找不到查询参数 operator 或是 operator 的值不在识别的列表中，服务器端返回 400
                错误；如果反射 API 的方法调用中出现错误，服务器端返回 500 错误。</p><h5 id="listing9" class="ibm-h5">清单 9. 注册 RouterFunction
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_954474" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">@Configuration</code></div><div class="line number2 index1 alt1"><code class="htmlscript plain">public class Config {</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Bean</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Autowired</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public RouterFunction&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt;routerFunction(final CalculatorHandler calculatorHandler) {</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">return RouterFunctions.route(RequestPredicates.path("/calculator"), request -&gt;</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">request.queryParam("operator").map(operator -&gt;</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">Mono.justOrEmpty(ReflectionUtils.findMethod(CalculatorHandler.class, operator, ServerRequest.class))</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.flatMap(method -&gt; (Mono&lt;</code><code class="htmlscript keyword">ServerResponse</code><code class="htmlscript plain">&gt;) ReflectionUtils.invokeMethod(method, calculatorHandler, request))</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.switchIfEmpty(ServerResponse.badRequest().build())</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.onErrorResume(ex -&gt; ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build()))</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.orElse(ServerResponse.badRequest().build()));</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h2 id="4客户端outline" class="ibm-h2">客户端</h2><p>除了服务器端实现之外，WebFlux 也提供了反应式客户端，可以访问 HTTP、SSE 和 WebSocket 服务器端。</p><h3 id="41HTTPoutline" class="ibm-h3">HTTP</h3><p>对于 HTTP 和 SSE，可以使用 WebFlux 模块中的类
                    org.springframework.web.reactive.function.client.WebClient。代码清单 10 中的 RESTClient 用来访问前面小节中创建的
                REST API。首先使用 WebClient.create 方法来创建一个新的 WebClient 对象，然后使用方法 post 来创建一个
                POST 请求，并使用方法 body 来设置 POST 请求的内容。方法 exchange 的作用是发送请求并得到以
                Mono&lt;ServerResponse&gt;表示的 HTTP 响应。最后对得到的响应进行处理并输出结果。ServerResponse 的
                bodyToMono 方法把响应内容转换成类 User 的对象，最终得到的结果是 Mono&lt;User&gt;对象。调用
                createdUser.block 方法的作用是等待请求完成并得到所产生的类 User 的对象。</p><h5 id="listing10" class="ibm-h5">清单 10. 使用 WebClient 访问 REST API
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_739340" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class RESTClient {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(final String[] args) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final User user = new User();</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">user.setName("Test");</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">user.setEmail("test@example.org");</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final WebClient client = WebClient.create("http://localhost:8080/user");</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final Monol&lt;</code><code class="htmlscript keyword">User</code><code class="htmlscript plain">&gt; createdUser = client.post()</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.uri("")</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.accept(MediaType.APPLICATION_JSON)</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.body(Mono.just(user), User.class)</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.exchange()</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.flatMap(response -&gt; response.bodyToMono(User.class));</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">System.out.println(createdUser.block());</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number15 index14 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id="42SSEoutline" class="ibm-h3">SSE</h3><p>WebClient 还可以用同样的方式来访问 SSE 服务，如代码清单
                    11 所示。这里我们访问的是在之前的小节中创建的生成随机数的 SSE 服务。使用 WebClient 访问 SSE
                在发送请求部分与访问 REST API 是相同的，所不同的地方在于对 HTTP 响应的处理。由于 SSE 服务的响应是一个消息流，我们需要使用
                flatMapMany 把 Mono&lt;ServerResponse&gt;转换成一个
                Flux&lt;ServerSentEvent&gt;对象，这是通过方法 BodyExtractors.toFlux 来完成的，其中的参数 new
                ParameterizedTypeReference&lt;ServerSentEvent&lt;String&gt;&gt;()
                {}表明了响应消息流中的内容是 ServerSentEvent 对象。由于 SSE 服务器会不断地发送消息，这里我们只是通过 buffer
                方法来获取前 10 条消息并输出。</p><h5 id="listing11" class="ibm-h5">清单 11. 使用 WebClient 访问 SSE 服务
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_257908" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class SSEClient {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(final String[] args) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final WebClient client = WebClient.create();</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">client.get()</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.uri("http://localhost:8080/sse/randomNumbers")</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.accept(MediaType.TEXT_EVENT_STREAM)</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.exchange()</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.flatMapMany(response -&gt; response.body(BodyExtractors.toFlux(new ParameterizedTypeReference&lt;</code><code class="htmlscript keyword">ServerSentEvent</code><code class="htmlscript plain">&lt;String&gt;&gt;() {</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">})))</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.filter(sse -&gt; Objects.nonNull(sse.data()))</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.map(ServerSentEvent::data)</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.buffer(10)</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.doOnNext(System.out::println)</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.blockFirst();</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id="43WebSocketoutline" class="ibm-h3">WebSocket</h3><p>访问 WebSocket 不能使用 WebClient，而应该使用专门的 WebSocketClient 客户端。Spring Boot 的
                WebFlux 模板中默认使用的是 Reactor Netty 库。Reactor Netty 库提供了 WebSocketClient
                的实现。在代码清单 12 中，我们访问的是上面小节中创建的 WebSocket 服务。WebSocketClient 的 execute 方法与
                WebSocket 服务器建立连接，并执行给定的 WebSocketHandler 对象。该 WebSocketHandler 对象与代码清单
                6 中的作用是一样的，只不过它是工作于客户端，而不是服务器端。在 WebSocketHandler 的实现中，首先通过
                WebSocketSession 的 send 方法来发送字符串 Hello 到服务器端，然后通过 receive
                方法来等待服务器端的响应并输出。方法 take(1)的作用是表明客户端只获取服务器端发送的第一条消息。</p><h5 id="listing12" class="ibm-h5">清单 12. 使用 WebSocketClient 访问
                    WebSocket
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_29075" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class WSClient {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public static void main(final String[] args) {</code></div><div class="line number3 index2 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final WebSocketClient client = new ReactorNettyWebSocketClient();</code></div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">client.execute(URI.create("ws://localhost:8080/echo"), session -&gt;</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">session.send(Flux.just(session.textMessage("Hello")))</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.thenMany(session.receive().take(1).map(WebSocketMessage::getPayloadAsText))</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.doOnNext(System.out::println)</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.then())</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.block(Duration.ofMillis(5000));</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number11 index10 alt2"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h2 id="5测试outline" class="ibm-h2">测试</h2><p>在 spring-test 模块中也添加了对 WebFlux 的支持。通过类
                org.springframework.test.web.reactive.server.WebTestClient 可以测试 WebFlux
                服务器。进行测试时既可以通过 mock 的方式来进行，也可以对实际运行的服务器进行集成测试。代码清单 13 通过一个集成测试来测试 UserController
                中的创建用户的功能。方法 WebTestClient.bindToServer 绑定到一个运行的服务器并设置了基础 URL。发送 HTTP
                    请求的方式与代码清单 10 相同，不同的是 exchange
                方法的返回值是 ResponseSpec 对象，其中包含了 expectStatus 和 expectBody 等方法来验证 HTTP
                响应的状态码和内容。方法 jsonPath 可以根据 JSON 对象中的路径来进行验证。</p><h5 id="listing13" class="ibm-h5">清单 13. 测试 UserController
                </h5><div class="ibm-syntax-container"><div><div id="highlighter_692503" class="syntaxhighlighter  htmlscript"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="htmlscript plain">public class UserControllerTest {</code></div><div class="line number2 index1 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">private final WebTestClient client = WebTestClient.bindToServer().baseUrl("http://localhost:8080").build();</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">@Test</code></div><div class="line number5 index4 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">public void testCreateUser() throws Exception {</code></div><div class="line number6 index5 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">final User user = new User();</code></div><div class="line number7 index6 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">user.setName("Test");</code></div><div class="line number8 index7 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">user.setEmail("test@example.org");</code></div><div class="line number9 index8 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">client.post().uri("/user")</code></div><div class="line number10 index9 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.contentType(MediaType.APPLICATION_JSON)</code></div><div class="line number11 index10 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.body(Mono.just(user), User.class)</code></div><div class="line number12 index11 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.exchange()</code></div><div class="line number13 index12 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.expectStatus().isOk()</code></div><div class="line number14 index13 alt1"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">.expectBody().jsonPath("name").isEqualTo("Test");</code></div><div class="line number15 index14 alt2"><code class="htmlscript spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="htmlscript plain">}</code></div><div class="line number16 index15 alt1"><code class="htmlscript plain">}</code></div></div></td></tr></tbody></table></div></div></div><h2 id="6小结outline" class="ibm-h2">小结</h2><p>反应式编程范式为开发高性能 Web 应用带来了新的机会和挑战。Spring 5 中的 WebFlux 模块可以作为开发反应式 Web 应用的基础。由于
                Spring 框架的流行，WebFlux 会成为开发 Web 应用的重要趋势之一。本文对 Spring 5 中的 WebFlux
                模块进行了详细的介绍，包括如何用 WebFlux 开发 HTTP、SSE 和 WebSocket 服务器端应用，以及作为客户端来访问
                HTTP、SSE 和 WebSocket 服务。对于 WebFlux 的基于 Java 注解和函数式编程等两种模型都进行了介绍。最后介绍了如何测试
                WebFlux 应用。</p><h2 id="7参考资源resourcesoutline" class="ibm-h2">参考资源
                (resources)</h2><ul class="ibm-bullet-list"><li>参考 WebFlux 的<a href="http://docs.spring.io/spring/docs/5.0.0.RC2/spring-framework-reference/web.html#web-reactive">参考指南</a>，了解 WebFlux 的更多内容。</li><li>查看《<a href="https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html">使用 Reactor 进行反应式编程</a>》一文，了解 Reactor 项目的更多内容。</li><li>了解 <a href="https://github.com/reactor/reactor-netty">Reactor
                        Netty</a> 的更多内容。</li></ul><!--CMA ID: 1051322--><!--Site ID: 10--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl-->
                                        <!-- Article Quiz -->
                                        
                                        <!-- Article Resources -->
                                        
                                        <!-- Commenting -->
<!-- INLINE_COMMENTS_BEGIN: -->
<div class="ibm-alternate-rule"><hr></div>
<div id="dw-article-cmts-top" class="ibm-columns">
    <div class="ibm-col-6-2">
        <h4 id="icomments" class="ibm-h4">评论</h4>
        <div id="dw-article-cmts-login">
            <p>添加或订阅评论，请先<a onclick="window.location=userLinks[0].url;" tabindex="0" role="link">登录</a>或<a onclick="window.location=userLinks[1].url;" tabindex="0" role="link">注册</a>。</p>
        </div>
    </div>    
    <div class="ibm-col-6-2" id="dw-notify"> 
        <input type="checkbox" value="1" name="comment_notification" id="comment_notification" disabled="">
        <label for="comment_notification" style="color: rgb(204, 204, 204);">有新评论时提醒我</label>	   
    </div>
</div>

<div class="dw-article-cmts-container">       
    <div class="ibm-no-print jquery-comments read-only" id="dw-icomments-container"><div class="commenting-field main"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round by-current-user"><div class="textarea-wrapper"><span class="close" style="display: none;"><span class="left"></span><span class="right"></span></span><div class="textarea" data-placeholder="添加评论" contenteditable="true" style="height: 3.65em;"></div><div class="control-row" style="display: none;"><span class="send save highlight-background">提交</span></div></div></div><ul class="navigation"><div class="navigation-wrapper"><li data-sort-key="newest" data-container-name="comments" class="active">最新的</li><li data-sort-key="oldest" data-container-name="comments">历史</li><li data-sort-key="popularity" data-container-name="comments">热门</li></div><div class="navigation-wrapper responsive"><li class="title active"><header>最新的</header></li><ul class="dropdown"><li data-sort-key="newest" data-container-name="comments" class="active">最新的</li><li data-sort-key="oldest" data-container-name="comments">历史</li><li data-sort-key="popularity" data-container-name="comments">热门</li></ul></div></ul><div class="data-container" data-container="comments"><ul id="comment-list" class="main"><li data-id="28298" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1512700415341">2017 年 12 月 08 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/figoyan">figoyan</a></div><div class="wrapper"><div class="content">已解决，是我本地jar被破坏引起的，清理jar重新download就好了。</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%8C%E6%98%AF%E6%88%91%E6%9C%AC%E5%9C%B0jar%E8%A2%AB%E7%A0%B4%E5%9D%8F%E5%BC%95%E8%B5%B7%E7%9A%84%EF%BC%8C%E6%B8%85%E7%90%86jar%E9%87%8D%E6%96%B0download%E5%B0%B1%E5%A5%BD%E4%BA%86%E3%80%82%0D%E7%94%B1%20figoyan%20%20%E4%BA%8E%202017%20%E5%B9%B4%2012%20%E6%9C%88%2008%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="28294" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1512635245048">2017 年 12 月 07 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/figoyan">figoyan</a></div><div class="wrapper"><div class="content">作者不在吗？</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E4%BD%9C%E8%80%85%E4%B8%8D%E5%9C%A8%E5%90%97%EF%BC%9F%0D%E7%94%B1%20figoyan%20%20%E4%BA%8E%202017%20%E5%B9%B4%2012%20%E6%9C%88%2007%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li><li data-id="28293" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1512629616234">2017 年 12 月 07 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/figoyan">figoyan</a></div><div class="wrapper"><div class="content">我用最新的2.0.0.M7创建的工程，STS、IntelliJ IDEA 都试过了，总是报少类库，
Caused by: java.lang.ClassNotFoundException: org.springframework.http.client.reactive.ClientHttpConnector
或者
Caused by: java.lang.ClassNotFoundException: org.springframework.web.util.UriBuilderFactory
你可以试下，不知道为啥，我看也是有 spring-web 包的。</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E6%88%91%E7%94%A8%E6%9C%80%E6%96%B0%E7%9A%842.0.0.M7%E5%88%9B%E5%BB%BA%E7%9A%84%E5%B7%A5%E7%A8%8B%EF%BC%8CSTS%E3%80%81IntelliJ%20IDEA%20%E9%83%BD%E8%AF%95%E8%BF%87%E4%BA%86%EF%BC%8C%E6%80%BB%E6%98%AF%E6%8A%A5%E5%B0%91%E7%B1%BB%E5%BA%93%EF%BC%8C%0ACaused%20by%3A%20java.lang.ClassNotFoundException%3A%20org.springframework.http.client.reactive.ClientHttpConnector%0A%E6%88%96%E8%80%85%0ACaused%20by%3A%20java.lang.ClassNotFoundException%3A%20org.springframework.web.util.UriBuilderFactory%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AF%95%E4%B8%8B%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E4%B8%BA%E5%95%A5%EF%BC%8C%E6%88%91%E7%9C%8B%E4%B9%9F%E6%98%AF%E6%9C%89%20spring-web%20%E5%8C%85%E7%9A%84%E3%80%82%0D%E7%94%B1%20figoyan%20%20%E4%BA%8E%202017%20%E5%B9%B4%2012%20%E6%9C%88%2007%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"><li data-id="28296" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1512667961527">2017 年 12 月 08 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/Alex%20Cheng">Alex Cheng</a></div><div class="wrapper"><div class="content">你说的那2个类都是在sprig-web的5.0.2里面是肯定存在的，我试了，是没有问题的。你检查一下你本地的maven仓库目录下具体的jar文件，有时候由于网络原因，会导致一个jar包在maven解析的时候可能没有下载完全。你直接在IDEA里面查找这个类，看看是不是能找到。</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E4%BD%A0%E8%AF%B4%E7%9A%84%E9%82%A32%E4%B8%AA%E7%B1%BB%E9%83%BD%E6%98%AF%E5%9C%A8sprig-web%E7%9A%845.0.2%E9%87%8C%E9%9D%A2%E6%98%AF%E8%82%AF%E5%AE%9A%E5%AD%98%E5%9C%A8%E7%9A%84%EF%BC%8C%E6%88%91%E8%AF%95%E4%BA%86%EF%BC%8C%E6%98%AF%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98%E7%9A%84%E3%80%82%E4%BD%A0%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%8B%E4%BD%A0%E6%9C%AC%E5%9C%B0%E7%9A%84maven%E4%BB%93%E5%BA%93%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%85%B7%E4%BD%93%E7%9A%84jar%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9C%89%E6%97%B6%E5%80%99%E7%94%B1%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%EF%BC%8C%E4%BC%9A%E5%AF%BC%E8%87%B4%E4%B8%80%E4%B8%AAjar%E5%8C%85%E5%9C%A8maven%E8%A7%A3%E6%9E%90%E7%9A%84%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E4%B8%8B%E8%BD%BD%E5%AE%8C%E5%85%A8%E3%80%82%E4%BD%A0%E7%9B%B4%E6%8E%A5%E5%9C%A8IDEA%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE%E8%BF%99%E4%B8%AA%E7%B1%BB%EF%BC%8C%E7%9C%8B%E7%9C%8B%E6%98%AF%E4%B8%8D%E6%98%AF%E8%83%BD%E6%89%BE%E5%88%B0%E3%80%82%0D%E7%94%B1%20Alex%20Cheng%20%20%E4%BA%8E%202017%20%E5%B9%B4%2012%20%E6%9C%88%2008%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div></li></ul></li><li data-id="28229" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1511761753342">2017 年 11 月 27 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/sulong.wang">sulong.wang</a></div><div class="wrapper"><div class="content">补充请求的body内容：（下面的内容复制20行）

0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E8%A1%A5%E5%85%85%E8%AF%B7%E6%B1%82%E7%9A%84body%E5%86%85%E5%AE%B9%EF%BC%9A%EF%BC%88%E4%B8%8B%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E5%A4%8D%E5%88%B620%E8%A1%8C%EF%BC%89%0A%0A0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789%0D%E7%94%B1%20sulong.wang%20%20%E4%BA%8E%202017%20%E5%B9%B4%2011%20%E6%9C%88%2027%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"><li class="toggle-all highlight-font-bold"><span class="text">查看所有 3 条回复</span><span class="caret"></span></li><li data-id="28231" class="comment hidden-reply"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1511768243307">2017 年 11 月 27 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/Alex%20Cheng">Alex Cheng</a></div><div class="wrapper"><div class="content">我在本地测试了一下，发送的内容远超过你说的2k，仍然可以正确的收到请求内容并处理。你是直接连的吧，中间有经过Apache或是Nginx这样的代理服务器吗？</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E6%88%91%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E4%BA%86%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%8F%91%E9%80%81%E7%9A%84%E5%86%85%E5%AE%B9%E8%BF%9C%E8%B6%85%E8%BF%87%E4%BD%A0%E8%AF%B4%E7%9A%842k%EF%BC%8C%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E5%B9%B6%E5%A4%84%E7%90%86%E3%80%82%E4%BD%A0%E6%98%AF%E7%9B%B4%E6%8E%A5%E8%BF%9E%E7%9A%84%E5%90%A7%EF%BC%8C%E4%B8%AD%E9%97%B4%E6%9C%89%E7%BB%8F%E8%BF%87Apache%E6%88%96%E6%98%AFNginx%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%97%EF%BC%9F%0D%E7%94%B1%20Alex%20Cheng%20%20%E4%BA%8E%202017%20%E5%B9%B4%2011%20%E6%9C%88%2027%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div></li><li data-id="28232" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1511768290527">2017 年 11 月 27 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/Alex%20Cheng">Alex Cheng</a></div><div class="wrapper"><div class="content">这样吧，你直接把你的代码发我看看，alexcheng1982#gmail.com，#换成@</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E8%BF%99%E6%A0%B7%E5%90%A7%EF%BC%8C%E4%BD%A0%E7%9B%B4%E6%8E%A5%E6%8A%8A%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E5%8F%91%E6%88%91%E7%9C%8B%E7%9C%8B%EF%BC%8Calexcheng1982%23gmail.com%EF%BC%8C%23%E6%8D%A2%E6%88%90%40%0D%E7%94%B1%20Alex%20Cheng%20%20%E4%BA%8E%202017%20%E5%B9%B4%2011%20%E6%9C%88%2027%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div></li><li data-id="28240" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1511833263537">2017 年 11 月 28 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/sulong.wang">sulong.wang</a><span class="reply-to"><i class="fa fa-share"></i>Alex Cheng</span></div><div class="wrapper"><div class="content">感谢，已经将测试工程发到你邮箱了。</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E6%84%9F%E8%B0%A2%EF%BC%8C%E5%B7%B2%E7%BB%8F%E5%B0%86%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E5%8F%91%E5%88%B0%E4%BD%A0%E9%82%AE%E7%AE%B1%E4%BA%86%E3%80%82%0D%E7%94%B1%20sulong.wang%20%20%E4%BA%8E%202017%20%E5%B9%B4%2011%20%E6%9C%88%2028%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div></li></ul></li><li data-id="28228" class="comment"><div class="comment-wrapper"><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/user-icon.png" alt="" class="profile-picture round"><time data-original="1511761353262">2017 年 11 月 27 日</time><div class="name"><a href="https://www.ibm.com/developerworks/community/profiles/user/sulong.wang">sulong.wang</a></div><div class="wrapper"><div class="content">大侠，参考你的文章动手写了个Spring webflux的例子，发现请求body的内容超过一定大小，比如2k，ServerRequest就拿不到body，搞了好长时间找不到解决办法，不知道你是否遇到，如何解决，万分感谢！
request.bodyToMono(String.class).subscribe(body-&gt;{    System.out.println(body);});</div><span class="actions"><button class="action reply" type="button">回复</button><span class="separator">·</span><button class="action upvote"><span class="upvote-count">0</span><i class="fa fa-thumbs-up"></i></button><span class="separator">·</span><a class="action reply" href="https://www.ibm.com/developerworks/community/report?lang=cn&amp;referingURL=https%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Fcn%2Fjava%2Fspring5-webflux-reactive%2Findex.html&amp;mymessage=%E8%AF%84%E8%AE%BA%3A%20%E5%A4%A7%E4%BE%A0%EF%BC%8C%E5%8F%82%E8%80%83%E4%BD%A0%E7%9A%84%E6%96%87%E7%AB%A0%E5%8A%A8%E6%89%8B%E5%86%99%E4%BA%86%E4%B8%AASpring%20webflux%E7%9A%84%E4%BE%8B%E5%AD%90%EF%BC%8C%E5%8F%91%E7%8E%B0%E8%AF%B7%E6%B1%82body%E7%9A%84%E5%86%85%E5%AE%B9%E8%B6%85%E8%BF%87%E4%B8%80%E5%AE%9A%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%AF%94%E5%A6%822k%EF%BC%8CServerRequest%E5%B0%B1%E6%8B%BF%E4%B8%8D%E5%88%B0body%EF%BC%8C%E6%90%9E%E4%BA%86%E5%A5%BD%E9%95%BF%E6%97%B6%E9%97%B4%E6%89%BE%E4%B8%8D%E5%88%B0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E6%98%AF%E5%90%A6%E9%81%87%E5%88%B0%EF%BC%8C%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%B8%87%E5%88%86%E6%84%9F%E8%B0%A2%EF%BC%81%0Arequest.bodyToMono(String.class).subscribe(body-%3E%7B%20%20%20%20System.out.println(body)%3B%7D)%3B%0D%E7%94%B1%20sulong.wang%20%20%E4%BA%8E%202017%20%E5%B9%B4%2011%20%E6%9C%88%2027%20%E6%97%A5%20%0D%0D---%20%E5%9C%A8%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%20---" target="_blank">报告滥用<i class="fa image" style="background-image: url(&quot;/developerworks/maverick/image/report-abuse.png&quot;);"></i></a></span></div></div><ul class="child-comments"></ul></li></ul><div class="no-comments no-data"><i class="fa fa-comments fa-2x"></i><br>第一个评论</div></div></div>
</div>
<!-- INLINE_COMMENTS_END -->                                        <!-- CENTER_6_4_CONTENT_COLUMN_END -->
                                    </div>   
                                </div>
                        <!--Rating_Meta_BEGIN--><div class="metavalue">static.content.url=http://www.ibm.com/developerworks/js/artrating/</div><div class="metavalue">SITE_ID=10</div><div class="metavalue">Zone=Java technology</div><div class="metavalue">ArticleID=1051322</div><div class="metavalue">ArticleTitle=使用 Spring 5 的 WebFlux 开发反应式 Web 应用</div><div class="metavalue">publish-date=10252017</div><script language="javascript" type="text/javascript">document.write('<div class="metavalue">url='+location.href.replace(/</g,  '%3C')+'</div>');</script><div class="metavalue">url=https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html</div><!--Rating_Meta_END-->
                    </div>
                    <!-- END_IBM-CONTENT-MAIN -->
                </div>
                <!-- END_IBM-CONTENT-BODY -->
            </div>
            <!-- END_IBM-CONTENT -->
        </div>
        <!-- END_IBM-PCON -->
    </main>
    <!-- MAIN_CONTENT_END -->
    
    <!-- END_CONTENT-WRAPPER -->	
<p class="ibm-ind-link ibm-nospacing ibm-icononly ibm-btt-auto ibm-hidden-small"><a class="ibm-nospacing ibm-chevron-up-link" href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html#top" tabindex="-1">回页首</a></p></div>
<!-- FOOTER_BEGIN -->
<footer role="contentinfo" aria-label="IBM developerWorks">
    <div id="dw-footer-module" class="dw-footer-home">
        <section aria-label="参考资料" role="contentinfo">
            <div class="ibm-columns">
                <div class="ibm-col-6-1 dw-footer-col-1">
                    <ul>
                        <li class="dw-footer-heading" aria-label="developerWorks">developerWorks</li>
                        <li><a href="https://www.ibm.com/developerworks/secure/feedback.jsp?domain=dwchina">站点反馈</a></li>
                        <li class="dw-footer-newline"><a href="https://www.ibm.com/developerworks/secure/myideas2.jsp?domain=dwchina">我要投稿</a></li>
                        <li class="dw-footer-newline"><a href="https://www.ibm.com/developerworks/cn/author/">投稿指南</a></li>
                        <li class="dw-footer-newline"><a href="https://www.ibm.com/developerworks/community/report?lang=zh">报告滥用</a></li>
                        <li class="dw-footer-newline"><a href="https://www.ibm.com/developerworks/cn/community/terms/thirdparty/">第三方提示</a></li>
                    </ul>
                    <ul>
                        <li class="dw-footer-newline"><a href="https://weibo.com/ibmdw/">关注微博</a></li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-2">
                    <ul>
                        <li class="dw-footer-heading" aria-label="加入">加入</li>
                        <li class="dw-footer-newline"><a href="https://www.ibm.com/partnerworld/isv/">ISV 资源 (英语)</a></li>
                    </ul>
                    <ul class="dw-footer-lang" aria-label="选择语言">
                        <li class="dw-footer-heading">选择语言</li>
                        <li><a href="https://www.ibm.com/developerworks/">English</a></li>
                        <li><a href="https://www.ibm.com/developerworks/cn/" lang="zh">中文</a></li>
                        <li><a href="https://www.ibm.com/developerworks/jp/" lang="ja">日本語</a></li>
                        <li><a href="https://www.ibm.com/developerworks/ru/" lang="ru">Русский</a></li>
                        <li class="dw-footer-newline"><a href="https://www.ibm.com/developerworks/br/" lang="pt">Português (Brasil)</a></li>
                        <li><a href="https://www.ibm.com/developerworks/ssa/" lang="es">Español</a></li>
                        <li><a href="https://developer.ibm.com/kr/" lang="kr">한글</a></li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-3"> </div>
                <div class="ibm-col-6-1 dw-footer-col-4">
                    <ul class="dw-footer-categories">
                        <li class="dw-footer-category">
                            <a href="https://www.ibm.com/developerworks/cn/views/global/libraryview.jsp">技术文档库</a>
                        </li>
                        <li class="dw-footer-category">
                            <a href="http://ibmdeveloperworks.mkt6741.com/developerWorksChina-NewsletterSubscriptionPage/">dW 中国时事通讯</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="https://developer.ibm.com/cn/dwblog/">博客</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="https://developer.ibm.com/cn/events/">活动</a>  
                        </li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-5">
                    <ul class="dw-footer-categories">
                        <li class="dw-footer-category">
                            <a href="https://www.ibm.com/developerworks/cn/community/">社区</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="https://developer.ibm.com/cn/">开发者中心</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="https://developer.ibm.com/cn/tv/">视频</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="https://www.ibm.com/developerworks/cn/rss/">订阅源</a>  
                        </li>

                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-6">
                    <ul class="dw-footer-categories">
                        <li class="dw-footer-category">
                            <a href="https://www.ibm.com/developerworks/cn/downloads/">软件下载</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="https://developer.ibm.com/cn/journey/">Code patterns</a>  
                        </li>
                    </ul>
                </div>
            </div>
        </section>
    </div>
    <div id="dw-footer" class="ibm-padding-normal ibm-alternate">
        <div class="ibm-columns">
            <div class="ibm-col-1-1">
                <div class="dw-footer-corporate-links">
                <ul>
                    <li><a href="https://www.ibm.com/contact/cn/zh/">联系 IBM</a></li>
                    <li><a href="https://www.ibm.com/privacy/cn/zh/">隐私条约</a></li>
                    <li><a href="https://www.ibm.com/developerworks/community/terms?lang=zh">使用条款</a></li>
                    <li><a href="https://www.ibm.com/accessibility/cn/zh/">信息无障碍选项</a></li>
                    <li class="ibm-feedbacklink"><a href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html#">反馈</a></li>
                    <li id="ibm-truste-cp"><a onclick="truste.eu.clickListener();return false;" href="https://www.ibm.com/developerworks/cn/java/spring5-webflux-reactive/index.html#">Cookie 首选项</a></li>
                </ul>                 
                </div>    
            </div>
        </div>
    </div>        
</footer> <!-- FOOTER_END -->

<!-- END_IBM-TOP -->
</div>

<!-- SCRIPTS_INCLUDE_BEGIN -->
<!-- Styles -->
<link rel="stylesheet" type="text/css" href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/jquery-comments.css">
<link rel="stylesheet" href="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/font-awesome.min.css">

<!-- Libraries -->
<script type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/jquery-comments.min.js"></script>
<script type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/moment-with-locales.js"></script>
<script type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/ContentComments.js"></script>
<script type="text/javascript" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/ContentCommentsFormatter.js"></script>
<script type="text/javascript" language="JavaScript">

	IBMCore.common.module.masthead.subscribe("ready", "customjs", setupCommentsPlugin).runAsap(setupCommentsPlugin);

	function setupCommentsPlugin(){
		//debugger;
			//alert(userLinks);
			var commentsInitInfo = {
				contentId : $("div[class=metavalue]:contains('ArticleID=')").text().split("=")[1],
				siteId :  $("div[class=metavalue]:contains('SITE_ID=')").text().split("=")[1],
				pluginDivId : '#dw-icomments-container',
				notifyElementId : "#comment_notification",
				loginMessageDivId : "#dw-article-cmts-login",
				totalCommentsDivId : "#nCmts",
						isIdea:false

			};				
								
			ContentComments.Setup(commentsInitInfo);
	}
</script>
<!-- Hotjar Tracking Code for ibm.com -->
<script>
    (function(h,o,t,j,a,r){
    h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
    h._hjSettings={hjid:42920,hjsv:5};
    a=o.getElementsByTagName('head')[0];
    r=o.createElement('script');r.async=1;
    r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
    a.appendChild(r);
    })(window,document,'//static.hotjar.com/c/hotjar-','.js?sv=');
</script>
<!-- SCRIPTS_INCLUDE_END -->



<div id="ibm-overlay-backdrop"></div><div id="ibm-mobilemenu-screen"></div><iframe name="_hjRemoteVarsFrame" title="_hjRemoteVarsFrame" id="_hjRemoteVarsFrame" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/rcj-99d43ead6bdf30da8ed5ffcb4f17100c.html" style="display: none !important; width: 1px !important; height: 1px !important; opacity: 0 !important; pointer-events: none !important;"></iframe><div id="ads"></div><iframe id="LOTCCFrameSat Dec 23 2017 14:06:31 GMT+0800 (CST)" src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/rt=ifr.html" title="empty" tabindex="-1" role="presentation" style="border: 0px; width: 0px; height: 0px; display: block;"></iframe><script src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/js(1)" id="mm_pp_background"></script><img src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/img" style="display: none;"><iframe src="./使用 Spring 5 的 WebFlux 开发反应式 Web 应用_files/iframe.html" id="mm_sync_back_ground" style="visibility: hidden; display: none;"></iframe></body></html>